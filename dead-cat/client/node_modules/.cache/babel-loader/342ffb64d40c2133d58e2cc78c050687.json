{"ast":null,"code":"var _jsxFileName = \"/Users/austinolijar/Desktop/DeadCatReact/dead-cat/src/components/PortfolioHolder.js\",\n    _s = $RefreshSig$();\n\nimport PortfolioItem from \"./PortfolioItem\";\nimport { useState, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst PortfolioHolder = props => {\n  _s();\n\n  const [storageArr, setStorageArr] = useState([]);\n  const [isEmpty, setIsEmpty] = useState(true);\n  useEffect(() => {\n    // if (props.newStorage === false) return; // WILL STOP FROM RUNNING\n    setStorageArr(JSON.parse(localStorage.getItem(\"deadCatPortfolio\")));\n  }, [props.newStorage]);\n\n  const handleDeleteStorageItem = id => {\n    setStorageArr(storageArr.filter(item => item.id !== id));\n    localStorage.setItem(\"deadCatPortfolio\", JSON.stringify(storageArr));\n    console.log('derp');\n  }; // // CHECKS TO SEE IF STORAGE IS EMPTY ON LOAD ==============\n  // useEffect(() => {\n  //   const storage = JSON.parse(localStorage.getItem(\"deadCatPortfolio\"));\n  //   console.log(storage)\n  //   if (storage === null && storage === []) {\n  //     setIsEmpty(true);\n  //   } else {\n  //     setIsEmpty(false);\n  //     setStorageArr(storage)\n  //   }\n  // }, [])\n  //   useEffect(() => {\n  //     console.log('before')\n  //     const storage = JSON.parse(localStorage.getItem(\"deadCatPortfolio\"));\n  //     if (storage === null && storage === []) {\n  //       setIsEmpty(true);\n  //       console.log(storage)\n  //       return\n  //     }\n  //     console.log('after')\n  //     localStorage.setItem(\"deadCatPortfolio\", JSON.stringify(storage));\n  //   }, [storageArr])\n\n\n  if (isEmpty) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"portfolio-holder\",\n      children: [/*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Empty\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: props.handleClearPortfolio,\n        tabIndex: props.activePortfolio ? -1 : 0,\n        className: \"clear-portfolio\",\n        children: \"Clear Entire Portfolio\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 5\n    }, this);\n  } else {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"portfolio-holder\",\n      children: [/*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 9\n      }, this), storageArr.map(data => /*#__PURE__*/_jsxDEV(PortfolioItem, {\n        handleDeleteStorageItem: handleDeleteStorageItem,\n        data: data\n      }, data.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 11\n      }, this)), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: props.handleClearPortfolio,\n        tabIndex: props.activePortfolio ? -1 : 0,\n        className: \"clear-portfolio\",\n        children: \"Clear Entire Portfolio\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this);\n  }\n};\n\n_s(PortfolioHolder, \"aFxXmzS1G1HfG9tIco52tF3hPR0=\");\n\n_c = PortfolioHolder;\nexport default PortfolioHolder;\n\nvar _c;\n\n$RefreshReg$(_c, \"PortfolioHolder\");","map":{"version":3,"sources":["/Users/austinolijar/Desktop/DeadCatReact/dead-cat/src/components/PortfolioHolder.js"],"names":["PortfolioItem","useState","useEffect","PortfolioHolder","props","storageArr","setStorageArr","isEmpty","setIsEmpty","JSON","parse","localStorage","getItem","newStorage","handleDeleteStorageItem","id","filter","item","setItem","stringify","console","log","handleClearPortfolio","activePortfolio","map","data"],"mappings":";;;AAAA,OAAOA,aAAP,MAA0B,iBAA1B;AACA,SAASC,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;;;AAEA,MAAMC,eAAe,GAAIC,KAAD,IAAW;AAAA;;AACjC,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BL,QAAQ,CAAC,EAAD,CAA5C;AACA,QAAM,CAACM,OAAD,EAAUC,UAAV,IAAwBP,QAAQ,CAAC,IAAD,CAAtC;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACd;AACAI,IAAAA,aAAa,CAACG,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqB,kBAArB,CAAX,CAAD,CAAb;AACD,GAHQ,EAGN,CAACR,KAAK,CAACS,UAAP,CAHM,CAAT;;AAKA,QAAMC,uBAAuB,GAAIC,EAAD,IAAQ;AACtCT,IAAAA,aAAa,CAACD,UAAU,CAACW,MAAX,CAAmBC,IAAD,IAAUA,IAAI,CAACF,EAAL,KAAYA,EAAxC,CAAD,CAAb;AACAJ,IAAAA,YAAY,CAACO,OAAb,CAAqB,kBAArB,EAAyCT,IAAI,CAACU,SAAL,CAAed,UAAf,CAAzC;AACAe,IAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ;AACD,GAJD,CATiC,CAenC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA,MAAId,OAAJ,EAAa;AACX,wBACE;AAAK,MAAA,SAAS,EAAC,kBAAf;AAAA,8BACE;AAAA;AAAA;AAAA;AAAA,cADF,eAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAHF,eAKE;AACE,QAAA,OAAO,EAAEH,KAAK,CAACkB,oBADjB;AAEE,QAAA,QAAQ,EAAElB,KAAK,CAACmB,eAAN,GAAwB,CAAC,CAAzB,GAA6B,CAFzC;AAGE,QAAA,SAAS,EAAC,iBAHZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cALF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AAeC,GAhBH,MAgBS;AACL,wBACE;AAAK,MAAA,SAAS,EAAC,kBAAf;AAAA,8BACE;AAAA;AAAA;AAAA;AAAA,cADF,EAGGlB,UAAU,CAACmB,GAAX,CAAgBC,IAAD,iBACd,QAAC,aAAD;AACE,QAAA,uBAAuB,EAAEX,uBAD3B;AAGE,QAAA,IAAI,EAAEW;AAHR,SAEOA,IAAI,CAACV,EAFZ;AAAA;AAAA;AAAA;AAAA,cADD,CAHH,eAWE;AACE,QAAA,OAAO,EAAEX,KAAK,CAACkB,oBADjB;AAEE,QAAA,QAAQ,EAAElB,KAAK,CAACmB,eAAN,GAAwB,CAAC,CAAzB,GAA6B,CAFzC;AAGE,QAAA,SAAS,EAAC,iBAHZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAXF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AAqBD;AACF,CAjFD;;GAAMpB,e;;KAAAA,e;AAmFN,eAAeA,eAAf","sourcesContent":["import PortfolioItem from \"./PortfolioItem\";\nimport { useState, useEffect } from \"react\";\n\nconst PortfolioHolder = (props) => {\n  const [storageArr, setStorageArr] = useState([]);\n  const [isEmpty, setIsEmpty] = useState(true);\n\n  useEffect(() => {\n    // if (props.newStorage === false) return; // WILL STOP FROM RUNNING\n    setStorageArr(JSON.parse(localStorage.getItem(\"deadCatPortfolio\")));\n  }, [props.newStorage]);\n\n  const handleDeleteStorageItem = (id) => {\n    setStorageArr(storageArr.filter((item) => item.id !== id));\n    localStorage.setItem(\"deadCatPortfolio\", JSON.stringify(storageArr))\n    console.log('derp')\n  };\n\n// // CHECKS TO SEE IF STORAGE IS EMPTY ON LOAD ==============\n// useEffect(() => {\n//   const storage = JSON.parse(localStorage.getItem(\"deadCatPortfolio\"));\n//   console.log(storage)\n//   if (storage === null && storage === []) {\n//     setIsEmpty(true);\n//   } else {\n//     setIsEmpty(false);\n//     setStorageArr(storage)\n//   }\n// }, [])\n\n\n//   useEffect(() => {\n//     console.log('before')\n\n//     const storage = JSON.parse(localStorage.getItem(\"deadCatPortfolio\"));\n//     if (storage === null && storage === []) {\n//       setIsEmpty(true);\n//       console.log(storage)\n//       return\n//     }\n//     console.log('after')\n//     localStorage.setItem(\"deadCatPortfolio\", JSON.stringify(storage));\n//   }, [storageArr])\n\n\nif (isEmpty) {\n  return (\n    <div className=\"portfolio-holder\">\n      <hr></hr>\n\n      <p>Empty</p>\n\n      <button\n        onClick={props.handleClearPortfolio}\n        tabIndex={props.activePortfolio ? -1 : 0}\n        className=\"clear-portfolio\"\n      >\n        Clear Entire Portfolio\n      </button>\n    </div>\n  );\n  } else {\n    return (\n      <div className=\"portfolio-holder\">\n        <hr></hr>\n\n        {storageArr.map((data) => (\n          <PortfolioItem\n            handleDeleteStorageItem={handleDeleteStorageItem}\n            key={data.id}\n            data={data}\n          />\n        ))}\n\n        <button\n          onClick={props.handleClearPortfolio}\n          tabIndex={props.activePortfolio ? -1 : 0}\n          className=\"clear-portfolio\"\n        >\n          Clear Entire Portfolio\n        </button>\n      </div>\n    );\n  }\n};\n\nexport default PortfolioHolder;\n"]},"metadata":{},"sourceType":"module"}