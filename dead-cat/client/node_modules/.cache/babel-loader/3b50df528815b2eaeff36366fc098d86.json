{"ast":null,"code":"var _jsxFileName = \"/Users/austinolijar/Desktop/DeadCatReact/dead-cat/src/components/PortfolioHolder.js\",\n    _s = $RefreshSig$();\n\nimport PortfolioItem from \"./PortfolioItem\";\nimport { useState, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst PortfolioHolder = props => {\n  _s();\n\n  const [storageArr, setStorageArr] = useState([]);\n  const [isEmpty, setIsEmpty] = useState(true); // THIS IS FOR DELETING ================================\n\n  const handleDeleteStorageItem = id => {\n    setStorageArr(storageArr.filter(item => item.id !== id));\n  }; // ADDED NEW ITEM ===================\n\n\n  useEffect(() => {\n    setStorageArr(JSON.parse(localStorage.getItem(\"deadCatPortfolio\")));\n    setIsEmpty(false);\n  }, [props.newStorage]); // CHECKING AND SETTING STORAGE BASED ON STORAGEARR STATE ===================\n\n  useEffect(() => {\n    if (storageArr === null) {\n      localStorage.clear(\"deadCatPortfolio\");\n      setIsEmpty(true);\n      return;\n    } else if (storageArr.length <= 0) {\n      localStorage.clear(\"deadCatPortfolio\");\n      setIsEmpty(true);\n      return;\n    }\n\n    localStorage.setItem(\"deadCatPortfolio\", JSON.stringify(storageArr));\n    setIsEmpty(false);\n  }, [storageArr]); // SETTING PORTFOLIO ON LOAD ===================\n\n  useEffect(() => {\n    const storageCheck = JSON.parse(localStorage.getItem(\"deadCatPortfolio\"));\n\n    if (storageCheck === null) {\n      setIsEmpty(true);\n      return;\n    } else if (storageCheck.length <= 0) {\n      setIsEmpty(true);\n      return;\n    }\n\n    localStorage.setItem(\"deadCatPortfolio\", JSON.stringify(storageCheck));\n    setStorageArr(storageCheck);\n    setIsEmpty(false);\n  }, []);\n\n  if (isEmpty) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"portfolio-holder\",\n      children: [/*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Empty\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: props.handleClearPortfolio,\n        tabIndex: props.activePortfolio ? -1 : 0,\n        className: \"clear-portfolio\",\n        children: \"Clear Entire Portfolio\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 5\n    }, this);\n  } else {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"portfolio-holder\",\n      children: [/*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }, this), storageArr.map(data => /*#__PURE__*/_jsxDEV(PortfolioItem, {\n        handleDeleteStorageItem: handleDeleteStorageItem,\n        data: data\n      }, data.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 11\n      }, this)), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: props.handleClearPortfolio,\n        tabIndex: props.activePortfolio ? -1 : 0,\n        className: \"clear-portfolio\",\n        children: \"Clear Entire Portfolio\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this);\n  }\n};\n\n_s(PortfolioHolder, \"EfjyU0t0kGU5KbQCSayN8WZgZp0=\");\n\n_c = PortfolioHolder;\nexport default PortfolioHolder;\n\nvar _c;\n\n$RefreshReg$(_c, \"PortfolioHolder\");","map":{"version":3,"sources":["/Users/austinolijar/Desktop/DeadCatReact/dead-cat/src/components/PortfolioHolder.js"],"names":["PortfolioItem","useState","useEffect","PortfolioHolder","props","storageArr","setStorageArr","isEmpty","setIsEmpty","handleDeleteStorageItem","id","filter","item","JSON","parse","localStorage","getItem","newStorage","clear","length","setItem","stringify","storageCheck","handleClearPortfolio","activePortfolio","map","data"],"mappings":"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","sourcesContent":["import PortfolioItem from \"./PortfolioItem\";\nimport { useState, useEffect } from \"react\";\n\nconst PortfolioHolder = (props) => {\n  const [storageArr, setStorageArr] = useState([]);\n  const [isEmpty, setIsEmpty] = useState(true);\n// THIS IS FOR DELETING ================================\n  const handleDeleteStorageItem = (id) => {\n    setStorageArr(storageArr.filter((item) => item.id !== id));\n  };\n  // ADDED NEW ITEM ===================\n  useEffect(() => {\n    setStorageArr(JSON.parse(localStorage.getItem(\"deadCatPortfolio\")));\n    setIsEmpty(false)\n  }, [props.newStorage]);\n\n  // CHECKING AND SETTING STORAGE BASED ON STORAGEARR STATE ===================\n  useEffect(() => {\n    if (storageArr === null) {\n      localStorage.clear(\"deadCatPortfolio\")\n      setIsEmpty(true);\n       return\n    } else if (storageArr.length <= 0) {\n      localStorage.clear(\"deadCatPortfolio\")\n      setIsEmpty(true)\n      return\n    }\n    localStorage.setItem(\"deadCatPortfolio\", JSON.stringify(storageArr))\n    setIsEmpty(false)\n  }, [storageArr])\n\n  // SETTING PORTFOLIO ON LOAD ===================\n  useEffect(() => {\n    const storageCheck = JSON.parse(localStorage.getItem(\"deadCatPortfolio\"));   \n    if (storageCheck === null) {\n      setIsEmpty(true);\n       return\n    } else if (storageCheck.length <= 0) {\n      setIsEmpty(true)\n      return\n    }\n\n    localStorage.setItem(\"deadCatPortfolio\", JSON.stringify(storageCheck))\n    setStorageArr(storageCheck)\n    setIsEmpty(false)\n  }, [])\n\nif (isEmpty) {\n  return (\n    <div className=\"portfolio-holder\">\n      <hr></hr>\n\n      <p>Empty</p>\n\n      <button\n        onClick={props.handleClearPortfolio}\n        tabIndex={props.activePortfolio ? -1 : 0}\n        className=\"clear-portfolio\"\n      >\n        Clear Entire Portfolio\n      </button>\n    </div>\n  );\n  } else {\n    return (\n      <div className=\"portfolio-holder\">\n        <hr></hr>\n\n        {storageArr.map((data) => (\n          <PortfolioItem\n            handleDeleteStorageItem={handleDeleteStorageItem}\n            key={data.id}\n            data={data}\n          />\n        ))}\n\n        <button\n          onClick={props.handleClearPortfolio}\n          tabIndex={props.activePortfolio ? -1 : 0}\n          className=\"clear-portfolio\"\n        >\n          Clear Entire Portfolio\n        </button>\n      </div>\n    );\n  }\n};\n\nexport default PortfolioHolder;\n"]},"metadata":{},"sourceType":"module"}