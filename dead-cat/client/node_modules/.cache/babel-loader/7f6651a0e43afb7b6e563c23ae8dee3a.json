{"ast":null,"code":"// EMA FUNCTION ------------------------------------------------------------------------------------------------------------------------------------------\nexport function emaFunction(chartArr, dataPull, newestPull, num, macdCallBack) {\n  let emaEight = 14;\n  let emaTwelve = 22;\n  let emaTwenty = 38;\n  let emaTwentySix = 50;\n  let emaFifty = 98;\n  let emaTwoHun = 398;\n  let prevDayEmaSub = 0;\n  let arrEma = [];\n  let macdTwelve = []; // ARRs USED FOR MACD TWELVE HISTORY\n\n  let macdTwentySix = []; // ARRs USED FOR MACD TWENTY SIX HISTORY\n\n  try {\n    const newPrice = newestPull[0].price; // EMA EIGHT ----------------------------------------------------------------------\n\n    if (dataPull.historical.length <= 16) {\n      chartArr[num].emaEight = \"No Data\";\n    } else {\n      while (emaEight >= 15) {\n        prevDayEmaSub += dataPull.historical[emaEight].close;\n        emaEight--;\n      } //CALCULATE EMA HERE TO GET PREVIOUS DAY EMA FOR ACCURATE CURRENT EMA\n\n\n      const subEMA = prevDayEmaSub / 8; //THIS GETS AN EMA USING SMA AS PREV EMA ----------------------------\n\n      const finalSubEma = 2 / 9 * (dataPull.historical[emaEight].close - subEMA) + subEMA;\n      arrEma.unshift(finalSubEma);\n      emaEight--;\n\n      while (emaEight >= 0) {\n        let derp = 2 / 9 * (dataPull.historical[emaEight].close - arrEma[0]) + arrEma[0];\n        arrEma.unshift(derp);\n        arrEma.pop();\n        emaEight--;\n      }\n\n      const finalEma = 2 / 9 * (newPrice - arrEma[0]) + arrEma[0];\n      arrEma.unshift(finalEma);\n      arrEma.pop();\n      chartArr[num].emaEight = arrEma[0].toFixed(2);\n      arrEma.pop();\n      prevDayEmaSub = 0;\n    } // EMA TWELVE ----------------------------------------------------------------------\n\n\n    if (dataPull.historical.length <= 24) {\n      chartArr[num].emaTwelve = \"No Data\";\n    } else {\n      while (emaTwelve >= 11) {\n        prevDayEmaSub += dataPull.historical[emaTwelve].close;\n        emaTwelve--;\n      } //CALCULATE EMA HERE TO GET PREVIOUS DAY EMA FOR ACCURATE CURRENT EMA\n\n\n      const subEMA = prevDayEmaSub / 12; //THIS GETS AN EMA USING SMA AS PREV EMA ----------------------------\n\n      const finalSubEma = 2 / 13 * (dataPull.historical[emaTwelve].close - subEMA) + subEMA;\n      arrEma.unshift(finalSubEma);\n      emaTwelve--;\n\n      while (emaTwelve >= 0) {\n        let derp = 2 / 13 * (dataPull.historical[emaTwelve].close - arrEma[0]) + arrEma[0];\n        arrEma.unshift(derp);\n        arrEma.pop();\n\n        if (emaTwelve < 8 && emaTwelve >= 0) {\n          //THIS IF STATEMENT IS TO STORE VARIABLES FOR LATER MACD SIGNAL LINE\n          macdTwelve.unshift(derp);\n        }\n\n        emaTwelve--;\n      }\n\n      const finalEma = 2 / 13 * (newPrice - arrEma[0]) + arrEma[0];\n      arrEma.unshift(finalEma);\n      arrEma.pop();\n      macdTwelve.unshift(finalEma);\n      chartArr[num].emaTwelve = arrEma[0].toFixed(2);\n      arrEma.pop();\n      prevDayEmaSub = 0;\n    } // EMA TWENTY ----------------------------------------------------------------------\n\n\n    if (dataPull.historical.length <= 40) {\n      chartArr[num].emaTwenty = \"No Data\";\n    } else {\n      while (emaTwenty >= 19) {\n        prevDayEmaSub += dataPull.historical[emaTwenty].close;\n        emaTwenty--;\n      } //CALCULATE EMA HERE TO GET PREVIOUS DAY EMA FOR ACCURATE CURRENT EMA\n\n\n      const subEMA = prevDayEmaSub / 20; //THIS GETS AN EMA USING SMA AS PREV EMA ----------------------------\n\n      const finalSubEma = 2 / 21 * (dataPull.historical[emaTwenty].close - subEMA) + subEMA;\n      arrEma.unshift(finalSubEma);\n      emaTwenty--;\n\n      while (emaTwenty >= 0) {\n        let derp = 2 / 21 * (dataPull.historical[emaTwenty].close - arrEma[0]) + arrEma[0];\n        arrEma.unshift(derp);\n        arrEma.pop();\n        emaTwenty--;\n      }\n\n      const finalEma = 2 / 21 * (newPrice - arrEma[0]) + arrEma[0];\n      arrEma.unshift(finalEma);\n      arrEma.pop();\n      chartArr[num].emaTwenty = arrEma[0].toFixed(2);\n      arrEma.pop();\n      prevDayEmaSub = 0;\n    } // EMA TWENTY SIX ----------------------------------------------------------------------\n\n\n    if (dataPull.historical.length <= 51) {\n      chartArr[num].emaTwentySix = \"No Data\";\n    } else {\n      while (emaTwentySix >= 25) {\n        prevDayEmaSub += dataPull.historical[emaTwentySix].close;\n        emaTwentySix--;\n      } //CALCULATE EMA HERE TO GET PREVIOUS DAY EMA FOR ACCURATE CURRENT EMA\n\n\n      const subEMA = prevDayEmaSub / 26; //THIS GETS AN EMA USING SMA AS PREV EMA ----------------------------\n\n      const finalSubEma = 2 / 27 * (dataPull.historical[emaTwentySix].close - subEMA) + subEMA;\n      arrEma.unshift(finalSubEma);\n      emaTwentySix--;\n\n      while (emaTwentySix >= 0) {\n        let derp = 2 / 27 * (dataPull.historical[emaTwentySix].close - arrEma[0]) + arrEma[0];\n        arrEma.unshift(derp);\n        arrEma.pop();\n\n        if (emaTwentySix < 8 && emaTwentySix >= 0) {\n          //THIS IF STATEMENT IS TO STORE VARIABLES FOR LATER MACD SIGNAL LINE\n          macdTwentySix.unshift(derp);\n        }\n\n        emaTwentySix--;\n      }\n\n      const finalEma = 2 / 27 * (newPrice - arrEma[0]) + arrEma[0];\n      arrEma.unshift(finalEma);\n      arrEma.pop();\n      macdTwentySix.unshift(finalEma);\n      chartArr[num].emaTwentySix = arrEma[0].toFixed(2);\n      arrEma.pop();\n      prevDayEmaSub = 0;\n    } // EMA FIFTY -----------------------------------------------------------------------------\n\n\n    if (dataPull.historical.length <= 100) {\n      chartArr[num].emaFifty = \"No Data\";\n    } else {\n      while (emaFifty >= 49) {\n        prevDayEmaSub += dataPull.historical[emaFifty].close;\n        emaFifty--;\n      } //CALCULATE EMA HERE TO GET PREVIOUS DAY EMA FOR ACCURATE CURRENT EMA\n\n\n      const subEMA = prevDayEmaSub / 50; //THIS GETS AN EMA USING SMA AS PREV EMA ----------------------------\n\n      const finalSubEma = 2 / 51 * (dataPull.historical[emaFifty].close - subEMA) + subEMA;\n      arrEma.unshift(finalSubEma);\n      emaFifty--;\n\n      while (emaFifty >= 0) {\n        let derp = 2 / 51 * (dataPull.historical[emaFifty].close - arrEma[0]) + arrEma[0];\n        arrEma.unshift(derp);\n        arrEma.pop();\n        emaFifty--;\n      }\n\n      const finalEma = 2 / 51 * (newPrice - arrEma[0]) + arrEma[0];\n      arrEma.unshift(finalEma);\n      arrEma.pop();\n      chartArr[num].emaFifty = arrEma[0].toFixed(2);\n      arrEma.pop();\n      prevDayEmaSub = 0;\n    } // EMA TWO HUNDRED -----------------------------------------------------------------------------\n\n\n    if (dataPull.historical.length <= 400) {\n      chartArr[num].emaTwoHun = \"No Data\";\n    } else {\n      while (emaTwoHun >= 199) {\n        prevDayEmaSub += dataPull.historical[emaTwoHun].close;\n        emaTwoHun--;\n      } //CALCULATE EMA HERE TO GET PREVIOUS DAY EMA FOR ACCURATE CURRENT EMA\n\n\n      const subEMA = prevDayEmaSub / 200; //THIS GETS AN EMA USING SMA AS PREV EMA ----------------------------\n\n      const finalSubEma = 2 / 201 * (dataPull.historical[emaTwoHun].close - subEMA) + subEMA;\n      arrEma.unshift(finalSubEma);\n      emaTwoHun--;\n\n      while (emaTwoHun >= 0) {\n        let derp = 2 / 201 * (dataPull.historical[emaTwoHun].close - arrEma[0]) + arrEma[0];\n        arrEma.unshift(derp);\n        arrEma.pop();\n        emaTwoHun--;\n      }\n\n      const finalEma = 2 / 201 * (newPrice - arrEma[0]) + arrEma[0];\n      arrEma.unshift(finalEma);\n      arrEma.pop();\n      chartArr[num].emaTwoHun = arrEma[0].toFixed(2);\n      arrEma.pop();\n      prevDayEmaSub = 0;\n    }\n  } catch (e) {} // MACD CALLBACK -----------------------------------------------------------------------------------------------------------------------------------------\n\n\n  macdCallBack(chartArr, num, macdTwelve, macdTwentySix);\n}","map":{"version":3,"sources":["/Users/austinolijar/Desktop/MERN-DeadCat/dead-cat/src/JS/technical-Indicators.js/ema.js"],"names":["emaFunction","chartArr","dataPull","newestPull","num","macdCallBack","emaEight","emaTwelve","emaTwenty","emaTwentySix","emaFifty","emaTwoHun","prevDayEmaSub","arrEma","macdTwelve","macdTwentySix","newPrice","price","historical","length","close","subEMA","finalSubEma","unshift","derp","pop","finalEma","toFixed","e"],"mappings":"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","sourcesContent":["  // EMA FUNCTION ------------------------------------------------------------------------------------------------------------------------------------------\n  export function emaFunction(chartArr, dataPull, newestPull, num, macdCallBack) {\n    let emaEight = 14;\n    let emaTwelve = 22;\n    let emaTwenty = 38;\n    let emaTwentySix = 50;\n    let emaFifty = 98;\n    let emaTwoHun = 398;\n    let prevDayEmaSub = 0;\n    let arrEma = [];\n  \n    let macdTwelve = []; // ARRs USED FOR MACD TWELVE HISTORY\n    let macdTwentySix = []; // ARRs USED FOR MACD TWENTY SIX HISTORY\n  \n    try {\n      const newPrice = newestPull[0].price;\n  \n      // EMA EIGHT ----------------------------------------------------------------------\n      if (dataPull.historical.length <= 16) {\n        chartArr[num].emaEight = \"No Data\";\n      } else {\n        while (emaEight >= 15) {\n          prevDayEmaSub += dataPull.historical[emaEight].close;\n          emaEight--;\n        } //CALCULATE EMA HERE TO GET PREVIOUS DAY EMA FOR ACCURATE CURRENT EMA\n        const subEMA = prevDayEmaSub / 8;\n        //THIS GETS AN EMA USING SMA AS PREV EMA ----------------------------\n        const finalSubEma =\n          (2 / 9) * (dataPull.historical[emaEight].close - subEMA) + subEMA;\n        arrEma.unshift(finalSubEma);\n        emaEight--;\n        while (emaEight >= 0) {\n          let derp =\n            (2 / 9) * (dataPull.historical[emaEight].close - arrEma[0]) +\n            arrEma[0];\n          arrEma.unshift(derp);\n          arrEma.pop();\n          emaEight--;\n        }\n  \n        const finalEma = (2 / 9) * (newPrice - arrEma[0]) + arrEma[0];\n        arrEma.unshift(finalEma);\n        arrEma.pop();\n  \n        chartArr[num].emaEight = arrEma[0].toFixed(2);\n        arrEma.pop();\n        prevDayEmaSub = 0;\n      }\n      // EMA TWELVE ----------------------------------------------------------------------\n      if (dataPull.historical.length <= 24) {\n        chartArr[num].emaTwelve = \"No Data\";\n      } else {\n        while (emaTwelve >= 11) {\n          prevDayEmaSub += dataPull.historical[emaTwelve].close;\n          emaTwelve--;\n        } //CALCULATE EMA HERE TO GET PREVIOUS DAY EMA FOR ACCURATE CURRENT EMA\n  \n        const subEMA = prevDayEmaSub / 12;\n        //THIS GETS AN EMA USING SMA AS PREV EMA ----------------------------\n        const finalSubEma =\n          (2 / 13) * (dataPull.historical[emaTwelve].close - subEMA) + subEMA;\n        arrEma.unshift(finalSubEma);\n        emaTwelve--;\n  \n        while (emaTwelve >= 0) {\n          let derp =\n            (2 / 13) * (dataPull.historical[emaTwelve].close - arrEma[0]) +\n            arrEma[0];\n          arrEma.unshift(derp);\n          arrEma.pop();\n          if (emaTwelve < 8 && emaTwelve >= 0) {\n            //THIS IF STATEMENT IS TO STORE VARIABLES FOR LATER MACD SIGNAL LINE\n            macdTwelve.unshift(derp);\n          }\n          emaTwelve--;\n        }\n  \n        const finalEma = (2 / 13) * (newPrice - arrEma[0]) + arrEma[0];\n        arrEma.unshift(finalEma);\n        arrEma.pop();\n        macdTwelve.unshift(finalEma);\n  \n        chartArr[num].emaTwelve = arrEma[0].toFixed(2);\n        arrEma.pop();\n        prevDayEmaSub = 0;\n      }\n  \n      // EMA TWENTY ----------------------------------------------------------------------\n      if (dataPull.historical.length <= 40) {\n        chartArr[num].emaTwenty = \"No Data\";\n      } else {\n        while (emaTwenty >= 19) {\n          prevDayEmaSub += dataPull.historical[emaTwenty].close;\n          emaTwenty--;\n        } //CALCULATE EMA HERE TO GET PREVIOUS DAY EMA FOR ACCURATE CURRENT EMA\n        const subEMA = prevDayEmaSub / 20;\n        //THIS GETS AN EMA USING SMA AS PREV EMA ----------------------------\n        const finalSubEma =\n          (2 / 21) * (dataPull.historical[emaTwenty].close - subEMA) + subEMA;\n        arrEma.unshift(finalSubEma);\n        emaTwenty--;\n        while (emaTwenty >= 0) {\n          let derp =\n            (2 / 21) * (dataPull.historical[emaTwenty].close - arrEma[0]) +\n            arrEma[0];\n          arrEma.unshift(derp);\n          arrEma.pop();\n          emaTwenty--;\n        }\n  \n        const finalEma = (2 / 21) * (newPrice - arrEma[0]) + arrEma[0];\n        arrEma.unshift(finalEma);\n        arrEma.pop();\n  \n        chartArr[num].emaTwenty = arrEma[0].toFixed(2);\n        arrEma.pop();\n        prevDayEmaSub = 0;\n      }\n  \n      // EMA TWENTY SIX ----------------------------------------------------------------------\n  \n      if (dataPull.historical.length <= 51) {\n        chartArr[num].emaTwentySix = \"No Data\";\n      } else {\n        while (emaTwentySix >= 25) {\n          prevDayEmaSub += dataPull.historical[emaTwentySix].close;\n          emaTwentySix--;\n        } //CALCULATE EMA HERE TO GET PREVIOUS DAY EMA FOR ACCURATE CURRENT EMA\n        const subEMA = prevDayEmaSub / 26;\n        //THIS GETS AN EMA USING SMA AS PREV EMA ----------------------------\n        const finalSubEma =\n          (2 / 27) * (dataPull.historical[emaTwentySix].close - subEMA) + subEMA;\n        arrEma.unshift(finalSubEma);\n        emaTwentySix--;\n        while (emaTwentySix >= 0) {\n          let derp =\n            (2 / 27) * (dataPull.historical[emaTwentySix].close - arrEma[0]) +\n            arrEma[0];\n          arrEma.unshift(derp);\n          arrEma.pop();\n          if (emaTwentySix < 8 && emaTwentySix >= 0) {\n            //THIS IF STATEMENT IS TO STORE VARIABLES FOR LATER MACD SIGNAL LINE\n            macdTwentySix.unshift(derp);\n          }\n          emaTwentySix--;\n        }\n  \n        const finalEma = (2 / 27) * (newPrice - arrEma[0]) + arrEma[0];\n        arrEma.unshift(finalEma);\n        arrEma.pop();\n        macdTwentySix.unshift(finalEma);\n  \n        chartArr[num].emaTwentySix = arrEma[0].toFixed(2);\n        arrEma.pop();\n        prevDayEmaSub = 0;\n      }\n  \n      // EMA FIFTY -----------------------------------------------------------------------------\n  \n      if (dataPull.historical.length <= 100) {\n        chartArr[num].emaFifty = \"No Data\";\n      } else {\n        while (emaFifty >= 49) {\n          prevDayEmaSub += dataPull.historical[emaFifty].close;\n          emaFifty--;\n        } //CALCULATE EMA HERE TO GET PREVIOUS DAY EMA FOR ACCURATE CURRENT EMA\n        const subEMA = prevDayEmaSub / 50;\n        //THIS GETS AN EMA USING SMA AS PREV EMA ----------------------------\n        const finalSubEma =\n          (2 / 51) * (dataPull.historical[emaFifty].close - subEMA) + subEMA;\n        arrEma.unshift(finalSubEma);\n        emaFifty--;\n        while (emaFifty >= 0) {\n          let derp =\n            (2 / 51) * (dataPull.historical[emaFifty].close - arrEma[0]) +\n            arrEma[0];\n          arrEma.unshift(derp);\n          arrEma.pop();\n          emaFifty--;\n        }\n  \n        const finalEma = (2 / 51) * (newPrice - arrEma[0]) + arrEma[0];\n        arrEma.unshift(finalEma);\n        arrEma.pop();\n  \n        chartArr[num].emaFifty = arrEma[0].toFixed(2);\n        arrEma.pop();\n        prevDayEmaSub = 0;\n      }\n  \n      // EMA TWO HUNDRED -----------------------------------------------------------------------------\n  \n      if (dataPull.historical.length <= 400) {\n        chartArr[num].emaTwoHun = \"No Data\";\n      } else {\n        while (emaTwoHun >= 199) {\n          prevDayEmaSub += dataPull.historical[emaTwoHun].close;\n          emaTwoHun--;\n        } //CALCULATE EMA HERE TO GET PREVIOUS DAY EMA FOR ACCURATE CURRENT EMA\n        const subEMA = prevDayEmaSub / 200;\n        //THIS GETS AN EMA USING SMA AS PREV EMA ----------------------------\n        const finalSubEma =\n          (2 / 201) * (dataPull.historical[emaTwoHun].close - subEMA) + subEMA;\n        arrEma.unshift(finalSubEma);\n        emaTwoHun--;\n        while (emaTwoHun >= 0) {\n          let derp =\n            (2 / 201) * (dataPull.historical[emaTwoHun].close - arrEma[0]) +\n            arrEma[0];\n          arrEma.unshift(derp);\n          arrEma.pop();\n          emaTwoHun--;\n        }\n  \n        const finalEma = (2 / 201) * (newPrice - arrEma[0]) + arrEma[0];\n        arrEma.unshift(finalEma);\n        arrEma.pop();\n  \n        chartArr[num].emaTwoHun = arrEma[0].toFixed(2);\n        arrEma.pop();\n        prevDayEmaSub = 0;\n      }\n    } catch (e) {}\n  \n    // MACD CALLBACK -----------------------------------------------------------------------------------------------------------------------------------------\n    macdCallBack(chartArr, num, macdTwelve, macdTwentySix);\n  }"]},"metadata":{},"sourceType":"module"}