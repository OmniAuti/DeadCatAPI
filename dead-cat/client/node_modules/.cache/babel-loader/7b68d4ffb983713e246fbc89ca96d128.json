{"ast":null,"code":"export const technicalPortfolioAnalysis = async arr => {\n  // CHECKING ON PORTFOLIO TO MAKE SURE IT HAS SOMETHING ----------------------------------\n  if (arr === null) {\n    alert('Sorry, your portfolio seems to be malfunctioning.');\n    return;\n  } else if (arr.length <= 0) {\n    alert('Sorry, your portfolio seems to be malfunctioning.');\n    return;\n  }\n\n  console.log(arr); /// DATE REFERENCE FOR MARKET DATA PULLS ----------------------------------------\n\n  const today = new Date();\n  const year = today.getFullYear();\n  let date = today.getUTCDate();\n  let month = today.getUTCMonth() + 1;\n  let minutes = today.getUTCMinutes();\n  let hour = today.getUTCHours(); // GET TIME FOR CLOSING AND OPENING MARKET -----------------------------------\n  //CALC FOR UTC TO EST\n\n  hour = hour - 4; // CALC FOR EARLY MORNING HOURS UTC\n\n  if (hour < 0) {\n    hour = hour + 24;\n  } // GET AND ADJUST MINUTES TO ADD 0 BELOW 10\n\n\n  if (minutes < 10) {\n    minutes = `0${minutes}`;\n  }\n\n  const time = `${hour}${minutes}`;\n  const timeNum = parseInt(time); // GET DAY FOR CLOSING AND OPENING MARKET -------------------------------------------\n\n  const marketDay = today.getDay(); // CHECK FOR MARKET OPEN - ADJUST DATE SO VWAP STILL PULLS DATA FROM LAST DAY\n\n  if (marketDay == 0) {\n    date = date - 2; // NEED TO CHECK FOR NEW MONTH CHANGE OVER FROM UTC TIME TO ADJUST FOR EST\n\n    if (date <= 0) {\n      if (month == 1 || month == 2 || month == 4 || month == 6 || month == 8 || month == 9 || month == 11) {\n        // MONTHS AFTER 31 DAYS\n        month = month - 1;\n\n        if (month < 10) {\n          month = `0${month}`;\n        }\n\n        date = 30;\n      } else if (month == 5 || month == 7 || month == 10 || month == 12) {\n        // MONTHS AFTER 30 DAYS\n        month = month - 1;\n\n        if (month < 10) {\n          month = `0${month}`;\n        }\n\n        date = 29;\n      } else if (month == 3 && year % 4 == 0) {\n        // MONTH AFTER 29 DAYS LEAP YEAR\n        month = month - 1;\n\n        if (month < 10) {\n          month = `0${month}`;\n        }\n\n        date = 28;\n      } // MONTH AFTER 28\n      else {\n        month = month - 1;\n\n        if (month < 10) {\n          month = `0${month}`;\n        }\n\n        date = 27;\n      }\n    }\n  } else if (marketDay == 6) {\n    date = date - 1; // NEED TO CHECK FOR NEW MONTH CHANGE OVER FROM UTC TIME TO ADJUST FOR EST\n\n    if (date <= 0) {\n      if (month == 1 || month == 2 || month == 4 || month == 6 || month == 8 || month == 9 || month == 11) {\n        // MONTHS AFTER 31 DAYS\n        month = month - 1;\n\n        if (month < 10) {\n          month = `0${month}`;\n        }\n\n        date = 31;\n      } else if (month == 5 || month == 7 || month == 10 || month == 12) {\n        // MONTHS AFTER 30 DAYS\n        month = month - 1;\n\n        if (month < 10) {\n          month = `0${month}`;\n        }\n\n        date = 30;\n      } else if (month == 3 && year % 4 == 0) {\n        // MONTH AFTER 29 DAYS LEAP YEAR\n        month = month - 1;\n\n        if (month < 10) {\n          month = `0${month}`;\n        }\n\n        date = 29;\n      } // MONTH AFTER 28\n      else {\n        month = month - 1;\n\n        if (month < 10) {\n          month = `0${month}`;\n        }\n\n        date = 28;\n      }\n    }\n  } // THIS IS TO CHECK FOR MARKET DAY OPEN DURING WEEKENDS WHEN MARKET IS CLOSED\n\n\n  if (marketDay == 1 && timeNum < 930) {\n    date = date - 3; // NEED TO CHECK FOR NEW MONTH CHANGE OVER FROM UTC TIME TO ADJUST FOR EST\n\n    if (date <= 0) {\n      if (month == 1 || month == 2 || month == 4 || month == 6 || month == 8 || month == 9 || month == 11) {\n        // MONTHS AFTER 31 DAYS\n        month = month - 1;\n\n        if (month < 10) {\n          month = `0${month}`;\n        }\n\n        date = 29;\n      } else if (month == 5 || month == 7 || month == 10 || month == 12) {\n        // MONTHS AFTER 30 DAYS\n        month = month - 1;\n\n        if (month < 10) {\n          month = `0${month}`;\n        }\n\n        date = 28;\n      } else if (month == 3 && year % 4 == 0) {\n        // MONTH AFTER 29 DAYS LEAP YEAR\n        month = month - 1;\n\n        if (month < 10) {\n          month = `0${month}`;\n        }\n\n        date = 27;\n      } // MONTH AFTER 28\n      else {\n        month = month - 1;\n\n        if (month < 10) {\n          month = `0${month}`;\n        }\n\n        date = 26;\n      }\n    }\n  } else if (marketDay >= 2 && marketDay < 6 && timeNum < 930) {\n    // ADJUSTS DURING WEEK BEFORE OPEN TO GET DAY BEFORE INDICATORS\n    date = date - 1; // NEED TO CHECK FOR NEW MONTH CHANGE OVER FROM UTC TIME TO ADJUST FOR EST\n\n    if (date <= 0) {\n      if (month == 1 || month == 2 || month == 4 || month == 6 || month == 8 || month == 9 || month == 11) {\n        // MONTHS AFTER 31 DAYS\n        month = month - 1;\n\n        if (month == 0) {\n          month = 1;\n        }\n\n        date = 31;\n      } else if (month == 5 || month == 7 || month == 10 || month == 12) {\n        // MONTHS AFTER 30 DAYS\n        month = month - 1;\n        date = 30;\n      } else if (month == 3 && year % 4 == 0) {\n        // MONTH AFTER 29 DAYS LEAP YEAR\n        month = month - 1;\n        date = 29;\n      } // MONTH AFTER 28\n      else {\n        month = month - 1;\n        date = 28;\n      }\n    }\n  } // THIS IS TO CORRECT MISSING 0 ON SINGLE DIGITS OF MONTHS\n\n\n  if (date < 10) {\n    date = `0${date}`;\n  }\n\n  if (month < 10) {\n    month = `0${month}`;\n  } // DATE CHECK VARIBLE FOR DATA PERIOD PULLS AND TO SLICE FROM\n\n\n  let todayDate = `${year}-${month}-${date}`; //CHECK FOR HOLIDAYS OR CLOSED MARKET HOLIDAYS\n\n  if (todayDate === \"2021-11-25\") {\n    todayDate = \"2021-11-24\";\n  } else if (todayDate === \"2021-12-24\") {\n    todayDate = \"2021-12-23\";\n  } else if (todayDate === \"2022-01-17\") {\n    todayDate = \"2022-01-14\";\n  } else if (todayDate === \"2022-02-21\") {\n    todayDate = \"2022-02-18\";\n  } else if (todayDate === \"2022-04-15\") {\n    todayDate = \"2022-04-14\";\n  } else if (todayDate === \"2022-05-30\") {\n    todayDate = \"2022-05-27\";\n  } else if (todayDate === \"2022-06-20\") {\n    todayDate = \"2022-06-17\";\n  } else if (todayDate === \"2022-07-04\") {\n    todayDate = \"2022-07-01\";\n  } else if (todayDate === \"2022-09-05\") {\n    todayDate = \"2022-09-02\";\n  } else if (todayDate === \"2022-11-24\") {\n    todayDate = \"2022-11-23\";\n  } else if (todayDate === \"2022-12-26\") {\n    todayDate = \"2022-12-23\";\n  } // THIS IS AN ADJUSTMENT OF DATE FOR MARKET CLOSES EST VS UTC TIME\n\n\n  let newDateString = todayDate;\n\n  if (hour + 4 >= 24) {\n    const dateNumSlice = parseInt(date);\n    const dateSliceStart = todayDate.slice(0, 8);\n    let newDateNum = dateNumSlice - 1;\n\n    if (newDateNum < 10) {\n      newDateNum = `0${newDateNum}`;\n    }\n\n    newDateString = `${dateSliceStart}${newDateNum}`;\n    newDateString = newDateString.toString(); // NEED TO CHECK FOR NEW MONTH CHANGE OVER FROM UTC TIME TO ADJUST FOR EST\n\n    if (date == 1 && hour + 4 >= 24) {\n      if (month == 1 || month == 2 || month == 4 || month == 6 || month == 8 || month == 9 || month == 11) {\n        // MONTHS AFTER 31 DAYS\n        month = month - 1;\n\n        if (month < 10) {\n          month = `0${month}`;\n        }\n\n        date = 31;\n        newDateString = `${year}-${month}-${date}`;\n      } else if (month == 5 || month == 7 || month == 10 || month == 12) {\n        // MONTHS AFTER 30 DAYS\n        month = month - 1;\n\n        if (month < 10) {\n          month = `0${month}`;\n        }\n\n        date = 30;\n        newDateString = `${year}-${month}-${date}`;\n      } else if (month == 3 && year % 4 == 0) {\n        // MONTH AFTER 29 DAYS LEAP YEAR\n        month = month - 1;\n\n        if (month < 10) {\n          month = `0${month}`;\n        }\n\n        date = 29;\n        newDateString = `${year}-${month}-${date}`;\n      } // MONTH AFTER 28\n      else {\n        month = month - 1;\n\n        if (month < 10) {\n          month = `0${month}`;\n        }\n\n        date = 28;\n        newDateString = `${year}-${month}-${date}`;\n      }\n    }\n  } // ---------------------- END OF DATE -------------------------------------\n  // ---------------------- FILTERS TRADABLE SYMBOLS THAT HAVE DROPPED BELOW THE THRESHOLD -------------------------------------\n\n\n  async function filterTradableSymbols(portArr) {\n    try {\n      // ------ FETCH NYSE\n      const res = await fetch(\"https://financialmodelingprep.com/api/v3/quotes/nyse?apikey=4d4593bc9e6bc106ee9d1cbd6400b218\");\n      const dataNyse = await res.json(); // ------ FETCH NASDAQ\n\n      const resTwo = await fetch(\"https://financialmodelingprep.com/api/v3/quotes/nasdaq?apikey=4d4593bc9e6bc106ee9d1cbd6400b218\");\n      const dataNas = await resTwo.json(); // FILTER THESE STOCKS DOWN TO JUST WHAT IS IN PORTFOLIO\n\n      const combinedStock = await dataNyse.concat(dataNas);\n      console.log(combinedStock, 'combined');\n      console.log(arr);\n      const returnedData = await combinedStock.filter(stock => arr[stock]);\n      console.log(returnedData, 'returned');\n      return returnedData; //--------- CATCH\n    } catch (e) {}\n  }\n\n  filterTradableSymbols(arr); //   // SMA FUNCTION ------------------------------------------------------------------------------------------------------------------------------------------\n  //   function smaFunction(searchedTicker, dataPull, newestPull) {\n  //     let culSMA = 0;\n  //     // ------- SMA INDEX IS - 2 FROM TOTAL BECAUSE OF 0 INDEX = 1 AND ADDING RECENT PRICE DATA --------------------\n  //     let fiveTeenSMA = 13;\n  //     let twentySMA = 18;\n  //     let thirtySMA = 28;\n  //     let fiftySMA = 48;\n  //     let hunSMA = 98;\n  //     let twoHunSMA = 198;\n  //     const todayPricePull = newestPull[0].price;\n  //     try {\n  //       // ------------- 15 DAY SMA -------------------------------\n  //       if (dataPull.historical.length <= 13) {\n  //         searchedTicker.smaFiveTeen = \"No Data\";\n  //       } else {\n  //         while (fiveTeenSMA >= 0) {\n  //           culSMA += dataPull.historical[fiveTeenSMA].close;\n  //           fiveTeenSMA--;\n  //         }\n  //         let smaFiveResult = (culSMA + todayPricePull) / 15;\n  //         searchedTicker.smaFiveTeen = smaFiveResult.toFixed(2);\n  //         culSMA = 0;\n  //       }\n  //       // ------------- 20 DAY SMA -------------------------------\n  //       if (dataPull.historical.length <= 19) {\n  //         searchedTicker.smaTwenty = \"No Data\";\n  //       } else {\n  //         while (twentySMA >= 0) {\n  //           culSMA += dataPull.historical[twentySMA].close;\n  //           twentySMA--;\n  //         }\n  //         let smaTwentyResult = (culSMA + todayPricePull) / 20;\n  //         searchedTicker.smaTwenty = smaTwentyResult.toFixed(2);\n  //         culSMA = 0;\n  //       }\n  //       // ------------- 30 DAY SMA -------------------------------\n  //       if (dataPull.historical.length <= 29) {\n  //         searchedTicker.smaThirty = \"No Data\";\n  //       } else {\n  //         while (thirtySMA >= 0) {\n  //           culSMA += dataPull.historical[thirtySMA].close;\n  //           thirtySMA--;\n  //         }\n  //         let smaThirtyResult = (culSMA + todayPricePull) / 30;\n  //         searchedTicker.smaThirty = smaThirtyResult.toFixed(2);\n  //         culSMA = 0;\n  //       }\n  //       // ------------- 50 DAY SMA -------------------------------\n  //       if (dataPull.historical.length <= 49) {\n  //         searchedTicker.smaFifty = \"No Data\";\n  //       } else {\n  //         while (fiftySMA >= 0) {\n  //           culSMA += dataPull.historical[fiftySMA].close;\n  //           fiftySMA--;\n  //         }\n  //         let smaFiftyResult = (culSMA + todayPricePull) / 50;\n  //         searchedTicker.smaFifty = smaFiftyResult.toFixed(2);\n  //         culSMA = 0;\n  //       }\n  //       // ------------- 100 DAY SMA -------------------------------\n  //       if (dataPull.historical.length <= 99) {\n  //         searchedTicker.smaOneHun = \"No Data\";\n  //       } else {\n  //         while (hunSMA >= 0) {\n  //           culSMA += dataPull.historical[hunSMA].close;\n  //           hunSMA--;\n  //         }\n  //         let smaOneHunResult = (culSMA + todayPricePull) / 100;\n  //         searchedTicker.smaOneHun = smaOneHunResult.toFixed(2);\n  //         culSMA = 0;\n  //       }\n  //       // ------------- 200 DAY SMA -------------------------------\n  //       if (dataPull.historical.length <= 199) {\n  //         searchedTicker.smaTwoHun = \"No Data\";\n  //       } else {\n  //         while (twoHunSMA >= 0) {\n  //           culSMA += dataPull.historical[twoHunSMA].close;\n  //           twoHunSMA--;\n  //         }\n  //         let smaTwoHunResult = (culSMA + todayPricePull) / 200;\n  //         searchedTicker.smaTwoHun = smaTwoHunResult.toFixed(2);\n  //         culSMA = 0;\n  //       }\n  //     } catch (e) {}\n  //   }\n  //   // WMA FUNCTION ------------------------------------------------------------------------------------------------------------------------------------------\n  //   function wmaFunction(searchedTicker, dataPull, newestPull) {\n  //     // WMA FiveTeen --------------------------------------------------------------------\n  //     let wmaCul = newestPull[0].price * 15;\n  //     let weight = 14;\n  //     let wmaInterval = 0;\n  //     let iWma = 15;\n  //     try {\n  //       if (dataPull.historical.length < 14) {\n  //         searchedTicker.wmaFiveTeen = \"No Data\";\n  //       } else {\n  //         for (let i = 0; i <= 13; i++) {\n  //           wmaInterval = dataPull.historical[i].close * weight;\n  //           wmaCul += wmaInterval;\n  //           iWma += weight;\n  //           weight--;\n  //         }\n  //         const wmaFiveTeen = wmaCul / iWma;\n  //         searchedTicker.wmaFiveTeen = wmaFiveTeen.toFixed(2);\n  //       }\n  //       // WMA Twenty --------------------------------------------------------------------\n  //       wmaCul = newestPull[0].price * 20;\n  //       weight = 19;\n  //       wmaInterval = 0;\n  //       iWma = 20;\n  //       if (dataPull.historical.length < 19) {\n  //         searchedTicker.wmaTwenty = \"No Data\";\n  //       } else {\n  //         for (let i = 0; i <= 18; i++) {\n  //           wmaInterval = dataPull.historical[i].close * weight;\n  //           wmaCul += wmaInterval;\n  //           iWma += weight;\n  //           weight--;\n  //         }\n  //         const wmaTwenty = wmaCul / iWma;\n  //         searchedTicker.wmaTwenty = wmaTwenty.toFixed(2);\n  //       }\n  //       // WMA THIRTY --------------------------------------------------------------------\n  //       wmaCul = newestPull[0].price * 30;\n  //       weight = 29;\n  //       wmaInterval = 0;\n  //       iWma = 30;\n  //       if (dataPull.historical.length < 30) {\n  //         searchedTicker.wmaThirty = \"No Data\";\n  //       } else {\n  //         for (let i = 0; i <= 28; i++) {\n  //           wmaInterval = dataPull.historical[i].close * weight;\n  //           wmaCul += wmaInterval;\n  //           iWma += weight;\n  //           weight--;\n  //         }\n  //         const wmaThirty = wmaCul / iWma;\n  //         searchedTicker.wmaThirty = wmaThirty.toFixed(2);\n  //       }\n  //       // WMA FIFTY --------------------------------------------------------------------\n  //       wmaCul = newestPull[0].price * 50;\n  //       weight = 49;\n  //       wmaInterval = 0;\n  //       iWma = 50;\n  //       if (dataPull.historical.length < 50) {\n  //         searchedTicker.wmaFifty = \"No Data\";\n  //       } else {\n  //         for (let i = 0; i <= 48; i++) {\n  //           wmaInterval = dataPull.historical[i].close * weight;\n  //           wmaCul += wmaInterval;\n  //           iWma += weight;\n  //           weight--;\n  //         }\n  //         const wmaFifty = wmaCul / iWma;\n  //         searchedTicker.wmaFifty = wmaFifty.toFixed(2);\n  //       }\n  //       // WMA ONE HUNDRED --------------------------------------------------------------------\n  //       wmaCul = newestPull[0].price * 100;\n  //       weight = 99;\n  //       wmaInterval = 0;\n  //       iWma = 100;\n  //       if (dataPull.historical.length < 100) {\n  //         searchedTicker.wmaOneHun = \"No Data\";\n  //       } else {\n  //         for (let i = 0; i <= 98; i++) {\n  //           wmaInterval = dataPull.historical[i].close * weight;\n  //           wmaCul += wmaInterval;\n  //           iWma += weight;\n  //           weight--;\n  //         }\n  //         const wmaOneHun = wmaCul / iWma;\n  //         searchedTicker.wmaOneHun = wmaOneHun.toFixed(2);\n  //       }\n  //       // WMA TWO HUNDRED --------------------------------------------------------------------\n  //       wmaCul = newestPull[0].price * 200;\n  //       weight = 199;\n  //       wmaInterval = 0;\n  //       iWma = 200;\n  //       if (dataPull.historical.length < 200) {\n  //         searchedTicker.wmaTwoHun = \"No Data\";\n  //       } else {\n  //         for (let i = 0; i <= 198; i++) {\n  //           wmaInterval = dataPull.historical[i].close * weight;\n  //           wmaCul += wmaInterval;\n  //           iWma += weight;\n  //           weight--;\n  //         }\n  //         const wmaTwoHun = wmaCul / iWma;\n  //         searchedTicker.wmaTwoHun = wmaTwoHun.toFixed(2);\n  //       }\n  //     } catch (e) {}\n  //   }\n  //   // VWMA FUNCTION ------------------------------------------------------------------------------------------------------------------------------------------\n  //   function vwmaFunction(searchedTicker, dataPull, newestPull) {\n  //     // VWMA FIVETEEN --------------------------------------------------------------------\n  //     const newPrice = newestPull[0].price;\n  //     const newVol = newestPull[0].volume;\n  //     let volCul = newestPull[0].volume;\n  //     let totalCul = newPrice * newVol;\n  //     let price = 0;\n  //     let volume = 0;\n  //     try {\n  //       if (dataPull.historical.length < 14) {\n  //         searchedTicker.vwmaFiveTeen = \"No Data\";\n  //       } else {\n  //         for (let i = 0; i <= 13; i++) {\n  //           price = dataPull.historical[i].close;\n  //           volume = dataPull.historical[i].volume;\n  //           totalCul += price * volume;\n  //           volCul += dataPull.historical[i].volume;\n  //         }\n  //         const vwmaFiveTeen = totalCul / volCul;\n  //         searchedTicker.vwmaFiveTeen = vwmaFiveTeen.toFixed(2);\n  //       }\n  //       // VWMA TWENTY --------------------------------------------------------------------\n  //       volCul = newestPull[0].volume;\n  //       totalCul = newPrice * newVol;\n  //       price = 0;\n  //       volume = 0;\n  //       if (dataPull.historical.length < 19) {\n  //         searchedTicker.vwmaTwenty = \"No Data\";\n  //       } else {\n  //         for (let i = 0; i <= 18; i++) {\n  //           price = dataPull.historical[i].close;\n  //           volume = dataPull.historical[i].volume;\n  //           totalCul += price * volume;\n  //           volCul += dataPull.historical[i].volume;\n  //         }\n  //         const vwmaTwenty = totalCul / volCul;\n  //         searchedTicker.vwmaTwenty = vwmaTwenty.toFixed(2);\n  //       }\n  //       // VWMA THIRTY --------------------------------------------------------------------\n  //       volCul = newestPull[0].volume;\n  //       totalCul = newPrice * newVol;\n  //       price = 0;\n  //       volume = 0;\n  //       if (dataPull.historical.length < 29) {\n  //         searchedTicker.vwmaThirty = \"No Data\";\n  //       } else {\n  //         for (let i = 0; i <= 28; i++) {\n  //           price = dataPull.historical[i].close;\n  //           volume = dataPull.historical[i].volume;\n  //           totalCul += price * volume;\n  //           volCul += dataPull.historical[i].volume;\n  //         }\n  //         const vwmaThirty = totalCul / volCul;\n  //         searchedTicker.vwmaThirty = vwmaThirty.toFixed(2);\n  //       }\n  //       // VWMA FIFTY --------------------------------------------------------------------\n  //       volCul = newestPull[0].volume;\n  //       totalCul = newPrice * newVol;\n  //       price = 0;\n  //       volume = 0;\n  //       if (dataPull.historical.length < 49) {\n  //         searchedTicker.vwmaFifty = \"No Data\";\n  //       } else {\n  //         for (let i = 0; i <= 48; i++) {\n  //           price = dataPull.historical[i].close;\n  //           volume = dataPull.historical[i].volume;\n  //           totalCul += price * volume;\n  //           volCul += dataPull.historical[i].volume;\n  //         }\n  //         const vwmaFifty = totalCul / volCul;\n  //         searchedTicker.vwmaFifty = vwmaFifty.toFixed(2);\n  //       }\n  //       // VWMA ONEHUN --------------------------------------------------------------------\n  //       volCul = newestPull[0].volume;\n  //       totalCul = newPrice * newVol;\n  //       price = 0;\n  //       volume = 0;\n  //       if (dataPull.historical.length < 99) {\n  //         searchedTicker.vwmaOneHun = \"No Data\";\n  //       } else {\n  //         for (let i = 0; i <= 98; i++) {\n  //           price = dataPull.historical[i].close;\n  //           volume = dataPull.historical[i].volume;\n  //           totalCul += price * volume;\n  //           volCul += dataPull.historical[i].volume;\n  //         }\n  //         const vwmaOneHun = totalCul / volCul;\n  //         searchedTicker.vwmaOneHun = vwmaOneHun.toFixed(2);\n  //       }\n  //       // VWMA TWOHUN --------------------------------------------------------------------\n  //       volCul = newestPull[0].volume;\n  //       totalCul = newPrice * newVol;\n  //       price = 0;\n  //       volume = 0;\n  //       if (dataPull.historical.length < 199) {\n  //         searchedTicker.vwmaTwoHun = \"No Data\";\n  //       } else {\n  //         for (let i = 0; i <= 198; i++) {\n  //           price = dataPull.historical[i].close;\n  //           volume = dataPull.historical[i].volume;\n  //           totalCul += price * volume;\n  //           volCul += dataPull.historical[i].volume;\n  //         }\n  //         const vwmaTwoHun = totalCul / volCul;\n  //         searchedTicker.vwmaTwoHun = vwmaTwoHun.toFixed(2);\n  //       }\n  //     } catch (e) {}\n  //   }\n  //   // EMA FUNCTION ------------------------------------------------------------------------------------------------------------------------------------------\n  //   function emaFunction(searchedTicker, dataPull, newestPull, macdCallBack) {\n  //     const newPrice = newestPull[0].price;\n  //     let emaEight = 14;\n  //     let emaTwelve = 22;\n  //     let emaTwenty = 38;\n  //     let emaTwentySix = 50;\n  //     let emaFifty = 98;\n  //     let emaTwoHun = 398;\n  //     let prevDayEmaSub = 0;\n  //     let arrEma = [];\n  //     let macdTwelve = []; // ARRs USED FOR MACD TWELVE HISTORY\n  //     let macdTwentySix = []; // ARRs USED FOR MACD TWENTY SIX HISTORY\n  //     try {\n  //       // EMA EIGHT ----------------------------------------------------------------------\n  //       if (dataPull.historical.length <= 16) {\n  //         searchedTicker.emaEight = \"No Data\";\n  //       } else {\n  //         while (emaEight >= 15) {\n  //           prevDayEmaSub += dataPull.historical[emaEight].close;\n  //           emaEight--;\n  //         } //CALCULATE EMA HERE TO GET PREVIOUS DAY EMA FOR ACCURATE CURRENT EMA\n  //         const subEMA = prevDayEmaSub / 8;\n  //         //THIS GETS AN EMA USING SMA AS PREV EMA ----------------------------\n  //         const finalSubEma =\n  //           (2 / 9) * (dataPull.historical[emaEight].close - subEMA) + subEMA;\n  //         arrEma.unshift(finalSubEma);\n  //         emaEight--;\n  //         while (emaEight >= 0) {\n  //           let derp =\n  //             (2 / 9) * (dataPull.historical[emaEight].close - arrEma[0]) +\n  //             arrEma[0];\n  //           arrEma.unshift(derp);\n  //           arrEma.pop();\n  //           emaEight--;\n  //         }\n  //         const finalEma = (2 / 9) * (newPrice - arrEma[0]) + arrEma[0];\n  //         arrEma.unshift(finalEma);\n  //         arrEma.pop();\n  //         searchedTicker.emaEight = arrEma[0].toFixed(2);\n  //         arrEma.pop();\n  //         prevDayEmaSub = 0;\n  //       }\n  //       // EMA TWELVE ----------------------------------------------------------------------\n  //       if (dataPull.historical.length <= 24) {\n  //         searchedTicker.emaTwelve = \"No Data\";\n  //       } else {\n  //         while (emaTwelve >= 11) {\n  //           prevDayEmaSub += dataPull.historical[emaTwelve].close;\n  //           emaTwelve--;\n  //         } //CALCULATE EMA HERE TO GET PREVIOUS DAY EMA FOR ACCURATE CURRENT EMA\n  //         const subEMA = prevDayEmaSub / 12;\n  //         //THIS GETS AN EMA USING SMA AS PREV EMA ----------------------------\n  //         const finalSubEma =\n  //           (2 / 13) * (dataPull.historical[emaTwelve].close - subEMA) + subEMA;\n  //         arrEma.unshift(finalSubEma);\n  //         emaTwelve--;\n  //         while (emaTwelve >= 0) {\n  //           let derp =\n  //             (2 / 13) * (dataPull.historical[emaTwelve].close - arrEma[0]) +\n  //             arrEma[0];\n  //           arrEma.unshift(derp);\n  //           arrEma.pop();\n  //           if (emaTwelve < 8 && emaTwelve >= 0) {\n  //             //THIS IF STATEMENT IS TO STORE VARIABLES FOR LATER MACD SIGNAL LINE\n  //             macdTwelve.unshift(derp);\n  //           }\n  //           emaTwelve--;\n  //         }\n  //         const finalEma = (2 / 13) * (newPrice - arrEma[0]) + arrEma[0];\n  //         arrEma.unshift(finalEma);\n  //         arrEma.pop();\n  //         macdTwelve.unshift(finalEma);\n  //         searchedTicker.emaTwelve = arrEma[0].toFixed(2);\n  //         arrEma.pop();\n  //         prevDayEmaSub = 0;\n  //       }\n  //       // EMA TWENTY ----------------------------------------------------------------------\n  //       if (dataPull.historical.length <= 40) {\n  //         searchedTicker.emaTwenty = \"No Data\";\n  //       } else {\n  //         while (emaTwenty >= 19) {\n  //           prevDayEmaSub += dataPull.historical[emaTwenty].close;\n  //           emaTwenty--;\n  //         } //CALCULATE EMA HERE TO GET PREVIOUS DAY EMA FOR ACCURATE CURRENT EMA\n  //         const subEMA = prevDayEmaSub / 20;\n  //         //THIS GETS AN EMA USING SMA AS PREV EMA ----------------------------\n  //         const finalSubEma =\n  //           (2 / 21) * (dataPull.historical[emaTwenty].close - subEMA) + subEMA;\n  //         arrEma.unshift(finalSubEma);\n  //         emaTwenty--;\n  //         while (emaTwenty >= 0) {\n  //           let derp =\n  //             (2 / 21) * (dataPull.historical[emaTwenty].close - arrEma[0]) +\n  //             arrEma[0];\n  //           arrEma.unshift(derp);\n  //           arrEma.pop();\n  //           emaTwenty--;\n  //         }\n  //         const finalEma = (2 / 21) * (newPrice - arrEma[0]) + arrEma[0];\n  //         arrEma.unshift(finalEma);\n  //         arrEma.pop();\n  //         searchedTicker.emaTwenty = arrEma[0].toFixed(2);\n  //         arrEma.pop();\n  //         prevDayEmaSub = 0;\n  //       }\n  //       // EMA TWENTY SIX ----------------------------------------------------------------------\n  //       if (dataPull.historical.length <= 51) {\n  //         searchedTicker.emaTwentySix = \"No Data\";\n  //       } else {\n  //         while (emaTwentySix >= 25) {\n  //           prevDayEmaSub += dataPull.historical[emaTwentySix].close;\n  //           emaTwentySix--;\n  //         } //CALCULATE EMA HERE TO GET PREVIOUS DAY EMA FOR ACCURATE CURRENT EMA\n  //         const subEMA = prevDayEmaSub / 26;\n  //         //THIS GETS AN EMA USING SMA AS PREV EMA ----------------------------\n  //         const finalSubEma =\n  //           (2 / 27) * (dataPull.historical[emaTwentySix].close - subEMA) +\n  //           subEMA;\n  //         arrEma.unshift(finalSubEma);\n  //         emaTwentySix--;\n  //         while (emaTwentySix >= 0) {\n  //           let derp =\n  //             (2 / 27) * (dataPull.historical[emaTwentySix].close - arrEma[0]) +\n  //             arrEma[0];\n  //           arrEma.unshift(derp);\n  //           arrEma.pop();\n  //           if (emaTwentySix < 8 && emaTwentySix >= 0) {\n  //             //THIS IF STATEMENT IS TO STORE VARIABLES FOR LATER MACD SIGNAL LINE\n  //             macdTwentySix.unshift(derp);\n  //           }\n  //           emaTwentySix--;\n  //         }\n  //         const finalEma = (2 / 27) * (newPrice - arrEma[0]) + arrEma[0];\n  //         arrEma.unshift(finalEma);\n  //         arrEma.pop();\n  //         macdTwentySix.unshift(finalEma);\n  //         searchedTicker.emaTwentySix = arrEma[0].toFixed(2);\n  //         arrEma.pop();\n  //         prevDayEmaSub = 0;\n  //       }\n  //       // EMA FIFTY -----------------------------------------------------------------------------\n  //       if (dataPull.historical.length <= 100) {\n  //         searchedTicker.emaFifty = \"No Data\";\n  //       } else {\n  //         while (emaFifty >= 49) {\n  //           prevDayEmaSub += dataPull.historical[emaFifty].close;\n  //           emaFifty--;\n  //         } //CALCULATE EMA HERE TO GET PREVIOUS DAY EMA FOR ACCURATE CURRENT EMA\n  //         const subEMA = prevDayEmaSub / 50;\n  //         //THIS GETS AN EMA USING SMA AS PREV EMA ----------------------------\n  //         const finalSubEma =\n  //           (2 / 51) * (dataPull.historical[emaFifty].close - subEMA) + subEMA;\n  //         arrEma.unshift(finalSubEma);\n  //         emaFifty--;\n  //         while (emaFifty >= 0) {\n  //           let derp =\n  //             (2 / 51) * (dataPull.historical[emaFifty].close - arrEma[0]) +\n  //             arrEma[0];\n  //           arrEma.unshift(derp);\n  //           arrEma.pop();\n  //           emaFifty--;\n  //         }\n  //         const finalEma = (2 / 51) * (newPrice - arrEma[0]) + arrEma[0];\n  //         arrEma.unshift(finalEma);\n  //         arrEma.pop();\n  //         searchedTicker.emaFifty = arrEma[0].toFixed(2);\n  //         arrEma.pop();\n  //         prevDayEmaSub = 0;\n  //       }\n  //       // EMA TWO HUNDRED -----------------------------------------------------------------------------\n  //       if (dataPull.historical.length <= 400) {\n  //         searchedTicker.emaTwoHun = \"No Data\";\n  //       } else {\n  //         while (emaTwoHun >= 199) {\n  //           prevDayEmaSub += dataPull.historical[emaTwoHun].close;\n  //           emaTwoHun--;\n  //         } //CALCULATE EMA HERE TO GET PREVIOUS DAY EMA FOR ACCURATE CURRENT EMA\n  //         const subEMA = prevDayEmaSub / 200;\n  //         //THIS GETS AN EMA USING SMA AS PREV EMA ----------------------------\n  //         const finalSubEma =\n  //           (2 / 201) * (dataPull.historical[emaTwoHun].close - subEMA) + subEMA;\n  //         arrEma.unshift(finalSubEma);\n  //         emaTwoHun--;\n  //         while (emaTwoHun >= 0) {\n  //           let derp =\n  //             (2 / 201) * (dataPull.historical[emaTwoHun].close - arrEma[0]) +\n  //             arrEma[0];\n  //           arrEma.unshift(derp);\n  //           arrEma.pop();\n  //           emaTwoHun--;\n  //         }\n  //         const finalEma = (2 / 201) * (newPrice - arrEma[0]) + arrEma[0];\n  //         arrEma.unshift(finalEma);\n  //         arrEma.pop();\n  //         searchedTicker.emaTwoHun = arrEma[0].toFixed(2);\n  //         arrEma.pop();\n  //         prevDayEmaSub = 0;\n  //       }\n  //     } catch (e) {}\n  //     // MACD CALLBACK -----------------------------------------------------------------------------------------------------------------------------------------\n  //     macdCallBack(searchedTicker, macdTwelve, macdTwentySix);\n  //   }\n  //   // MACD FUNCTION -----------------------------------------------------------------------------------------------------------------------------------------\n  //   function macdFunction(searchedTicker, arr1, arr2) {\n  //     const macd = searchedTicker.emaTwelve - searchedTicker.emaTwentySix;\n  //     searchedTicker.macd = macd.toFixed(2);\n  //     // CALCULATE SIGNAL LINE ----------------\n  //     let averageMacd = [];\n  //     let iMacd = 8;\n  //     try {\n  //       while (iMacd >= 0) {\n  //         averageMacd.unshift(arr1[iMacd] - arr2[iMacd]);\n  //         iMacd--;\n  //       }\n  //       let averageSum = averageMacd.reduce((a, b) => a + b);\n  //       let finalAverageMacd = averageSum / 9;\n  //       let macdSignalLine =\n  //         (2 / 9) * (searchedTicker.macd - finalAverageMacd) + finalAverageMacd;\n  //       searchedTicker.macdSignalLine = macdSignalLine.toFixed(2);\n  //       // HISTORGRAM CALC ------------------------------------- IF HISTOGRAM GOES FROM NEGATIVE TO POSITIVE IT IS BULLISH\n  //       let histogram = searchedTicker.macd - searchedTicker.macdSignalLine;\n  //       searchedTicker.macdHistogram = histogram.toFixed(2);\n  //       // FOR NO DATA TO PULL FROM\n  //       if (searchedTicker.macdHistogram === \"NaN\") {\n  //         searchedTicker.macdHistogram = \"No Data\";\n  //       }\n  //       if (searchedTicker.macd === \"NaN\") {\n  //         searchedTicker.macd = \"No Data\";\n  //       }\n  //       if (searchedTicker.macdSignalLine === \"NaN\") {\n  //         searchedTicker.macdSignalLine = \"No Data\";\n  //       }\n  //     } catch (e) {}\n  //   }\n  //   // RSI FUNCTION ------------------------------------------------------------------------------------------------------------------------------------------\n  //   function rsiFunction(searchedTicker, dataPull, newestPull) {\n  //     const newPrice = newestPull[0].price;\n  //     let iRSI = 13;\n  //     let iRSIAdjusted = 14;\n  //     let recentUpper = 0;\n  //     let recentDowner = 0;\n  //     let upMove = 0;\n  //     let downMove = 0;\n  //     let pastDownPeriod = 0;\n  //     let pastUpPeriod = 0;\n  //     try {\n  //       // CHECK TO SEE IF DATA PULL CAN PULL ENOUGH DATA TO BE EFFECTIVE\n  //       if (dataPull.historical.length <= 14) {\n  //         searchedTicker.rsi = \"No Data\";\n  //       } else {\n  //         // LOOP FOR AVERAGE\n  //         while (iRSI >= 0) {\n  //           if (\n  //             dataPull.historical[iRSI].close >\n  //             dataPull.historical[iRSIAdjusted].close\n  //           ) {\n  //             upMove +=\n  //               dataPull.historical[iRSI].close -\n  //               dataPull.historical[iRSIAdjusted].close;\n  //           } else {\n  //             downMove +=\n  //               dataPull.historical[iRSIAdjusted].close -\n  //               dataPull.historical[iRSI].close;\n  //           }\n  //           iRSI--;\n  //           iRSIAdjusted--;\n  //         }\n  //         let averageUp = upMove / 14;\n  //         let averageDown = downMove / 14;\n  //         // MOST RECENT DIFFERENCE\n  //         if (newPrice > dataPull.historical[0].close) {\n  //           recentUpper = newPrice - dataPull.historical[0].close;\n  //         } else {\n  //           recentDowner = dataPull.historical[0].close - newPrice;\n  //         }\n  //         pastUpPeriod = (averageUp * 13 + recentUpper) / 14;\n  //         pastDownPeriod = (averageDown * 13 + recentDowner) / 14;\n  //         let rsi = 100 - 100 / (1 + pastUpPeriod / pastDownPeriod);\n  //         searchedTicker.rsi = rsi.toFixed(2);\n  //       }\n  //     } catch (e) {}\n  //   }\n  //   // STOCHASTIC OSCILLATOR ------------------------------------------------------------------------------------------------------------------------------------------------------------------\n  //   function stochOsc1433Function(searchedTicker, dataPull, newestPull) {\n  //     let newPrice = newestPull[0].price;\n  //     let iSO = 13;\n  //     let soLowHolder = [];\n  //     let soHighHolder = [];\n  //     let highestHigh = 0;\n  //     let lowestLow = 0;\n  //     // FIRST %D\n  //     let topForm = [];\n  //     let bottomForm = [];\n  //     // SECOND %D\n  //     let topFormTwo = [];\n  //     let bottomFormTwo = [];\n  //     // THIRD %D\n  //     let topFormThree = [];\n  //     let bottomFormThree = [];\n  //     // HOLDING SET OF %D FOR 14 3 3\n  //     let signalLineHolder = [];\n  //     try {\n  //       if (dataPull.historical.length < 18) {\n  //         searchedTicker.stochasticK = \"No Data\";\n  //       } else {\n  //         // GETTING HIGHS AND LOWS OF PERIOD------------------------------------------------------\n  //         while (iSO >= 0) {\n  //           soLowHolder.push(dataPull.historical[iSO].low);\n  //           soHighHolder.push(dataPull.historical[iSO].high);\n  //           iSO--;\n  //         }\n  //         soHighHolder.push(newPrice);\n  //         soLowHolder.push(newPrice);\n  //         highestHigh = Math.max(...soHighHolder);\n  //         lowestLow = Math.min(...soLowHolder);\n  //         if (lowestLow === newPrice) {\n  //           newPrice = dataPull.historical[0].close;\n  //         }\n  //         if (highestHigh === newPrice) {\n  //           newPrice = dataPull.historical[0].close;\n  //         }\n  //         topForm.push(newPrice - lowestLow);\n  //         bottomForm.push(highestHigh - lowestLow);\n  //         //FOR %K\n  //         searchedTicker.stochasticK = (\n  //           ((newPrice - lowestLow) / (highestHigh - lowestLow)) *\n  //           100\n  //         ).toFixed(2);\n  //         // VERY IMPORT - REWORK THE STOCHASTIC NAMES AND THATS WHY ITS UNDEFINDED. REWRITE TO SHOW IN TECHIN\n  //         // RESET HOLDER AND VARs --------------------------------------------------------\n  //         iSO = 14;\n  //         soLowHolder = [];\n  //         soHighHolder = [];\n  //         highestHigh = 0;\n  //         lowestLow = 0;\n  //         // GETTING HIGHS AND LOWS OF PERIOD-----------------------------------------------\n  //         while (iSO >= 1) {\n  //           soLowHolder.push(dataPull.historical[iSO].low);\n  //           soHighHolder.push(dataPull.historical[iSO].high);\n  //           iSO--;\n  //         }\n  //         highestHigh = Math.max(...soHighHolder);\n  //         lowestLow = Math.min(...soLowHolder);\n  //         topForm.push(dataPull.historical[0].close - lowestLow);\n  //         bottomForm.push(highestHigh - lowestLow);\n  //         topFormTwo.push(dataPull.historical[0].close - lowestLow);\n  //         bottomFormTwo.push(highestHigh - lowestLow);\n  //         // RESET HOLDER AND VARs ------------------------------------------------\n  //         iSO = 15;\n  //         soLowHolder = [];\n  //         soHighHolder = [];\n  //         highestHigh = 0;\n  //         lowestLow = 0;\n  //         // GETTING HIGHS AND LOWS OF PERIOD-----------------------------------\n  //         while (iSO >= 2) {\n  //           soLowHolder.push(dataPull.historical[iSO].low);\n  //           soHighHolder.push(dataPull.historical[iSO].high);\n  //           iSO--;\n  //         }\n  //         highestHigh = Math.max(...soHighHolder);\n  //         lowestLow = Math.min(...soLowHolder);\n  //         topForm.push(dataPull.historical[1].close - lowestLow);\n  //         bottomForm.push(highestHigh - lowestLow);\n  //         topFormTwo.push(dataPull.historical[1].close - lowestLow);\n  //         bottomFormTwo.push(highestHigh - lowestLow);\n  //         topFormThree.push(dataPull.historical[1].close - lowestLow);\n  //         bottomFormThree.push(highestHigh - lowestLow);\n  //         // AFTER 3 WE SUM IT UP --------------- TO GET 1 OF THE 3 SMOOTHS FOR 14 3 3------------------------------------------\n  //         let sumTop = topForm.reduce((a, b) => a + b, 0);\n  //         let sumBottom = bottomForm.reduce((a, b) => a + b, 0);\n  //         let slowD = (sumTop / sumBottom) * 100;\n  //         // FOR %D\n  //         searchedTicker.stochasticD = (slowD / 3).toFixed(2);\n  //         signalLineHolder.push(slowD);\n  //         //RESET VARS ---------------------------------------------------------------------\n  //         iSO = 16;\n  //         soLowHolder = [];\n  //         soHighHolder = [];\n  //         highestHigh = 0;\n  //         lowestLow = 0;\n  //         sumTop = 0;\n  //         sumBottom = 0;\n  //         slowD = 0;\n  //         // GETTING HIGHS AND LOWS OF PERIOD------------------------------------------------\n  //         while (iSO >= 3) {\n  //           soLowHolder.push(dataPull.historical[iSO].low);\n  //           soHighHolder.push(dataPull.historical[iSO].high);\n  //           iSO--;\n  //         }\n  //         highestHigh = Math.max(...soHighHolder);\n  //         lowestLow = Math.min(...soLowHolder);\n  //         topFormTwo.push(dataPull.historical[2].close - lowestLow);\n  //         bottomFormTwo.push(highestHigh - lowestLow);\n  //         topFormThree.push(dataPull.historical[2].close - lowestLow);\n  //         bottomFormThree.push(highestHigh - lowestLow);\n  //         // AFTER 3 WE SUM IT UP --------------- TO GET 2 OF THE 3 SMOOTHS FOR 14 3 3------------------------------------------\n  //         sumTop = topFormTwo.reduce((a, b) => a + b, 0);\n  //         sumBottom = bottomFormTwo.reduce((a, b) => a + b, 0);\n  //         slowD = (sumTop / sumBottom) * 100;\n  //         signalLineHolder.push(slowD);\n  //         //RESET VARS ---------------------------------------------\n  //         iSO = 17;\n  //         soLowHolder = [];\n  //         soHighHolder = [];\n  //         highestHigh = 0;\n  //         lowestLow = 0;\n  //         sumTop = 0;\n  //         sumBottom = 0;\n  //         slowD = 0;\n  //         // GETTING HIGHS AND LOWS OF PERIOD-----------------------------------\n  //         while (iSO >= 4) {\n  //           soLowHolder.push(dataPull.historical[iSO].low);\n  //           soHighHolder.push(dataPull.historical[iSO].high);\n  //           iSO--;\n  //         }\n  //         highestHigh = Math.max(...soHighHolder);\n  //         lowestLow = Math.min(...soLowHolder);\n  //         topFormThree.push(dataPull.historical[3].close - lowestLow);\n  //         bottomFormThree.push(highestHigh - lowestLow);\n  //         // AFTER 3 WE SUM IT UP --------------- TO GET 3 OF THE 3 SMOOTHS FOR 14 3 3------------------------------------------\n  //         sumTop = topFormThree.reduce((a, b) => a + b, 0);\n  //         sumBottom = bottomFormThree.reduce((a, b) => a + b, 0);\n  //         slowD = (sumTop / sumBottom) * 100;\n  //         signalLineHolder.push(slowD);\n  //         // ----------- TALLY UP LAST SMOOTHING -------------------------------\n  //         const sumStochD = signalLineHolder.reduce((a, b) => a + b, 0);\n  //         let smaD = sumStochD / 3;\n  //         if (smaD < 0) {\n  //           smaD *= -1;\n  //           searchedTicker.stochasticSignal = smaD.toFixed(2);\n  //         } else {\n  //           searchedTicker.stochasticSignal = smaD.toFixed(2);\n  //         }\n  //       }\n  //     } catch (e) {}\n  //   }\n  //   // WILLIAMS %R 14 ------------------------------------------------------------------------------------------------------------------------------------------------------------------\n  //   function williamsRFunction(searchedTicker, dataPull, newestPull) {\n  //     const newPrice = newestPull[0].price;\n  //     let highs = [];\n  //     let lows = [];\n  //     let lowestLow = 0;\n  //     let highestHigh = 0;\n  //     try {\n  //       if (dataPull.historical.length < 14) {\n  //         searchedTicker.williams = \"No Data\";\n  //       } else {\n  //         for (let i = 0; i <= 13; i++) {\n  //           highs.push(dataPull.historical[i].high);\n  //           lows.push(dataPull.historical[i].low);\n  //         }\n  //         highs.push(newPrice);\n  //         lows.push(newPrice);\n  //         lowestLow = Math.min(...lows);\n  //         highestHigh = Math.max(...highs);\n  //         const williams =\n  //           ((highestHigh - dataPull.historical[0].close) /\n  //             (highestHigh - lowestLow)) *\n  //           -100;\n  //         searchedTicker.williamsR = williams.toFixed(2);\n  //       }\n  //     } catch (e) {}\n  //   }\n  //   // CCI 20 ------------------------------------------------------------------------------------------------------------------------------------------------------------------\n  //   function cciFunction(searchedTicker, dataPull, newestPull) {\n  //     const newPrice = newestPull[0].price;\n  //     let tpvCul = 0;\n  //     let tpv = [];\n  //     let tpvMa = 0;\n  //     let tpvCurrent = newPrice;\n  //     const recentTpv = newPrice;\n  //     try {\n  //       if (dataPull.historical.length < 19) {\n  //         searchedTicker.cciTwenty = \"No Data\";\n  //       } else {\n  //         for (let i = 0; i <= 19; i++) {\n  //           const { high, close, low } = dataPull.historical[i];\n  //           tpv.push(tpvCurrent); // PUSH FIRST NUMBER IN\n  //           tpvCurrent = (close + high + low) / 3;\n  //         }\n  //         // ---- TPV SMA ------------------------\n  //         tpvCul = tpv.reduce((a, b) => a + b);\n  //         tpvMa = tpvCul / 20;\n  //         // TOP HALF OF FORMULA - DIVIDE BY PART TWO\n  //         const partOne = recentTpv - tpvMa;\n  //         const meanD = tpv.map((x) => x - tpvMa);\n  //         const meanDMap = meanD.map((x) => Math.abs(x));\n  //         const meanDSum = meanDMap.reduce((a, b) => a + b);\n  //         const meanDiv = meanDSum / 20;\n  //         // PART TWO OF FORMULA --------------\n  //         const partTwo = meanDiv * 0.015;\n  //         // CCI ------------------------------\n  //         const cci = partOne / partTwo;\n  //         searchedTicker.cciTwenty = cci.toFixed(2);\n  //       }\n  //     } catch (e) {}\n  //   }\n  //   // BOLLINGER BANDS ------------------------------------------------------------------------------------------------------------------------------------------------------------------\n  //   function bollingerBandsFunction(searchedTicker, dataPull, newestPull) {\n  //     const newPrice = newestPull[0].price;\n  //     let smaCul = 0;\n  //     let closeHolder = [];\n  //     try {\n  //       if (dataPull.historical.length < 19) {\n  //         searchedTicker.bbUpper = \"No Data\";\n  //         searchedTicker.bbLower = \"No Data\";\n  //         searchedTicker.bbMiddle = \"No Data\";\n  //       } else {\n  //         let closeP = newPrice;\n  //         for (let i = 0; i <= 19; i++) {\n  //           closeHolder.push(closeP);\n  //           smaCul += closeP;\n  //           closeP = dataPull.historical[i].close;\n  //         }\n  //         // STANDARD DEVIATION CALC --------------------------------\n  //         const smaTwenty = smaCul / 20;\n  //         const priceAdj = closeHolder.map((x) => x - smaTwenty);\n  //         const priceAdjAbs = priceAdj.map((x) => Math.abs(x));\n  //         const priceAdjSqrt = priceAdjAbs.map((x) => x * x);\n  //         const partOneDev = priceAdjSqrt.reduce((a, b) => a + b);\n  //         const partTwoDev = partOneDev / 20;\n  //         const standardDev = Math.sqrt(partTwoDev);\n  //         // BB BAND CALC --------------------------------------------\n  //         const bbUpper = smaTwenty + standardDev * 2;\n  //         const bbLower = smaTwenty - standardDev * 2;\n  //         const bbPercent = (newPrice - bbLower) / (bbUpper - bbLower);\n  //         searchedTicker.bbUpper = bbUpper.toFixed(2);\n  //         searchedTicker.bbLower = bbLower.toFixed(2);\n  //         searchedTicker.bbMiddle = smaTwenty.toFixed(2);\n  //         searchedTicker.bbPercent = bbPercent.toFixed(2);\n  //       }\n  //     } catch (e) {}\n  //   }\n  //   // VWAP FUNCTION ------------------------------------------------------------------------------------------------------------------------------------------\n  //   function vwapFunction(searchedTicker, dataPull) {\n  //     // ----------- VWAP CALUC -------------------------------------------\n  //     let dayLengthPeriod = 0;\n  //     let tpvCul = 0;\n  //     let volumeCul = 0;\n  //     let tempVWAP = []; // HOLD VWAP PERIOD - TAKES FROM 0 INDEX FOR MOST CURRENT\n  //     try {\n  //       // -------------THIS IS FOR GETTING THE DAY LENGTH FOR VWAP\n  //       while (dataPull[dayLengthPeriod].date.slice(0, 10) == newDateString) {\n  //         dayLengthPeriod++;\n  //       }\n  //       // --------------------THIS IS FOR CALCULATING THE VWAP AND PUSHING TO\n  //       for (let i = 0; i < dayLengthPeriod; i++) {\n  //         const { volume, high, close, low, date } = dataPull[i];\n  //         let tpv = (high + low + close) / 3;\n  //         if (date.slice(0, 10) == newDateString) {\n  //           tpvCul += tpv * volume;\n  //           volumeCul += volume;\n  //         }\n  //         var vwapFinal = tpvCul / volumeCul; // --------- THIS IS VWAP!!!!!!!!\n  //         tempVWAP.unshift(vwapFinal); //ADD VWAP FRONT OF ARR\n  //       }\n  //       let vwap = tempVWAP[0].toFixed(2);\n  //       searchedTicker.vwap = vwap;\n  //     } catch (e) {}\n  //   }\n  //   // VOLUME FUNCTION ------------------------------------------------------------------------------------------------------------------------------------------\n  //   function setVolume(searchedTicker, dataPull, newestPull) {\n  //     // SET RECENT YESTERDAY VOLUME\n  //     if (dataPull.historical.length <= 0) {\n  //       searchedTicker.yesterdayVolume = 0;\n  //     } else {\n  //       searchedTicker.yesterdayVolume = dataPull.historical[0].volume;\n  //       if (marketDay == 0 || marketDay == 6) {\n  //         searchedTicker.yesterdayVolume = dataPull.historical[1].volume;\n  //       }\n  //       if (marketDay >= 1 && marketDay <= 5 && timeNum < 930) {\n  //         searchedTicker.yesterdayVolume = dataPull.historical[1].volume;\n  //       }\n  //       if (timeNum > 1830) {\n  //         searchedTicker.yesterdayVolume = dataPull.historical[1].volume;\n  //       }\n  //     }\n  //     // SET RECENT VOLUME\n  //     if (newestPull.length <= 0) {\n  //       searchedTicker.volume = 0;\n  //     } else {\n  //       searchedTicker.volume = newestPull[0].volume;\n  //     }\n  //   }\n  //   // WHERE THE MAGIC HAPPENS\n  //   // TA FUNCTION ---------------------------------------------------------------------\n  //   async function technicalIndicators(symbol, searchedSymbol, callBack) {\n  //     let j = 0;\n  //     try {\n  //       while (j < 1) {\n  //         // LOOP FOR TECHNICAL SEARCHED TICKER\n  //         try {\n  //           // ------ FETCH NASDAQ\n  //           const resTwo = await fetch(\n  //             \"https://financialmodelingprep.com/api/v3/quotes/nasdaq?apikey=4d4593bc9e6bc106ee9d1cbd6400b218\"\n  //           );\n  //           const dataNas = await resTwo.json();\n  //           for (let i = 0; i < dataNas.length; i++) {\n  //             if (dataNas[i].symbol == symbol) {\n  //               searchedSymbol = dataNas[i];\n  //               break;\n  //             }\n  //           }\n  //           // ------ FETCH NYSE\n  //           const res = await fetch(\n  //             \"https://financialmodelingprep.com/api/v3/quotes/nyse?apikey=4d4593bc9e6bc106ee9d1cbd6400b218\"\n  //           );\n  //           const dataNyse = await res.json();\n  //           for (let i = 0; i < dataNyse.length; i++) {\n  //             if (dataNyse[i].symbol == symbol) {\n  //               searchedSymbol = dataNyse[i];\n  //               break;\n  //             }\n  //           }\n  //         } catch (e) {\n  //           alert(\n  //             \"Unable to locate stock ticker. Please check your input and try again!\"\n  //           );\n  //         }\n  //         // WILL BREAK OUT IF SYMBOL DOESNT EXIST\n  //         if (searchedSymbol.price == undefined) {\n  //           alert(\n  //             \"Unable to locate stock ticker. Please check your input and try again!\"\n  //           );\n  //           return;\n  //         }\n  //         //THIS PULL IS FOR CLOSE PRICES TO CALC TAs PAST CLOSE DATA //\n  //         const resSMA = await fetch(\n  //           `https://financialmodelingprep.com/api/v3/historical-price-full/${symbol}?apikey=4d4593bc9e6bc106ee9d1cbd6400b218`\n  //         );\n  //         const dataSMA = await resSMA.json(); // SMA PULL USED FOR OTHER CALCS\n  //         // ERROR CHECK FOR EMPTY PULL\n  //         if (\n  //           Object.keys(dataSMA).length === 0 &&\n  //           dataSMA.constructor === Object\n  //         ) {\n  //           alert(\n  //             \"There may be a technical issue with this ticker. Please check your input and try again later!\"\n  //           );\n  //           return;\n  //         }\n  //         //THIS PULL IS FOR OSCILLATORS ALL CURRENT CLOSE DATA\n  //         const resOscPulled = await fetch(\n  //           `https://financialmodelingprep.com/api/v3/quote-short/${symbol}?apikey=4d4593bc9e6bc106ee9d1cbd6400b218`\n  //         );\n  //         const dataRecentPulled = await resOscPulled.json();\n  //         // ERROR CHECK FOR EMPTY PULL\n  //         if (\n  //           Object.keys(dataRecentPulled).length === 0 &&\n  //           dataRecentPulled.constructor === Object\n  //         ) {\n  //           alert(\n  //             \"There may be a technical issue with this ticker. Please check your input and try again later!\"\n  //           );\n  //           return;\n  //         }\n  //         // VWAP ------------------------------------------------------------------------------------------------------------------------------------------------\n  //         const resVWAP = await fetch(\n  //           `https://financialmodelingprep.com/api/v3/historical-chart/5min/${symbol}?apikey=4d4593bc9e6bc106ee9d1cbd6400b218`\n  //         );\n  //         const dataVWAP = await resVWAP.json();\n  //         // ERROR CHECK FOR EMPTY PULL\n  //         if (\n  //           Object.keys(dataVWAP).length === 0 &&\n  //           dataVWAP.constructor === Object\n  //         ) {\n  //           alert(\n  //             \"There may be a technical issue with this ticker. Please check your input and try again later!\"\n  //           );\n  //           return;\n  //         }\n  //         vwapFunction(searchedSymbol, dataVWAP);\n  //         // SMA -----------------------------------------------------------------------------------------------------------------------------------------------------------------------\n  //         smaFunction(searchedSymbol, dataSMA, dataRecentPulled);\n  //         // WMA ------------------------------------------------------------------------------------------------------------------------------------------------------------------\n  //         wmaFunction(searchedSymbol, dataSMA, dataRecentPulled);\n  //         // VWMA ------------------------------------------------------------------------------------------------------------------------------------------------------------------\n  //         vwmaFunction(searchedSymbol, dataSMA, dataRecentPulled);\n  //         // EMA WITH MACD CALLBACK ------------------------------------------------------------------------------------------------------------------------------------------\n  //         emaFunction(searchedSymbol, dataSMA, dataRecentPulled, macdFunction);\n  //         // RSI ------------------------------------------------------------------------------------------------------------------------------------------------------------------\n  //         rsiFunction(searchedSymbol, dataSMA, dataRecentPulled);\n  //         // STOCHASTIC OSCILLATOR ------------------------------------------------------------------------------------------------------------------------------------------------------------------\n  //         stochOsc1433Function(searchedSymbol, dataSMA, dataRecentPulled);\n  //         // WILLIAMS %R 14 ------------------------------------------------------------------------------------------------------------------------------------------------------------------\n  //         williamsRFunction(searchedSymbol, dataSMA, dataRecentPulled);\n  //         // CCI 20 ------------------------------------------------------------------------------------------------------------------------------------------------------------------\n  //         cciFunction(searchedSymbol, dataSMA, dataRecentPulled);\n  //         // BOLLINGER BANDS ------------------------------------------------------------------------------------------------------------------------------------------------------------------\n  //         bollingerBandsFunction(searchedSymbol, dataSMA, dataRecentPulled);\n  //         // SET VOLUME PROPERTIES\n  //         setVolume(searchedSymbol, dataSMA, dataRecentPulled);\n  //         j++; // UPDATE WHILE LOOP\n  //       } // THIS IS THE END OF LOOP\n  //     } catch (e) {\n  //       // END OF TRY\n  //     }\n  //     const returnedData = await callBack(searchedSymbol); // BUILD HTML TO DISPLAY\n  //     return returnedData;\n  //   }\n  //   // BUILD OUT HTML ------------------------------------------------------\n  //   async function buildSearchTech(obj) {\n  //     let {\n  //       symbol,\n  //       price,\n  //       change,\n  //       changesPercentage,\n  //       avgVolume,\n  //       volume,\n  //       yesterdayVolume,\n  //       vwap,\n  //       smaFiveTeen,\n  //       smaTwenty,\n  //       smaThirty,\n  //       smaFifty,\n  //       smaOneHun,\n  //       smaTwoHun,\n  //       emaEight,\n  //       emaTwelve,\n  //       emaTwenty,\n  //       emaTwentySix,\n  //       emaFifty,\n  //       emaTwoHun,\n  //       wmaFiveTeen,\n  //       wmaTwenty,\n  //       wmaThirty,\n  //       wmaFifty,\n  //       wmaOneHun,\n  //       wmaTwoHun,\n  //       vwmaFiveTeen,\n  //       vwmaTwenty,\n  //       vwmaThirty,\n  //       vwmaFifty,\n  //       vwmaOneHun,\n  //       vwmaTwoHun,\n  //       macd,\n  //       macdHistogram,\n  //       macdSignalLine,\n  //       rsi,\n  //       stochasticD,\n  //       stochasticK,\n  //       stochasticSignal,\n  //       cciTwenty,\n  //       bbMiddle,\n  //       bbLower,\n  //       bbUpper,\n  //       bbPercent,\n  //       williamsR,\n  //     } = obj;\n  //     let directionArrow = \"up\";\n  //     // SETS ARROW FOR UP AND DOWN --------------\n  //     if (changesPercentage < 0) {\n  //       obj.directionArrow = \"down\";\n  //     } else {\n  //       obj.directionArrow = \"up\";\n  //     }\n  //     // CHANGE TO POSITIVE BUT ARROW POINTS DOWN OR UP ----------\n  //     if (change < 0) {\n  //       obj.change = change * -1;\n  //     }\n  //     // ADJUST TO FIXED --------------------------------------------------------\n  //     price = price.toFixed(2);\n  //     change = change.toFixed(2);\n  //     changesPercentage = changesPercentage.toFixed(2);\n  //     // VOLUME INCREASE TODAY ----------\n  //     let volumeIncrease = 0;\n  //     if (volume > avgVolume) {\n  //       let increase = volume - avgVolume;\n  //       volumeIncrease = (increase / avgVolume) * 100;\n  //     } else {\n  //       let decrease = avgVolume - volume;\n  //       volumeIncrease = (decrease / avgVolume) * -100;\n  //     }\n  //     volumeIncrease = volumeIncrease.toFixed(2);\n  //     // TO GET AVERAGE DAILY VOLUME FOR YESTERDAY ----------------\n  //     let yesterdayVolIncrease = 0;\n  //     if (yesterdayVolume > avgVolume) {\n  //       let increase = yesterdayVolume - avgVolume;\n  //       yesterdayVolIncrease = (increase / avgVolume) * 100;\n  //     } else {\n  //       let decrease = avgVolume - yesterdayVolume;\n  //       yesterdayVolIncrease = (decrease / avgVolume) * -100;\n  //     }\n  //     yesterdayVolIncrease = yesterdayVolIncrease.toFixed(2);\n  //     // NaN CHECK ----------------------------------------\n  //     if (isNaN(yesterdayVolIncrease)) {\n  //       obj.yesterdayVolIncrease = \"No Data\";\n  //     }\n  //     // ADJUST TO POSITIVE\n  //     if (obj.stochasticD < 0) {\n  //       obj.stochasticD = obj.stochasticD * -1;\n  //     }\n  //     if (obj.stochasticK < 0) {\n  //       obj.stochasticK = obj.stochasticK * -1;\n  //     }\n  //     if (obj.stochasticD < 0) {\n  //       obj.stochasticD = obj.stochasticD * -1;\n  //     }\n  //     if (obj.stochasticK < 0) {\n  //       obj.stochasticK = obj.stochasticK * -1;\n  //     }\n  //     // ADJUST CERTAIN PARTS TO GIVE RIGHT PROMPT IF UNDEFINED\n  //     if (obj.avgVolume == undefined) {\n  //       obj.avgVolume = \"No Data\";\n  //     }\n  //     if (obj.volume == undefined) {\n  //       obj.volume = \"No Data\";\n  //     }\n  //     if (obj.volumeIncrease == undefined) {\n  //       obj.volumeIncrease = \"No Data\";\n  //     }\n  //     if (obj.yesterdayVolume == undefined) {\n  //       obj.yesterdayVolume = \"No Data\";\n  //     }\n  //     if (obj.smaFiveTeen == undefined) {\n  //       obj.smaFiveTeen = \"No Data\";\n  //     }\n  //     if (obj.smaTwenty == undefined) {\n  //       obj.smaTwenty = \"No Data\";\n  //     }\n  //     if (obj.smaThirty == undefined) {\n  //       obj.smaThirty = \"No Data\";\n  //     }\n  //     if (obj.smaFifty == undefined) {\n  //       obj.smaFifty = \"No Data\";\n  //     }\n  //     if (obj.smaOneHun == undefined) {\n  //       obj.smaOneHun = \"No Data\";\n  //     }\n  //     if (obj.smaTwoHun == undefined) {\n  //       obj.smaTwoHun = \"No Data\";\n  //     }\n  //     if (obj.emaEight == undefined) {\n  //       obj.emaEight = \"No Data\";\n  //     }\n  //     if (obj.emaTwelve == undefined) {\n  //       obj.emaTwelve = \"No Data\";\n  //     }\n  //     if (obj.emaTwenty == undefined) {\n  //       obj.emaTwenty = \"No Data\";\n  //     }\n  //     if (obj.emaTwentySix == undefined) {\n  //       obj.emaTwentySix = \"No Data\";\n  //     }\n  //     if (obj.emaFifty == undefined) {\n  //       obj.emaFifty = \"No Data\";\n  //     }\n  //     if (obj.emaTwoHun == undefined) {\n  //       obj.emaTwoHun = \"No Data\";\n  //     }\n  //     if (obj.wmaFiveTeen == undefined) {\n  //       obj.wmaFiveTeen = \"No Data\";\n  //     }\n  //     if (obj.wmaTwenty == undefined) {\n  //       obj.wmaTwenty = \"No Data\";\n  //     }\n  //     if (obj.wmaThirty == undefined) {\n  //       obj.wmaThirty = \"No Data\";\n  //     }\n  //     if (obj.wmaFifty == undefined) {\n  //       obj.wmaFifty = \"No Data\";\n  //     }\n  //     if (obj.wmaOneHun == undefined) {\n  //       obj.wmaOneHun = \"No Data\";\n  //     }\n  //     if (obj.wmaTwoHun == undefined) {\n  //       obj.wmaTwoHun = \"No Data\";\n  //     }\n  //     if (obj.vwmaFiveTeen == undefined) {\n  //       obj.vwmaFiveTeen = \"No Data\";\n  //     }\n  //     if (obj.vwmaTwenty == undefined) {\n  //       obj.vwmaTwenty = \"No Data\";\n  //     }\n  //     if (obj.vwmaThirty == undefined) {\n  //       obj.vwmaThirty = \"No Data\";\n  //     }\n  //     if (obj.vwmaFifty == undefined) {\n  //       obj.vwmaFifty = \"No Data\";\n  //     }\n  //     if (obj.vwmaOneHun == undefined) {\n  //       obj.vwmaOneHun = \"No Data\";\n  //     }\n  //     if (obj.vwmaTwoHun == undefined) {\n  //       obj.vwmaTwoHun = \"No Data\";\n  //     }\n  //     if (obj.vwap == undefined) {\n  //       obj.vwap = \"No Data\";\n  //     }\n  //     if (obj.macd == undefined) {\n  //       obj.macd = \"No Data\";\n  //     }\n  //     if (obj.rsi == undefined) {\n  //       obj.rsi = \"No Data\";\n  //     }\n  //     if (obj.cciTwenty == undefined) {\n  //       obj.cciTwenty = \"No Data\";\n  //     }\n  //     if (obj.williamsR == undefined) {\n  //       obj.williamsR = \"No Data\";\n  //     }\n  //     if (obj.stochasticK == undefined) {\n  //       obj.stochasticK = \"No Data\";\n  //     }\n  //     if (obj.stochasticD == undefined) {\n  //       obj.stochasticD = \"No Data\";\n  //     }\n  //     if (obj.stochasticSignal == undefined) {\n  //       obj.stochasticSignal = \"No Data\";\n  //     }\n  //     if (obj.bbMiddle == undefined) {\n  //       obj.bbMiddle = \"No Data\";\n  //     }\n  //     if (obj.bbLower == undefined) {\n  //       obj.bbLower = \"No Data\";\n  //     }\n  //     if (obj.bbUpper == undefined) {\n  //       obj.bbUpper = \"No Data\";\n  //     }\n  //     if (obj.bbPercent == undefined) {\n  //       obj.bbPercent = \"No Data\";\n  //     }\n  //     // ADJUST TO POSITIVE\n  //     if (obj.stochasticD < 0) {\n  //       obj.stochasticD = obj.stochasticD * -1;\n  //     }\n  //     if (obj.stochasticK < 0) {\n  //       obj.stochasticK = obj.stochasticK * -1;\n  //     }\n  //     if (obj.stochasticD < 0) {\n  //       obj.stochasticD = obj.stochasticD * -1;\n  //     }\n  //     if (obj.stochasticK < 0) {\n  //       obj.stochasticK = obj.stochasticK * -1;\n  //     }\n  //     obj.volumeIncreaseToday = volumeIncrease;\n  //     obj.volumeIncreaseYesterday = yesterdayVolIncrease;\n  //     obj.volumeYesterday = yesterdayVolume;\n  //     // SET BOX SHADOW OF BULL AND BEAR\n  //     // if (changesPercentage < 0) {\n  //     //   document.querySelector(\".search-symbol-box\").style.boxShadow =\n  //     //     \"inset 0px 2px 3px var(--bear-market-color), inset 0px 2px 2px var(--bear-market-color)\";\n  //     // } else if (changesPercentage > 0) {\n  //     //   document.querySelector(\".search-symbol-box\").style.boxShadow =\n  //     //     \"inset 0px 2px 3px var(--bull-market-color), inset 0px 2px 2px var(--bull-market-color)\";\n  //     // }\n  //     const returnedData = obj;\n  //     return returnedData;\n  //   }\n  //   const returnedData = await technicalIndicators(\n  //     symbol,\n  //     symbolObj,\n  //     buildSearchTech\n  //   );\n  //   return returnedData;\n};","map":{"version":3,"sources":["/Users/austinolijar/Desktop/DeadCatReact/dead-cat/src/JS/APIPortfolioFunction.js"],"names":["technicalPortfolioAnalysis","arr","alert","length","console","log","today","Date","year","getFullYear","date","getUTCDate","month","getUTCMonth","minutes","getUTCMinutes","hour","getUTCHours","time","timeNum","parseInt","marketDay","getDay","todayDate","newDateString","dateNumSlice","dateSliceStart","slice","newDateNum","toString","filterTradableSymbols","portArr","res","fetch","dataNyse","json","resTwo","dataNas","combinedStock","concat","returnedData","filter","stock","e"],"mappings":"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AAd,CAAqBC,KAAK,IAAIzC,GAAG,CAACyC,KAAD,CAAjC,CAA3B;AACAtC,MAAAA,OAAO,CAACC,GAAR,CAAYmC,YAAZ,EAA0B,UAA1B;AACA,aAAOA,YAAP,CAnBE,CAoBF;AACD,KArBD,CAqBE,OAAOG,CAAP,EAAU,CAAE;AAEf;;AAEDb,EAAAA,qBAAqB,CAAC7B,GAAD,CAArB,CAxUuD,CA0UzD;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AAEA;AAEA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AAEA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACC,CApwDM","sourcesContent":["export const technicalPortfolioAnalysis = async (arr) => {\n\n\n    // CHECKING ON PORTFOLIO TO MAKE SURE IT HAS SOMETHING ----------------------------------\n\n    if (arr === null) {\n        alert('Sorry, your portfolio seems to be malfunctioning.')\n        return;\n      } else if (arr.length <= 0) {\n        alert('Sorry, your portfolio seems to be malfunctioning.')\n        return;\n      }\n\n      console.log(arr)\n\n  /// DATE REFERENCE FOR MARKET DATA PULLS ----------------------------------------\n  const today = new Date();\n  const year = today.getFullYear();\n  let date = today.getUTCDate();\n  let month = today.getUTCMonth() + 1;\n  let minutes = today.getUTCMinutes();\n  let hour = today.getUTCHours();\n  // GET TIME FOR CLOSING AND OPENING MARKET -----------------------------------\n\n  //CALC FOR UTC TO EST\n  hour = hour - 4;\n  // CALC FOR EARLY MORNING HOURS UTC\n  if (hour < 0) {\n    hour = hour + 24;\n  }\n\n  // GET AND ADJUST MINUTES TO ADD 0 BELOW 10\n  if (minutes < 10) {\n    minutes = `0${minutes}`;\n  }\n  const time = `${hour}${minutes}`;\n  const timeNum = parseInt(time);\n\n  // GET DAY FOR CLOSING AND OPENING MARKET -------------------------------------------\n  const marketDay = today.getDay();\n  // CHECK FOR MARKET OPEN - ADJUST DATE SO VWAP STILL PULLS DATA FROM LAST DAY\n  if (marketDay == 0) {\n    date = date - 2;\n    // NEED TO CHECK FOR NEW MONTH CHANGE OVER FROM UTC TIME TO ADJUST FOR EST\n    if (date <= 0) {\n      if (\n        month == 1 ||\n        month == 2 ||\n        month == 4 ||\n        month == 6 ||\n        month == 8 ||\n        month == 9 ||\n        month == 11\n      ) {\n        // MONTHS AFTER 31 DAYS\n        month = month - 1;\n        if (month < 10) {\n          month = `0${month}`;\n        }\n        date = 30;\n      } else if (month == 5 || month == 7 || month == 10 || month == 12) {\n        // MONTHS AFTER 30 DAYS\n        month = month - 1;\n        if (month < 10) {\n          month = `0${month}`;\n        }\n        date = 29;\n      } else if (month == 3 && year % 4 == 0) {\n        // MONTH AFTER 29 DAYS LEAP YEAR\n        month = month - 1;\n        if (month < 10) {\n          month = `0${month}`;\n        }\n        date = 28;\n      } // MONTH AFTER 28\n      else {\n        month = month - 1;\n        if (month < 10) {\n          month = `0${month}`;\n        }\n        date = 27;\n      }\n    }\n  } else if (marketDay == 6) {\n    date = date - 1;\n    // NEED TO CHECK FOR NEW MONTH CHANGE OVER FROM UTC TIME TO ADJUST FOR EST\n    if (date <= 0) {\n      if (\n        month == 1 ||\n        month == 2 ||\n        month == 4 ||\n        month == 6 ||\n        month == 8 ||\n        month == 9 ||\n        month == 11\n      ) {\n        // MONTHS AFTER 31 DAYS\n        month = month - 1;\n        if (month < 10) {\n          month = `0${month}`;\n        }\n        date = 31;\n      } else if (month == 5 || month == 7 || month == 10 || month == 12) {\n        // MONTHS AFTER 30 DAYS\n        month = month - 1;\n        if (month < 10) {\n          month = `0${month}`;\n        }\n        date = 30;\n      } else if (month == 3 && year % 4 == 0) {\n        // MONTH AFTER 29 DAYS LEAP YEAR\n        month = month - 1;\n        if (month < 10) {\n          month = `0${month}`;\n        }\n        date = 29;\n      } // MONTH AFTER 28\n      else {\n        month = month - 1;\n        if (month < 10) {\n          month = `0${month}`;\n        }\n        date = 28;\n      }\n    }\n  }\n  // THIS IS TO CHECK FOR MARKET DAY OPEN DURING WEEKENDS WHEN MARKET IS CLOSED\n  if (marketDay == 1 && timeNum < 930) {\n    date = date - 3;\n    // NEED TO CHECK FOR NEW MONTH CHANGE OVER FROM UTC TIME TO ADJUST FOR EST\n    if (date <= 0) {\n      if (\n        month == 1 ||\n        month == 2 ||\n        month == 4 ||\n        month == 6 ||\n        month == 8 ||\n        month == 9 ||\n        month == 11\n      ) {\n        // MONTHS AFTER 31 DAYS\n        month = month - 1;\n        if (month < 10) {\n          month = `0${month}`;\n        }\n        date = 29;\n      } else if (month == 5 || month == 7 || month == 10 || month == 12) {\n        // MONTHS AFTER 30 DAYS\n        month = month - 1;\n        if (month < 10) {\n          month = `0${month}`;\n        }\n        date = 28;\n      } else if (month == 3 && year % 4 == 0) {\n        // MONTH AFTER 29 DAYS LEAP YEAR\n        month = month - 1;\n        if (month < 10) {\n          month = `0${month}`;\n        }\n        date = 27;\n      } // MONTH AFTER 28\n      else {\n        month = month - 1;\n        if (month < 10) {\n          month = `0${month}`;\n        }\n        date = 26;\n      }\n    }\n  } else if (marketDay >= 2 && marketDay < 6 && timeNum < 930) {\n    // ADJUSTS DURING WEEK BEFORE OPEN TO GET DAY BEFORE INDICATORS\n    date = date - 1;\n    // NEED TO CHECK FOR NEW MONTH CHANGE OVER FROM UTC TIME TO ADJUST FOR EST\n    if (date <= 0) {\n      if (\n        month == 1 ||\n        month == 2 ||\n        month == 4 ||\n        month == 6 ||\n        month == 8 ||\n        month == 9 ||\n        month == 11\n      ) {\n        // MONTHS AFTER 31 DAYS\n        month = month - 1;\n        if (month == 0) {\n          month = 1;\n        }\n        date = 31;\n      } else if (month == 5 || month == 7 || month == 10 || month == 12) {\n        // MONTHS AFTER 30 DAYS\n        month = month - 1;\n        date = 30;\n      } else if (month == 3 && year % 4 == 0) {\n        // MONTH AFTER 29 DAYS LEAP YEAR\n        month = month - 1;\n        date = 29;\n      } // MONTH AFTER 28\n      else {\n        month = month - 1;\n        date = 28;\n      }\n    }\n  }\n\n  // THIS IS TO CORRECT MISSING 0 ON SINGLE DIGITS OF MONTHS\n  if (date < 10) {\n    date = `0${date}`;\n  }\n  if (month < 10) {\n    month = `0${month}`;\n  }\n\n  // DATE CHECK VARIBLE FOR DATA PERIOD PULLS AND TO SLICE FROM\n  let todayDate = `${year}-${month}-${date}`;\n  //CHECK FOR HOLIDAYS OR CLOSED MARKET HOLIDAYS\n  if (todayDate === \"2021-11-25\") {\n    todayDate = \"2021-11-24\";\n  } else if (todayDate === \"2021-12-24\") {\n    todayDate = \"2021-12-23\";\n  } else if (todayDate === \"2022-01-17\") {\n    todayDate = \"2022-01-14\";\n  } else if (todayDate === \"2022-02-21\") {\n    todayDate = \"2022-02-18\";\n  } else if (todayDate === \"2022-04-15\") {\n    todayDate = \"2022-04-14\";\n  } else if (todayDate === \"2022-05-30\") {\n    todayDate = \"2022-05-27\";\n  } else if (todayDate === \"2022-06-20\") {\n    todayDate = \"2022-06-17\";\n  } else if (todayDate === \"2022-07-04\") {\n    todayDate = \"2022-07-01\";\n  } else if (todayDate === \"2022-09-05\") {\n    todayDate = \"2022-09-02\";\n  } else if (todayDate === \"2022-11-24\") {\n    todayDate = \"2022-11-23\";\n  } else if (todayDate === \"2022-12-26\") {\n    todayDate = \"2022-12-23\";\n  }\n  // THIS IS AN ADJUSTMENT OF DATE FOR MARKET CLOSES EST VS UTC TIME\n  let newDateString = todayDate;\n\n  if (hour + 4 >= 24) {\n    const dateNumSlice = parseInt(date);\n    const dateSliceStart = todayDate.slice(0, 8);\n    let newDateNum = dateNumSlice - 1;\n    if (newDateNum < 10) {\n      newDateNum = `0${newDateNum}`;\n    }\n    newDateString = `${dateSliceStart}${newDateNum}`;\n    newDateString = newDateString.toString();\n    // NEED TO CHECK FOR NEW MONTH CHANGE OVER FROM UTC TIME TO ADJUST FOR EST\n    if (date == 1 && hour + 4 >= 24) {\n      if (\n        month == 1 ||\n        month == 2 ||\n        month == 4 ||\n        month == 6 ||\n        month == 8 ||\n        month == 9 ||\n        month == 11\n      ) {\n        // MONTHS AFTER 31 DAYS\n        month = month - 1;\n        if (month < 10) {\n          month = `0${month}`;\n        }\n        date = 31;\n        newDateString = `${year}-${month}-${date}`;\n      } else if (month == 5 || month == 7 || month == 10 || month == 12) {\n        // MONTHS AFTER 30 DAYS\n        month = month - 1;\n        if (month < 10) {\n          month = `0${month}`;\n        }\n        date = 30;\n        newDateString = `${year}-${month}-${date}`;\n      } else if (month == 3 && year % 4 == 0) {\n        // MONTH AFTER 29 DAYS LEAP YEAR\n        month = month - 1;\n        if (month < 10) {\n          month = `0${month}`;\n        }\n        date = 29;\n        newDateString = `${year}-${month}-${date}`;\n      } // MONTH AFTER 28\n      else {\n        month = month - 1;\n        if (month < 10) {\n          month = `0${month}`;\n        }\n        date = 28;\n        newDateString = `${year}-${month}-${date}`;\n      }\n    }\n  }\n\n  // ---------------------- END OF DATE -------------------------------------\n\n  // ---------------------- FILTERS TRADABLE SYMBOLS THAT HAVE DROPPED BELOW THE THRESHOLD -------------------------------------\n  async function filterTradableSymbols(portArr) {\n\n\n    try {\n      // ------ FETCH NYSE\n      const res = await fetch(\n        \"https://financialmodelingprep.com/api/v3/quotes/nyse?apikey=4d4593bc9e6bc106ee9d1cbd6400b218\"\n      );\n      const dataNyse = await res.json();\n       \n      // ------ FETCH NASDAQ\n      const resTwo = await fetch(\n        \"https://financialmodelingprep.com/api/v3/quotes/nasdaq?apikey=4d4593bc9e6bc106ee9d1cbd6400b218\"\n      );\n      const dataNas = await resTwo.json();\n\n      // FILTER THESE STOCKS DOWN TO JUST WHAT IS IN PORTFOLIO\n      const combinedStock = await dataNyse.concat(dataNas);\n      console.log(combinedStock, 'combined')\n      console.log(arr)\n      const returnedData = await combinedStock.filter(stock => arr[stock])\n      console.log(returnedData, 'returned')\n      return returnedData;\n      //--------- CATCH\n    } catch (e) {}\n\n  }\n\n  filterTradableSymbols(arr)\n\n//   // SMA FUNCTION ------------------------------------------------------------------------------------------------------------------------------------------\n//   function smaFunction(searchedTicker, dataPull, newestPull) {\n//     let culSMA = 0;\n\n//     // ------- SMA INDEX IS - 2 FROM TOTAL BECAUSE OF 0 INDEX = 1 AND ADDING RECENT PRICE DATA --------------------\n//     let fiveTeenSMA = 13;\n//     let twentySMA = 18;\n//     let thirtySMA = 28;\n//     let fiftySMA = 48;\n//     let hunSMA = 98;\n//     let twoHunSMA = 198;\n\n//     const todayPricePull = newestPull[0].price;\n\n//     try {\n//       // ------------- 15 DAY SMA -------------------------------\n//       if (dataPull.historical.length <= 13) {\n//         searchedTicker.smaFiveTeen = \"No Data\";\n//       } else {\n//         while (fiveTeenSMA >= 0) {\n//           culSMA += dataPull.historical[fiveTeenSMA].close;\n//           fiveTeenSMA--;\n//         }\n//         let smaFiveResult = (culSMA + todayPricePull) / 15;\n//         searchedTicker.smaFiveTeen = smaFiveResult.toFixed(2);\n//         culSMA = 0;\n//       }\n//       // ------------- 20 DAY SMA -------------------------------\n//       if (dataPull.historical.length <= 19) {\n//         searchedTicker.smaTwenty = \"No Data\";\n//       } else {\n//         while (twentySMA >= 0) {\n//           culSMA += dataPull.historical[twentySMA].close;\n//           twentySMA--;\n//         }\n//         let smaTwentyResult = (culSMA + todayPricePull) / 20;\n//         searchedTicker.smaTwenty = smaTwentyResult.toFixed(2);\n//         culSMA = 0;\n//       }\n//       // ------------- 30 DAY SMA -------------------------------\n//       if (dataPull.historical.length <= 29) {\n//         searchedTicker.smaThirty = \"No Data\";\n//       } else {\n//         while (thirtySMA >= 0) {\n//           culSMA += dataPull.historical[thirtySMA].close;\n//           thirtySMA--;\n//         }\n//         let smaThirtyResult = (culSMA + todayPricePull) / 30;\n//         searchedTicker.smaThirty = smaThirtyResult.toFixed(2);\n//         culSMA = 0;\n//       }\n//       // ------------- 50 DAY SMA -------------------------------\n//       if (dataPull.historical.length <= 49) {\n//         searchedTicker.smaFifty = \"No Data\";\n//       } else {\n//         while (fiftySMA >= 0) {\n//           culSMA += dataPull.historical[fiftySMA].close;\n//           fiftySMA--;\n//         }\n//         let smaFiftyResult = (culSMA + todayPricePull) / 50;\n//         searchedTicker.smaFifty = smaFiftyResult.toFixed(2);\n//         culSMA = 0;\n//       }\n//       // ------------- 100 DAY SMA -------------------------------\n//       if (dataPull.historical.length <= 99) {\n//         searchedTicker.smaOneHun = \"No Data\";\n//       } else {\n//         while (hunSMA >= 0) {\n//           culSMA += dataPull.historical[hunSMA].close;\n//           hunSMA--;\n//         }\n//         let smaOneHunResult = (culSMA + todayPricePull) / 100;\n//         searchedTicker.smaOneHun = smaOneHunResult.toFixed(2);\n//         culSMA = 0;\n//       }\n//       // ------------- 200 DAY SMA -------------------------------\n//       if (dataPull.historical.length <= 199) {\n//         searchedTicker.smaTwoHun = \"No Data\";\n//       } else {\n//         while (twoHunSMA >= 0) {\n//           culSMA += dataPull.historical[twoHunSMA].close;\n//           twoHunSMA--;\n//         }\n//         let smaTwoHunResult = (culSMA + todayPricePull) / 200;\n//         searchedTicker.smaTwoHun = smaTwoHunResult.toFixed(2);\n//         culSMA = 0;\n//       }\n//     } catch (e) {}\n//   }\n//   // WMA FUNCTION ------------------------------------------------------------------------------------------------------------------------------------------\n//   function wmaFunction(searchedTicker, dataPull, newestPull) {\n//     // WMA FiveTeen --------------------------------------------------------------------\n//     let wmaCul = newestPull[0].price * 15;\n//     let weight = 14;\n//     let wmaInterval = 0;\n//     let iWma = 15;\n\n//     try {\n//       if (dataPull.historical.length < 14) {\n//         searchedTicker.wmaFiveTeen = \"No Data\";\n//       } else {\n//         for (let i = 0; i <= 13; i++) {\n//           wmaInterval = dataPull.historical[i].close * weight;\n//           wmaCul += wmaInterval;\n//           iWma += weight;\n//           weight--;\n//         }\n//         const wmaFiveTeen = wmaCul / iWma;\n//         searchedTicker.wmaFiveTeen = wmaFiveTeen.toFixed(2);\n//       }\n\n//       // WMA Twenty --------------------------------------------------------------------\n//       wmaCul = newestPull[0].price * 20;\n//       weight = 19;\n//       wmaInterval = 0;\n//       iWma = 20;\n\n//       if (dataPull.historical.length < 19) {\n//         searchedTicker.wmaTwenty = \"No Data\";\n//       } else {\n//         for (let i = 0; i <= 18; i++) {\n//           wmaInterval = dataPull.historical[i].close * weight;\n//           wmaCul += wmaInterval;\n//           iWma += weight;\n//           weight--;\n//         }\n//         const wmaTwenty = wmaCul / iWma;\n//         searchedTicker.wmaTwenty = wmaTwenty.toFixed(2);\n//       }\n\n//       // WMA THIRTY --------------------------------------------------------------------\n\n//       wmaCul = newestPull[0].price * 30;\n//       weight = 29;\n//       wmaInterval = 0;\n//       iWma = 30;\n\n//       if (dataPull.historical.length < 30) {\n//         searchedTicker.wmaThirty = \"No Data\";\n//       } else {\n//         for (let i = 0; i <= 28; i++) {\n//           wmaInterval = dataPull.historical[i].close * weight;\n//           wmaCul += wmaInterval;\n//           iWma += weight;\n//           weight--;\n//         }\n//         const wmaThirty = wmaCul / iWma;\n//         searchedTicker.wmaThirty = wmaThirty.toFixed(2);\n//       }\n\n//       // WMA FIFTY --------------------------------------------------------------------\n\n//       wmaCul = newestPull[0].price * 50;\n//       weight = 49;\n//       wmaInterval = 0;\n//       iWma = 50;\n\n//       if (dataPull.historical.length < 50) {\n//         searchedTicker.wmaFifty = \"No Data\";\n//       } else {\n//         for (let i = 0; i <= 48; i++) {\n//           wmaInterval = dataPull.historical[i].close * weight;\n//           wmaCul += wmaInterval;\n//           iWma += weight;\n//           weight--;\n//         }\n//         const wmaFifty = wmaCul / iWma;\n//         searchedTicker.wmaFifty = wmaFifty.toFixed(2);\n//       }\n\n//       // WMA ONE HUNDRED --------------------------------------------------------------------\n\n//       wmaCul = newestPull[0].price * 100;\n//       weight = 99;\n//       wmaInterval = 0;\n//       iWma = 100;\n\n//       if (dataPull.historical.length < 100) {\n//         searchedTicker.wmaOneHun = \"No Data\";\n//       } else {\n//         for (let i = 0; i <= 98; i++) {\n//           wmaInterval = dataPull.historical[i].close * weight;\n//           wmaCul += wmaInterval;\n//           iWma += weight;\n//           weight--;\n//         }\n//         const wmaOneHun = wmaCul / iWma;\n//         searchedTicker.wmaOneHun = wmaOneHun.toFixed(2);\n//       }\n\n//       // WMA TWO HUNDRED --------------------------------------------------------------------\n\n//       wmaCul = newestPull[0].price * 200;\n//       weight = 199;\n//       wmaInterval = 0;\n//       iWma = 200;\n\n//       if (dataPull.historical.length < 200) {\n//         searchedTicker.wmaTwoHun = \"No Data\";\n//       } else {\n//         for (let i = 0; i <= 198; i++) {\n//           wmaInterval = dataPull.historical[i].close * weight;\n//           wmaCul += wmaInterval;\n//           iWma += weight;\n//           weight--;\n//         }\n//         const wmaTwoHun = wmaCul / iWma;\n//         searchedTicker.wmaTwoHun = wmaTwoHun.toFixed(2);\n//       }\n//     } catch (e) {}\n//   }\n//   // VWMA FUNCTION ------------------------------------------------------------------------------------------------------------------------------------------\n//   function vwmaFunction(searchedTicker, dataPull, newestPull) {\n//     // VWMA FIVETEEN --------------------------------------------------------------------\n\n//     const newPrice = newestPull[0].price;\n//     const newVol = newestPull[0].volume;\n\n//     let volCul = newestPull[0].volume;\n//     let totalCul = newPrice * newVol;\n//     let price = 0;\n//     let volume = 0;\n\n//     try {\n//       if (dataPull.historical.length < 14) {\n//         searchedTicker.vwmaFiveTeen = \"No Data\";\n//       } else {\n//         for (let i = 0; i <= 13; i++) {\n//           price = dataPull.historical[i].close;\n//           volume = dataPull.historical[i].volume;\n//           totalCul += price * volume;\n//           volCul += dataPull.historical[i].volume;\n//         }\n//         const vwmaFiveTeen = totalCul / volCul;\n//         searchedTicker.vwmaFiveTeen = vwmaFiveTeen.toFixed(2);\n//       }\n\n//       // VWMA TWENTY --------------------------------------------------------------------\n\n//       volCul = newestPull[0].volume;\n//       totalCul = newPrice * newVol;\n//       price = 0;\n//       volume = 0;\n\n//       if (dataPull.historical.length < 19) {\n//         searchedTicker.vwmaTwenty = \"No Data\";\n//       } else {\n//         for (let i = 0; i <= 18; i++) {\n//           price = dataPull.historical[i].close;\n//           volume = dataPull.historical[i].volume;\n//           totalCul += price * volume;\n//           volCul += dataPull.historical[i].volume;\n//         }\n//         const vwmaTwenty = totalCul / volCul;\n//         searchedTicker.vwmaTwenty = vwmaTwenty.toFixed(2);\n//       }\n\n//       // VWMA THIRTY --------------------------------------------------------------------\n\n//       volCul = newestPull[0].volume;\n//       totalCul = newPrice * newVol;\n//       price = 0;\n//       volume = 0;\n\n//       if (dataPull.historical.length < 29) {\n//         searchedTicker.vwmaThirty = \"No Data\";\n//       } else {\n//         for (let i = 0; i <= 28; i++) {\n//           price = dataPull.historical[i].close;\n//           volume = dataPull.historical[i].volume;\n//           totalCul += price * volume;\n//           volCul += dataPull.historical[i].volume;\n//         }\n//         const vwmaThirty = totalCul / volCul;\n//         searchedTicker.vwmaThirty = vwmaThirty.toFixed(2);\n//       }\n\n//       // VWMA FIFTY --------------------------------------------------------------------\n\n//       volCul = newestPull[0].volume;\n//       totalCul = newPrice * newVol;\n//       price = 0;\n//       volume = 0;\n\n//       if (dataPull.historical.length < 49) {\n//         searchedTicker.vwmaFifty = \"No Data\";\n//       } else {\n//         for (let i = 0; i <= 48; i++) {\n//           price = dataPull.historical[i].close;\n//           volume = dataPull.historical[i].volume;\n//           totalCul += price * volume;\n//           volCul += dataPull.historical[i].volume;\n//         }\n//         const vwmaFifty = totalCul / volCul;\n//         searchedTicker.vwmaFifty = vwmaFifty.toFixed(2);\n//       }\n\n//       // VWMA ONEHUN --------------------------------------------------------------------\n\n//       volCul = newestPull[0].volume;\n//       totalCul = newPrice * newVol;\n//       price = 0;\n//       volume = 0;\n\n//       if (dataPull.historical.length < 99) {\n//         searchedTicker.vwmaOneHun = \"No Data\";\n//       } else {\n//         for (let i = 0; i <= 98; i++) {\n//           price = dataPull.historical[i].close;\n//           volume = dataPull.historical[i].volume;\n//           totalCul += price * volume;\n//           volCul += dataPull.historical[i].volume;\n//         }\n//         const vwmaOneHun = totalCul / volCul;\n//         searchedTicker.vwmaOneHun = vwmaOneHun.toFixed(2);\n//       }\n\n//       // VWMA TWOHUN --------------------------------------------------------------------\n\n//       volCul = newestPull[0].volume;\n//       totalCul = newPrice * newVol;\n//       price = 0;\n//       volume = 0;\n\n//       if (dataPull.historical.length < 199) {\n//         searchedTicker.vwmaTwoHun = \"No Data\";\n//       } else {\n//         for (let i = 0; i <= 198; i++) {\n//           price = dataPull.historical[i].close;\n//           volume = dataPull.historical[i].volume;\n//           totalCul += price * volume;\n//           volCul += dataPull.historical[i].volume;\n//         }\n//         const vwmaTwoHun = totalCul / volCul;\n//         searchedTicker.vwmaTwoHun = vwmaTwoHun.toFixed(2);\n//       }\n//     } catch (e) {}\n//   }\n//   // EMA FUNCTION ------------------------------------------------------------------------------------------------------------------------------------------\n//   function emaFunction(searchedTicker, dataPull, newestPull, macdCallBack) {\n//     const newPrice = newestPull[0].price;\n\n//     let emaEight = 14;\n//     let emaTwelve = 22;\n//     let emaTwenty = 38;\n//     let emaTwentySix = 50;\n//     let emaFifty = 98;\n//     let emaTwoHun = 398;\n//     let prevDayEmaSub = 0;\n//     let arrEma = [];\n\n//     let macdTwelve = []; // ARRs USED FOR MACD TWELVE HISTORY\n//     let macdTwentySix = []; // ARRs USED FOR MACD TWENTY SIX HISTORY\n\n//     try {\n//       // EMA EIGHT ----------------------------------------------------------------------\n//       if (dataPull.historical.length <= 16) {\n//         searchedTicker.emaEight = \"No Data\";\n//       } else {\n//         while (emaEight >= 15) {\n//           prevDayEmaSub += dataPull.historical[emaEight].close;\n//           emaEight--;\n//         } //CALCULATE EMA HERE TO GET PREVIOUS DAY EMA FOR ACCURATE CURRENT EMA\n//         const subEMA = prevDayEmaSub / 8;\n//         //THIS GETS AN EMA USING SMA AS PREV EMA ----------------------------\n//         const finalSubEma =\n//           (2 / 9) * (dataPull.historical[emaEight].close - subEMA) + subEMA;\n//         arrEma.unshift(finalSubEma);\n//         emaEight--;\n//         while (emaEight >= 0) {\n//           let derp =\n//             (2 / 9) * (dataPull.historical[emaEight].close - arrEma[0]) +\n//             arrEma[0];\n//           arrEma.unshift(derp);\n//           arrEma.pop();\n//           emaEight--;\n//         }\n\n//         const finalEma = (2 / 9) * (newPrice - arrEma[0]) + arrEma[0];\n//         arrEma.unshift(finalEma);\n//         arrEma.pop();\n\n//         searchedTicker.emaEight = arrEma[0].toFixed(2);\n//         arrEma.pop();\n//         prevDayEmaSub = 0;\n//       }\n\n//       // EMA TWELVE ----------------------------------------------------------------------\n//       if (dataPull.historical.length <= 24) {\n//         searchedTicker.emaTwelve = \"No Data\";\n//       } else {\n//         while (emaTwelve >= 11) {\n//           prevDayEmaSub += dataPull.historical[emaTwelve].close;\n//           emaTwelve--;\n//         } //CALCULATE EMA HERE TO GET PREVIOUS DAY EMA FOR ACCURATE CURRENT EMA\n\n//         const subEMA = prevDayEmaSub / 12;\n//         //THIS GETS AN EMA USING SMA AS PREV EMA ----------------------------\n//         const finalSubEma =\n//           (2 / 13) * (dataPull.historical[emaTwelve].close - subEMA) + subEMA;\n//         arrEma.unshift(finalSubEma);\n//         emaTwelve--;\n\n//         while (emaTwelve >= 0) {\n//           let derp =\n//             (2 / 13) * (dataPull.historical[emaTwelve].close - arrEma[0]) +\n//             arrEma[0];\n//           arrEma.unshift(derp);\n//           arrEma.pop();\n//           if (emaTwelve < 8 && emaTwelve >= 0) {\n//             //THIS IF STATEMENT IS TO STORE VARIABLES FOR LATER MACD SIGNAL LINE\n//             macdTwelve.unshift(derp);\n//           }\n//           emaTwelve--;\n//         }\n\n//         const finalEma = (2 / 13) * (newPrice - arrEma[0]) + arrEma[0];\n//         arrEma.unshift(finalEma);\n//         arrEma.pop();\n//         macdTwelve.unshift(finalEma);\n\n//         searchedTicker.emaTwelve = arrEma[0].toFixed(2);\n//         arrEma.pop();\n//         prevDayEmaSub = 0;\n//       }\n\n//       // EMA TWENTY ----------------------------------------------------------------------\n//       if (dataPull.historical.length <= 40) {\n//         searchedTicker.emaTwenty = \"No Data\";\n//       } else {\n//         while (emaTwenty >= 19) {\n//           prevDayEmaSub += dataPull.historical[emaTwenty].close;\n//           emaTwenty--;\n//         } //CALCULATE EMA HERE TO GET PREVIOUS DAY EMA FOR ACCURATE CURRENT EMA\n//         const subEMA = prevDayEmaSub / 20;\n//         //THIS GETS AN EMA USING SMA AS PREV EMA ----------------------------\n//         const finalSubEma =\n//           (2 / 21) * (dataPull.historical[emaTwenty].close - subEMA) + subEMA;\n//         arrEma.unshift(finalSubEma);\n//         emaTwenty--;\n//         while (emaTwenty >= 0) {\n//           let derp =\n//             (2 / 21) * (dataPull.historical[emaTwenty].close - arrEma[0]) +\n//             arrEma[0];\n//           arrEma.unshift(derp);\n//           arrEma.pop();\n//           emaTwenty--;\n//         }\n\n//         const finalEma = (2 / 21) * (newPrice - arrEma[0]) + arrEma[0];\n//         arrEma.unshift(finalEma);\n//         arrEma.pop();\n\n//         searchedTicker.emaTwenty = arrEma[0].toFixed(2);\n//         arrEma.pop();\n//         prevDayEmaSub = 0;\n//       }\n\n//       // EMA TWENTY SIX ----------------------------------------------------------------------\n\n//       if (dataPull.historical.length <= 51) {\n//         searchedTicker.emaTwentySix = \"No Data\";\n//       } else {\n//         while (emaTwentySix >= 25) {\n//           prevDayEmaSub += dataPull.historical[emaTwentySix].close;\n//           emaTwentySix--;\n//         } //CALCULATE EMA HERE TO GET PREVIOUS DAY EMA FOR ACCURATE CURRENT EMA\n//         const subEMA = prevDayEmaSub / 26;\n//         //THIS GETS AN EMA USING SMA AS PREV EMA ----------------------------\n//         const finalSubEma =\n//           (2 / 27) * (dataPull.historical[emaTwentySix].close - subEMA) +\n//           subEMA;\n//         arrEma.unshift(finalSubEma);\n//         emaTwentySix--;\n//         while (emaTwentySix >= 0) {\n//           let derp =\n//             (2 / 27) * (dataPull.historical[emaTwentySix].close - arrEma[0]) +\n//             arrEma[0];\n//           arrEma.unshift(derp);\n//           arrEma.pop();\n//           if (emaTwentySix < 8 && emaTwentySix >= 0) {\n//             //THIS IF STATEMENT IS TO STORE VARIABLES FOR LATER MACD SIGNAL LINE\n//             macdTwentySix.unshift(derp);\n//           }\n//           emaTwentySix--;\n//         }\n\n//         const finalEma = (2 / 27) * (newPrice - arrEma[0]) + arrEma[0];\n//         arrEma.unshift(finalEma);\n//         arrEma.pop();\n//         macdTwentySix.unshift(finalEma);\n\n//         searchedTicker.emaTwentySix = arrEma[0].toFixed(2);\n//         arrEma.pop();\n//         prevDayEmaSub = 0;\n//       }\n\n//       // EMA FIFTY -----------------------------------------------------------------------------\n\n//       if (dataPull.historical.length <= 100) {\n//         searchedTicker.emaFifty = \"No Data\";\n//       } else {\n//         while (emaFifty >= 49) {\n//           prevDayEmaSub += dataPull.historical[emaFifty].close;\n//           emaFifty--;\n//         } //CALCULATE EMA HERE TO GET PREVIOUS DAY EMA FOR ACCURATE CURRENT EMA\n//         const subEMA = prevDayEmaSub / 50;\n//         //THIS GETS AN EMA USING SMA AS PREV EMA ----------------------------\n//         const finalSubEma =\n//           (2 / 51) * (dataPull.historical[emaFifty].close - subEMA) + subEMA;\n//         arrEma.unshift(finalSubEma);\n//         emaFifty--;\n//         while (emaFifty >= 0) {\n//           let derp =\n//             (2 / 51) * (dataPull.historical[emaFifty].close - arrEma[0]) +\n//             arrEma[0];\n//           arrEma.unshift(derp);\n//           arrEma.pop();\n//           emaFifty--;\n//         }\n\n//         const finalEma = (2 / 51) * (newPrice - arrEma[0]) + arrEma[0];\n//         arrEma.unshift(finalEma);\n//         arrEma.pop();\n\n//         searchedTicker.emaFifty = arrEma[0].toFixed(2);\n//         arrEma.pop();\n//         prevDayEmaSub = 0;\n//       }\n\n//       // EMA TWO HUNDRED -----------------------------------------------------------------------------\n\n//       if (dataPull.historical.length <= 400) {\n//         searchedTicker.emaTwoHun = \"No Data\";\n//       } else {\n//         while (emaTwoHun >= 199) {\n//           prevDayEmaSub += dataPull.historical[emaTwoHun].close;\n//           emaTwoHun--;\n//         } //CALCULATE EMA HERE TO GET PREVIOUS DAY EMA FOR ACCURATE CURRENT EMA\n//         const subEMA = prevDayEmaSub / 200;\n//         //THIS GETS AN EMA USING SMA AS PREV EMA ----------------------------\n//         const finalSubEma =\n//           (2 / 201) * (dataPull.historical[emaTwoHun].close - subEMA) + subEMA;\n//         arrEma.unshift(finalSubEma);\n//         emaTwoHun--;\n//         while (emaTwoHun >= 0) {\n//           let derp =\n//             (2 / 201) * (dataPull.historical[emaTwoHun].close - arrEma[0]) +\n//             arrEma[0];\n//           arrEma.unshift(derp);\n//           arrEma.pop();\n//           emaTwoHun--;\n//         }\n\n//         const finalEma = (2 / 201) * (newPrice - arrEma[0]) + arrEma[0];\n//         arrEma.unshift(finalEma);\n//         arrEma.pop();\n\n//         searchedTicker.emaTwoHun = arrEma[0].toFixed(2);\n//         arrEma.pop();\n//         prevDayEmaSub = 0;\n//       }\n//     } catch (e) {}\n\n//     // MACD CALLBACK -----------------------------------------------------------------------------------------------------------------------------------------\n//     macdCallBack(searchedTicker, macdTwelve, macdTwentySix);\n//   }\n//   // MACD FUNCTION -----------------------------------------------------------------------------------------------------------------------------------------\n//   function macdFunction(searchedTicker, arr1, arr2) {\n//     const macd = searchedTicker.emaTwelve - searchedTicker.emaTwentySix;\n//     searchedTicker.macd = macd.toFixed(2);\n//     // CALCULATE SIGNAL LINE ----------------\n//     let averageMacd = [];\n//     let iMacd = 8;\n\n//     try {\n//       while (iMacd >= 0) {\n//         averageMacd.unshift(arr1[iMacd] - arr2[iMacd]);\n//         iMacd--;\n//       }\n//       let averageSum = averageMacd.reduce((a, b) => a + b);\n//       let finalAverageMacd = averageSum / 9;\n//       let macdSignalLine =\n//         (2 / 9) * (searchedTicker.macd - finalAverageMacd) + finalAverageMacd;\n//       searchedTicker.macdSignalLine = macdSignalLine.toFixed(2);\n//       // HISTORGRAM CALC ------------------------------------- IF HISTOGRAM GOES FROM NEGATIVE TO POSITIVE IT IS BULLISH\n//       let histogram = searchedTicker.macd - searchedTicker.macdSignalLine;\n//       searchedTicker.macdHistogram = histogram.toFixed(2);\n//       // FOR NO DATA TO PULL FROM\n//       if (searchedTicker.macdHistogram === \"NaN\") {\n//         searchedTicker.macdHistogram = \"No Data\";\n//       }\n//       if (searchedTicker.macd === \"NaN\") {\n//         searchedTicker.macd = \"No Data\";\n//       }\n//       if (searchedTicker.macdSignalLine === \"NaN\") {\n//         searchedTicker.macdSignalLine = \"No Data\";\n//       }\n//     } catch (e) {}\n//   }\n//   // RSI FUNCTION ------------------------------------------------------------------------------------------------------------------------------------------\n//   function rsiFunction(searchedTicker, dataPull, newestPull) {\n//     const newPrice = newestPull[0].price;\n\n//     let iRSI = 13;\n//     let iRSIAdjusted = 14;\n//     let recentUpper = 0;\n//     let recentDowner = 0;\n//     let upMove = 0;\n//     let downMove = 0;\n//     let pastDownPeriod = 0;\n//     let pastUpPeriod = 0;\n\n//     try {\n//       // CHECK TO SEE IF DATA PULL CAN PULL ENOUGH DATA TO BE EFFECTIVE\n//       if (dataPull.historical.length <= 14) {\n//         searchedTicker.rsi = \"No Data\";\n//       } else {\n//         // LOOP FOR AVERAGE\n//         while (iRSI >= 0) {\n//           if (\n//             dataPull.historical[iRSI].close >\n//             dataPull.historical[iRSIAdjusted].close\n//           ) {\n//             upMove +=\n//               dataPull.historical[iRSI].close -\n//               dataPull.historical[iRSIAdjusted].close;\n//           } else {\n//             downMove +=\n//               dataPull.historical[iRSIAdjusted].close -\n//               dataPull.historical[iRSI].close;\n//           }\n//           iRSI--;\n//           iRSIAdjusted--;\n//         }\n\n//         let averageUp = upMove / 14;\n//         let averageDown = downMove / 14;\n\n//         // MOST RECENT DIFFERENCE\n//         if (newPrice > dataPull.historical[0].close) {\n//           recentUpper = newPrice - dataPull.historical[0].close;\n//         } else {\n//           recentDowner = dataPull.historical[0].close - newPrice;\n//         }\n\n//         pastUpPeriod = (averageUp * 13 + recentUpper) / 14;\n//         pastDownPeriod = (averageDown * 13 + recentDowner) / 14;\n\n//         let rsi = 100 - 100 / (1 + pastUpPeriod / pastDownPeriod);\n//         searchedTicker.rsi = rsi.toFixed(2);\n//       }\n//     } catch (e) {}\n//   }\n//   // STOCHASTIC OSCILLATOR ------------------------------------------------------------------------------------------------------------------------------------------------------------------\n//   function stochOsc1433Function(searchedTicker, dataPull, newestPull) {\n//     let newPrice = newestPull[0].price;\n\n//     let iSO = 13;\n\n//     let soLowHolder = [];\n//     let soHighHolder = [];\n//     let highestHigh = 0;\n//     let lowestLow = 0;\n//     // FIRST %D\n//     let topForm = [];\n//     let bottomForm = [];\n//     // SECOND %D\n//     let topFormTwo = [];\n//     let bottomFormTwo = [];\n//     // THIRD %D\n//     let topFormThree = [];\n//     let bottomFormThree = [];\n//     // HOLDING SET OF %D FOR 14 3 3\n//     let signalLineHolder = [];\n\n//     try {\n//       if (dataPull.historical.length < 18) {\n//         searchedTicker.stochasticK = \"No Data\";\n//       } else {\n//         // GETTING HIGHS AND LOWS OF PERIOD------------------------------------------------------\n\n//         while (iSO >= 0) {\n//           soLowHolder.push(dataPull.historical[iSO].low);\n//           soHighHolder.push(dataPull.historical[iSO].high);\n//           iSO--;\n//         }\n\n//         soHighHolder.push(newPrice);\n//         soLowHolder.push(newPrice);\n\n//         highestHigh = Math.max(...soHighHolder);\n//         lowestLow = Math.min(...soLowHolder);\n\n//         if (lowestLow === newPrice) {\n//           newPrice = dataPull.historical[0].close;\n//         }\n\n//         if (highestHigh === newPrice) {\n//           newPrice = dataPull.historical[0].close;\n//         }\n\n//         topForm.push(newPrice - lowestLow);\n//         bottomForm.push(highestHigh - lowestLow);\n\n//         //FOR %K\n//         searchedTicker.stochasticK = (\n//           ((newPrice - lowestLow) / (highestHigh - lowestLow)) *\n//           100\n//         ).toFixed(2);\n//         // VERY IMPORT - REWORK THE STOCHASTIC NAMES AND THATS WHY ITS UNDEFINDED. REWRITE TO SHOW IN TECHIN\n\n//         // RESET HOLDER AND VARs --------------------------------------------------------\n\n//         iSO = 14;\n//         soLowHolder = [];\n//         soHighHolder = [];\n//         highestHigh = 0;\n//         lowestLow = 0;\n\n//         // GETTING HIGHS AND LOWS OF PERIOD-----------------------------------------------\n\n//         while (iSO >= 1) {\n//           soLowHolder.push(dataPull.historical[iSO].low);\n//           soHighHolder.push(dataPull.historical[iSO].high);\n//           iSO--;\n//         }\n\n//         highestHigh = Math.max(...soHighHolder);\n//         lowestLow = Math.min(...soLowHolder);\n\n//         topForm.push(dataPull.historical[0].close - lowestLow);\n//         bottomForm.push(highestHigh - lowestLow);\n\n//         topFormTwo.push(dataPull.historical[0].close - lowestLow);\n//         bottomFormTwo.push(highestHigh - lowestLow);\n\n//         // RESET HOLDER AND VARs ------------------------------------------------\n\n//         iSO = 15;\n//         soLowHolder = [];\n//         soHighHolder = [];\n//         highestHigh = 0;\n//         lowestLow = 0;\n\n//         // GETTING HIGHS AND LOWS OF PERIOD-----------------------------------\n\n//         while (iSO >= 2) {\n//           soLowHolder.push(dataPull.historical[iSO].low);\n//           soHighHolder.push(dataPull.historical[iSO].high);\n//           iSO--;\n//         }\n//         highestHigh = Math.max(...soHighHolder);\n//         lowestLow = Math.min(...soLowHolder);\n\n//         topForm.push(dataPull.historical[1].close - lowestLow);\n//         bottomForm.push(highestHigh - lowestLow);\n\n//         topFormTwo.push(dataPull.historical[1].close - lowestLow);\n//         bottomFormTwo.push(highestHigh - lowestLow);\n\n//         topFormThree.push(dataPull.historical[1].close - lowestLow);\n//         bottomFormThree.push(highestHigh - lowestLow);\n\n//         // AFTER 3 WE SUM IT UP --------------- TO GET 1 OF THE 3 SMOOTHS FOR 14 3 3------------------------------------------\n\n//         let sumTop = topForm.reduce((a, b) => a + b, 0);\n//         let sumBottom = bottomForm.reduce((a, b) => a + b, 0);\n\n//         let slowD = (sumTop / sumBottom) * 100;\n\n//         // FOR %D\n//         searchedTicker.stochasticD = (slowD / 3).toFixed(2);\n\n//         signalLineHolder.push(slowD);\n\n//         //RESET VARS ---------------------------------------------------------------------\n\n//         iSO = 16;\n//         soLowHolder = [];\n//         soHighHolder = [];\n//         highestHigh = 0;\n//         lowestLow = 0;\n//         sumTop = 0;\n//         sumBottom = 0;\n//         slowD = 0;\n\n//         // GETTING HIGHS AND LOWS OF PERIOD------------------------------------------------\n\n//         while (iSO >= 3) {\n//           soLowHolder.push(dataPull.historical[iSO].low);\n//           soHighHolder.push(dataPull.historical[iSO].high);\n//           iSO--;\n//         }\n//         highestHigh = Math.max(...soHighHolder);\n//         lowestLow = Math.min(...soLowHolder);\n\n//         topFormTwo.push(dataPull.historical[2].close - lowestLow);\n//         bottomFormTwo.push(highestHigh - lowestLow);\n\n//         topFormThree.push(dataPull.historical[2].close - lowestLow);\n//         bottomFormThree.push(highestHigh - lowestLow);\n\n//         // AFTER 3 WE SUM IT UP --------------- TO GET 2 OF THE 3 SMOOTHS FOR 14 3 3------------------------------------------\n\n//         sumTop = topFormTwo.reduce((a, b) => a + b, 0);\n//         sumBottom = bottomFormTwo.reduce((a, b) => a + b, 0);\n\n//         slowD = (sumTop / sumBottom) * 100;\n\n//         signalLineHolder.push(slowD);\n\n//         //RESET VARS ---------------------------------------------\n\n//         iSO = 17;\n//         soLowHolder = [];\n//         soHighHolder = [];\n//         highestHigh = 0;\n//         lowestLow = 0;\n//         sumTop = 0;\n//         sumBottom = 0;\n//         slowD = 0;\n\n//         // GETTING HIGHS AND LOWS OF PERIOD-----------------------------------\n\n//         while (iSO >= 4) {\n//           soLowHolder.push(dataPull.historical[iSO].low);\n//           soHighHolder.push(dataPull.historical[iSO].high);\n//           iSO--;\n//         }\n//         highestHigh = Math.max(...soHighHolder);\n//         lowestLow = Math.min(...soLowHolder);\n\n//         topFormThree.push(dataPull.historical[3].close - lowestLow);\n//         bottomFormThree.push(highestHigh - lowestLow);\n\n//         // AFTER 3 WE SUM IT UP --------------- TO GET 3 OF THE 3 SMOOTHS FOR 14 3 3------------------------------------------\n\n//         sumTop = topFormThree.reduce((a, b) => a + b, 0);\n//         sumBottom = bottomFormThree.reduce((a, b) => a + b, 0);\n\n//         slowD = (sumTop / sumBottom) * 100;\n\n//         signalLineHolder.push(slowD);\n\n//         // ----------- TALLY UP LAST SMOOTHING -------------------------------\n//         const sumStochD = signalLineHolder.reduce((a, b) => a + b, 0);\n//         let smaD = sumStochD / 3;\n\n//         if (smaD < 0) {\n//           smaD *= -1;\n//           searchedTicker.stochasticSignal = smaD.toFixed(2);\n//         } else {\n//           searchedTicker.stochasticSignal = smaD.toFixed(2);\n//         }\n//       }\n//     } catch (e) {}\n//   }\n//   // WILLIAMS %R 14 ------------------------------------------------------------------------------------------------------------------------------------------------------------------\n//   function williamsRFunction(searchedTicker, dataPull, newestPull) {\n//     const newPrice = newestPull[0].price;\n\n//     let highs = [];\n//     let lows = [];\n//     let lowestLow = 0;\n//     let highestHigh = 0;\n//     try {\n//       if (dataPull.historical.length < 14) {\n//         searchedTicker.williams = \"No Data\";\n//       } else {\n//         for (let i = 0; i <= 13; i++) {\n//           highs.push(dataPull.historical[i].high);\n//           lows.push(dataPull.historical[i].low);\n//         }\n\n//         highs.push(newPrice);\n//         lows.push(newPrice);\n\n//         lowestLow = Math.min(...lows);\n//         highestHigh = Math.max(...highs);\n\n//         const williams =\n//           ((highestHigh - dataPull.historical[0].close) /\n//             (highestHigh - lowestLow)) *\n//           -100;\n\n//         searchedTicker.williamsR = williams.toFixed(2);\n//       }\n//     } catch (e) {}\n//   }\n//   // CCI 20 ------------------------------------------------------------------------------------------------------------------------------------------------------------------\n//   function cciFunction(searchedTicker, dataPull, newestPull) {\n//     const newPrice = newestPull[0].price;\n\n//     let tpvCul = 0;\n//     let tpv = [];\n//     let tpvMa = 0;\n//     let tpvCurrent = newPrice;\n//     const recentTpv = newPrice;\n//     try {\n//       if (dataPull.historical.length < 19) {\n//         searchedTicker.cciTwenty = \"No Data\";\n//       } else {\n//         for (let i = 0; i <= 19; i++) {\n//           const { high, close, low } = dataPull.historical[i];\n//           tpv.push(tpvCurrent); // PUSH FIRST NUMBER IN\n//           tpvCurrent = (close + high + low) / 3;\n//         }\n//         // ---- TPV SMA ------------------------\n//         tpvCul = tpv.reduce((a, b) => a + b);\n//         tpvMa = tpvCul / 20;\n//         // TOP HALF OF FORMULA - DIVIDE BY PART TWO\n//         const partOne = recentTpv - tpvMa;\n\n//         const meanD = tpv.map((x) => x - tpvMa);\n//         const meanDMap = meanD.map((x) => Math.abs(x));\n//         const meanDSum = meanDMap.reduce((a, b) => a + b);\n//         const meanDiv = meanDSum / 20;\n//         // PART TWO OF FORMULA --------------\n//         const partTwo = meanDiv * 0.015;\n//         // CCI ------------------------------\n//         const cci = partOne / partTwo;\n\n//         searchedTicker.cciTwenty = cci.toFixed(2);\n//       }\n//     } catch (e) {}\n//   }\n//   // BOLLINGER BANDS ------------------------------------------------------------------------------------------------------------------------------------------------------------------\n//   function bollingerBandsFunction(searchedTicker, dataPull, newestPull) {\n//     const newPrice = newestPull[0].price;\n\n//     let smaCul = 0;\n//     let closeHolder = [];\n//     try {\n//       if (dataPull.historical.length < 19) {\n//         searchedTicker.bbUpper = \"No Data\";\n//         searchedTicker.bbLower = \"No Data\";\n//         searchedTicker.bbMiddle = \"No Data\";\n//       } else {\n//         let closeP = newPrice;\n//         for (let i = 0; i <= 19; i++) {\n//           closeHolder.push(closeP);\n//           smaCul += closeP;\n//           closeP = dataPull.historical[i].close;\n//         }\n//         // STANDARD DEVIATION CALC --------------------------------\n//         const smaTwenty = smaCul / 20;\n\n//         const priceAdj = closeHolder.map((x) => x - smaTwenty);\n\n//         const priceAdjAbs = priceAdj.map((x) => Math.abs(x));\n\n//         const priceAdjSqrt = priceAdjAbs.map((x) => x * x);\n\n//         const partOneDev = priceAdjSqrt.reduce((a, b) => a + b);\n\n//         const partTwoDev = partOneDev / 20;\n//         const standardDev = Math.sqrt(partTwoDev);\n//         // BB BAND CALC --------------------------------------------\n//         const bbUpper = smaTwenty + standardDev * 2;\n//         const bbLower = smaTwenty - standardDev * 2;\n\n//         const bbPercent = (newPrice - bbLower) / (bbUpper - bbLower);\n\n//         searchedTicker.bbUpper = bbUpper.toFixed(2);\n//         searchedTicker.bbLower = bbLower.toFixed(2);\n//         searchedTicker.bbMiddle = smaTwenty.toFixed(2);\n//         searchedTicker.bbPercent = bbPercent.toFixed(2);\n//       }\n//     } catch (e) {}\n//   }\n//   // VWAP FUNCTION ------------------------------------------------------------------------------------------------------------------------------------------\n//   function vwapFunction(searchedTicker, dataPull) {\n//     // ----------- VWAP CALUC -------------------------------------------\n//     let dayLengthPeriod = 0;\n//     let tpvCul = 0;\n//     let volumeCul = 0;\n//     let tempVWAP = []; // HOLD VWAP PERIOD - TAKES FROM 0 INDEX FOR MOST CURRENT\n\n//     try {\n//       // -------------THIS IS FOR GETTING THE DAY LENGTH FOR VWAP\n//       while (dataPull[dayLengthPeriod].date.slice(0, 10) == newDateString) {\n//         dayLengthPeriod++;\n//       }\n\n//       // --------------------THIS IS FOR CALCULATING THE VWAP AND PUSHING TO\n\n//       for (let i = 0; i < dayLengthPeriod; i++) {\n//         const { volume, high, close, low, date } = dataPull[i];\n//         let tpv = (high + low + close) / 3;\n//         if (date.slice(0, 10) == newDateString) {\n//           tpvCul += tpv * volume;\n//           volumeCul += volume;\n//         }\n//         var vwapFinal = tpvCul / volumeCul; // --------- THIS IS VWAP!!!!!!!!\n//         tempVWAP.unshift(vwapFinal); //ADD VWAP FRONT OF ARR\n//       }\n//       let vwap = tempVWAP[0].toFixed(2);\n//       searchedTicker.vwap = vwap;\n//     } catch (e) {}\n//   }\n//   // VOLUME FUNCTION ------------------------------------------------------------------------------------------------------------------------------------------\n//   function setVolume(searchedTicker, dataPull, newestPull) {\n//     // SET RECENT YESTERDAY VOLUME\n//     if (dataPull.historical.length <= 0) {\n//       searchedTicker.yesterdayVolume = 0;\n//     } else {\n//       searchedTicker.yesterdayVolume = dataPull.historical[0].volume;\n//       if (marketDay == 0 || marketDay == 6) {\n//         searchedTicker.yesterdayVolume = dataPull.historical[1].volume;\n//       }\n\n//       if (marketDay >= 1 && marketDay <= 5 && timeNum < 930) {\n//         searchedTicker.yesterdayVolume = dataPull.historical[1].volume;\n//       }\n\n//       if (timeNum > 1830) {\n//         searchedTicker.yesterdayVolume = dataPull.historical[1].volume;\n//       }\n//     }\n//     // SET RECENT VOLUME\n//     if (newestPull.length <= 0) {\n//       searchedTicker.volume = 0;\n//     } else {\n//       searchedTicker.volume = newestPull[0].volume;\n//     }\n//   }\n\n//   // WHERE THE MAGIC HAPPENS\n//   // TA FUNCTION ---------------------------------------------------------------------\n//   async function technicalIndicators(symbol, searchedSymbol, callBack) {\n//     let j = 0;\n//     try {\n//       while (j < 1) {\n//         // LOOP FOR TECHNICAL SEARCHED TICKER\n//         try {\n//           // ------ FETCH NASDAQ\n//           const resTwo = await fetch(\n//             \"https://financialmodelingprep.com/api/v3/quotes/nasdaq?apikey=4d4593bc9e6bc106ee9d1cbd6400b218\"\n//           );\n//           const dataNas = await resTwo.json();\n\n//           for (let i = 0; i < dataNas.length; i++) {\n//             if (dataNas[i].symbol == symbol) {\n//               searchedSymbol = dataNas[i];\n//               break;\n//             }\n//           }\n\n//           // ------ FETCH NYSE\n//           const res = await fetch(\n//             \"https://financialmodelingprep.com/api/v3/quotes/nyse?apikey=4d4593bc9e6bc106ee9d1cbd6400b218\"\n//           );\n//           const dataNyse = await res.json();\n\n//           for (let i = 0; i < dataNyse.length; i++) {\n//             if (dataNyse[i].symbol == symbol) {\n//               searchedSymbol = dataNyse[i];\n//               break;\n//             }\n//           }\n//         } catch (e) {\n//           alert(\n//             \"Unable to locate stock ticker. Please check your input and try again!\"\n//           );\n//         }\n//         // WILL BREAK OUT IF SYMBOL DOESNT EXIST\n//         if (searchedSymbol.price == undefined) {\n//           alert(\n//             \"Unable to locate stock ticker. Please check your input and try again!\"\n//           );\n//           return;\n//         }\n//         //THIS PULL IS FOR CLOSE PRICES TO CALC TAs PAST CLOSE DATA //\n//         const resSMA = await fetch(\n//           `https://financialmodelingprep.com/api/v3/historical-price-full/${symbol}?apikey=4d4593bc9e6bc106ee9d1cbd6400b218`\n//         );\n//         const dataSMA = await resSMA.json(); // SMA PULL USED FOR OTHER CALCS\n//         // ERROR CHECK FOR EMPTY PULL\n//         if (\n//           Object.keys(dataSMA).length === 0 &&\n//           dataSMA.constructor === Object\n//         ) {\n//           alert(\n//             \"There may be a technical issue with this ticker. Please check your input and try again later!\"\n//           );\n//           return;\n//         }\n\n//         //THIS PULL IS FOR OSCILLATORS ALL CURRENT CLOSE DATA\n//         const resOscPulled = await fetch(\n//           `https://financialmodelingprep.com/api/v3/quote-short/${symbol}?apikey=4d4593bc9e6bc106ee9d1cbd6400b218`\n//         );\n//         const dataRecentPulled = await resOscPulled.json();\n//         // ERROR CHECK FOR EMPTY PULL\n//         if (\n//           Object.keys(dataRecentPulled).length === 0 &&\n//           dataRecentPulled.constructor === Object\n//         ) {\n//           alert(\n//             \"There may be a technical issue with this ticker. Please check your input and try again later!\"\n//           );\n//           return;\n//         }\n\n//         // VWAP ------------------------------------------------------------------------------------------------------------------------------------------------\n//         const resVWAP = await fetch(\n//           `https://financialmodelingprep.com/api/v3/historical-chart/5min/${symbol}?apikey=4d4593bc9e6bc106ee9d1cbd6400b218`\n//         );\n//         const dataVWAP = await resVWAP.json();\n\n//         // ERROR CHECK FOR EMPTY PULL\n//         if (\n//           Object.keys(dataVWAP).length === 0 &&\n//           dataVWAP.constructor === Object\n//         ) {\n//           alert(\n//             \"There may be a technical issue with this ticker. Please check your input and try again later!\"\n//           );\n//           return;\n//         }\n\n//         vwapFunction(searchedSymbol, dataVWAP);\n\n//         // SMA -----------------------------------------------------------------------------------------------------------------------------------------------------------------------\n//         smaFunction(searchedSymbol, dataSMA, dataRecentPulled);\n\n//         // WMA ------------------------------------------------------------------------------------------------------------------------------------------------------------------\n//         wmaFunction(searchedSymbol, dataSMA, dataRecentPulled);\n\n//         // VWMA ------------------------------------------------------------------------------------------------------------------------------------------------------------------\n//         vwmaFunction(searchedSymbol, dataSMA, dataRecentPulled);\n\n//         // EMA WITH MACD CALLBACK ------------------------------------------------------------------------------------------------------------------------------------------\n//         emaFunction(searchedSymbol, dataSMA, dataRecentPulled, macdFunction);\n\n//         // RSI ------------------------------------------------------------------------------------------------------------------------------------------------------------------\n//         rsiFunction(searchedSymbol, dataSMA, dataRecentPulled);\n\n//         // STOCHASTIC OSCILLATOR ------------------------------------------------------------------------------------------------------------------------------------------------------------------\n//         stochOsc1433Function(searchedSymbol, dataSMA, dataRecentPulled);\n\n//         // WILLIAMS %R 14 ------------------------------------------------------------------------------------------------------------------------------------------------------------------\n//         williamsRFunction(searchedSymbol, dataSMA, dataRecentPulled);\n\n//         // CCI 20 ------------------------------------------------------------------------------------------------------------------------------------------------------------------\n//         cciFunction(searchedSymbol, dataSMA, dataRecentPulled);\n\n//         // BOLLINGER BANDS ------------------------------------------------------------------------------------------------------------------------------------------------------------------\n//         bollingerBandsFunction(searchedSymbol, dataSMA, dataRecentPulled);\n\n//         // SET VOLUME PROPERTIES\n//         setVolume(searchedSymbol, dataSMA, dataRecentPulled);\n\n//         j++; // UPDATE WHILE LOOP\n//       } // THIS IS THE END OF LOOP\n//     } catch (e) {\n//       // END OF TRY\n//     }\n//     const returnedData = await callBack(searchedSymbol); // BUILD HTML TO DISPLAY\n//     return returnedData;\n//   }\n//   // BUILD OUT HTML ------------------------------------------------------\n//   async function buildSearchTech(obj) {\n//     let {\n//       symbol,\n//       price,\n//       change,\n//       changesPercentage,\n//       avgVolume,\n//       volume,\n//       yesterdayVolume,\n//       vwap,\n//       smaFiveTeen,\n//       smaTwenty,\n//       smaThirty,\n//       smaFifty,\n//       smaOneHun,\n//       smaTwoHun,\n//       emaEight,\n//       emaTwelve,\n//       emaTwenty,\n//       emaTwentySix,\n//       emaFifty,\n//       emaTwoHun,\n//       wmaFiveTeen,\n//       wmaTwenty,\n//       wmaThirty,\n//       wmaFifty,\n//       wmaOneHun,\n//       wmaTwoHun,\n//       vwmaFiveTeen,\n//       vwmaTwenty,\n//       vwmaThirty,\n//       vwmaFifty,\n//       vwmaOneHun,\n//       vwmaTwoHun,\n//       macd,\n//       macdHistogram,\n//       macdSignalLine,\n//       rsi,\n//       stochasticD,\n//       stochasticK,\n//       stochasticSignal,\n//       cciTwenty,\n//       bbMiddle,\n//       bbLower,\n//       bbUpper,\n//       bbPercent,\n//       williamsR,\n//     } = obj;\n\n//     let directionArrow = \"up\";\n\n//     // SETS ARROW FOR UP AND DOWN --------------\n//     if (changesPercentage < 0) {\n//       obj.directionArrow = \"down\";\n//     } else {\n//       obj.directionArrow = \"up\";\n//     }\n//     // CHANGE TO POSITIVE BUT ARROW POINTS DOWN OR UP ----------\n//     if (change < 0) {\n//       obj.change = change * -1;\n//     }\n\n//     // ADJUST TO FIXED --------------------------------------------------------\n\n//     price = price.toFixed(2);\n\n//     change = change.toFixed(2);\n\n//     changesPercentage = changesPercentage.toFixed(2);\n\n//     // VOLUME INCREASE TODAY ----------\n//     let volumeIncrease = 0;\n\n//     if (volume > avgVolume) {\n//       let increase = volume - avgVolume;\n//       volumeIncrease = (increase / avgVolume) * 100;\n//     } else {\n//       let decrease = avgVolume - volume;\n//       volumeIncrease = (decrease / avgVolume) * -100;\n//     }\n\n//     volumeIncrease = volumeIncrease.toFixed(2);\n\n//     // TO GET AVERAGE DAILY VOLUME FOR YESTERDAY ----------------\n//     let yesterdayVolIncrease = 0;\n\n//     if (yesterdayVolume > avgVolume) {\n//       let increase = yesterdayVolume - avgVolume;\n//       yesterdayVolIncrease = (increase / avgVolume) * 100;\n//     } else {\n//       let decrease = avgVolume - yesterdayVolume;\n//       yesterdayVolIncrease = (decrease / avgVolume) * -100;\n//     }\n\n//     yesterdayVolIncrease = yesterdayVolIncrease.toFixed(2);\n\n//     // NaN CHECK ----------------------------------------\n//     if (isNaN(yesterdayVolIncrease)) {\n//       obj.yesterdayVolIncrease = \"No Data\";\n//     }\n\n//     // ADJUST TO POSITIVE\n//     if (obj.stochasticD < 0) {\n//       obj.stochasticD = obj.stochasticD * -1;\n//     }\n//     if (obj.stochasticK < 0) {\n//       obj.stochasticK = obj.stochasticK * -1;\n//     }\n//     if (obj.stochasticD < 0) {\n//       obj.stochasticD = obj.stochasticD * -1;\n//     }\n//     if (obj.stochasticK < 0) {\n//       obj.stochasticK = obj.stochasticK * -1;\n//     }\n\n//     // ADJUST CERTAIN PARTS TO GIVE RIGHT PROMPT IF UNDEFINED\n\n//     if (obj.avgVolume == undefined) {\n//       obj.avgVolume = \"No Data\";\n//     }\n\n//     if (obj.volume == undefined) {\n//       obj.volume = \"No Data\";\n//     }\n\n//     if (obj.volumeIncrease == undefined) {\n//       obj.volumeIncrease = \"No Data\";\n//     }\n\n//     if (obj.yesterdayVolume == undefined) {\n//       obj.yesterdayVolume = \"No Data\";\n//     }\n\n//     if (obj.smaFiveTeen == undefined) {\n//       obj.smaFiveTeen = \"No Data\";\n//     }\n\n//     if (obj.smaTwenty == undefined) {\n//       obj.smaTwenty = \"No Data\";\n//     }\n\n//     if (obj.smaThirty == undefined) {\n//       obj.smaThirty = \"No Data\";\n//     }\n\n//     if (obj.smaFifty == undefined) {\n//       obj.smaFifty = \"No Data\";\n//     }\n\n//     if (obj.smaOneHun == undefined) {\n//       obj.smaOneHun = \"No Data\";\n//     }\n\n//     if (obj.smaTwoHun == undefined) {\n//       obj.smaTwoHun = \"No Data\";\n//     }\n\n//     if (obj.emaEight == undefined) {\n//       obj.emaEight = \"No Data\";\n//     }\n\n//     if (obj.emaTwelve == undefined) {\n//       obj.emaTwelve = \"No Data\";\n//     }\n\n//     if (obj.emaTwenty == undefined) {\n//       obj.emaTwenty = \"No Data\";\n//     }\n\n//     if (obj.emaTwentySix == undefined) {\n//       obj.emaTwentySix = \"No Data\";\n//     }\n\n//     if (obj.emaFifty == undefined) {\n//       obj.emaFifty = \"No Data\";\n//     }\n\n//     if (obj.emaTwoHun == undefined) {\n//       obj.emaTwoHun = \"No Data\";\n//     }\n\n//     if (obj.wmaFiveTeen == undefined) {\n//       obj.wmaFiveTeen = \"No Data\";\n//     }\n\n//     if (obj.wmaTwenty == undefined) {\n//       obj.wmaTwenty = \"No Data\";\n//     }\n\n//     if (obj.wmaThirty == undefined) {\n//       obj.wmaThirty = \"No Data\";\n//     }\n\n//     if (obj.wmaFifty == undefined) {\n//       obj.wmaFifty = \"No Data\";\n//     }\n\n//     if (obj.wmaOneHun == undefined) {\n//       obj.wmaOneHun = \"No Data\";\n//     }\n\n//     if (obj.wmaTwoHun == undefined) {\n//       obj.wmaTwoHun = \"No Data\";\n//     }\n\n//     if (obj.vwmaFiveTeen == undefined) {\n//       obj.vwmaFiveTeen = \"No Data\";\n//     }\n//     if (obj.vwmaTwenty == undefined) {\n//       obj.vwmaTwenty = \"No Data\";\n//     }\n//     if (obj.vwmaThirty == undefined) {\n//       obj.vwmaThirty = \"No Data\";\n//     }\n//     if (obj.vwmaFifty == undefined) {\n//       obj.vwmaFifty = \"No Data\";\n//     }\n//     if (obj.vwmaOneHun == undefined) {\n//       obj.vwmaOneHun = \"No Data\";\n//     }\n//     if (obj.vwmaTwoHun == undefined) {\n//       obj.vwmaTwoHun = \"No Data\";\n//     }\n\n//     if (obj.vwap == undefined) {\n//       obj.vwap = \"No Data\";\n//     }\n\n//     if (obj.macd == undefined) {\n//       obj.macd = \"No Data\";\n//     }\n\n//     if (obj.rsi == undefined) {\n//       obj.rsi = \"No Data\";\n//     }\n//     if (obj.cciTwenty == undefined) {\n//       obj.cciTwenty = \"No Data\";\n//     }\n\n//     if (obj.williamsR == undefined) {\n//       obj.williamsR = \"No Data\";\n//     }\n\n//     if (obj.stochasticK == undefined) {\n//       obj.stochasticK = \"No Data\";\n//     }\n//     if (obj.stochasticD == undefined) {\n//       obj.stochasticD = \"No Data\";\n//     }\n//     if (obj.stochasticSignal == undefined) {\n//       obj.stochasticSignal = \"No Data\";\n//     }\n\n//     if (obj.bbMiddle == undefined) {\n//       obj.bbMiddle = \"No Data\";\n//     }\n//     if (obj.bbLower == undefined) {\n//       obj.bbLower = \"No Data\";\n//     }\n//     if (obj.bbUpper == undefined) {\n//       obj.bbUpper = \"No Data\";\n//     }\n//     if (obj.bbPercent == undefined) {\n//       obj.bbPercent = \"No Data\";\n//     }\n\n//     // ADJUST TO POSITIVE\n//     if (obj.stochasticD < 0) {\n//       obj.stochasticD = obj.stochasticD * -1;\n//     }\n//     if (obj.stochasticK < 0) {\n//       obj.stochasticK = obj.stochasticK * -1;\n//     }\n//     if (obj.stochasticD < 0) {\n//       obj.stochasticD = obj.stochasticD * -1;\n//     }\n//     if (obj.stochasticK < 0) {\n//       obj.stochasticK = obj.stochasticK * -1;\n//     }\n\n//     obj.volumeIncreaseToday = volumeIncrease;\n//     obj.volumeIncreaseYesterday = yesterdayVolIncrease;\n//     obj.volumeYesterday = yesterdayVolume;\n\n//     // SET BOX SHADOW OF BULL AND BEAR\n//     // if (changesPercentage < 0) {\n//     //   document.querySelector(\".search-symbol-box\").style.boxShadow =\n//     //     \"inset 0px 2px 3px var(--bear-market-color), inset 0px 2px 2px var(--bear-market-color)\";\n//     // } else if (changesPercentage > 0) {\n//     //   document.querySelector(\".search-symbol-box\").style.boxShadow =\n//     //     \"inset 0px 2px 3px var(--bull-market-color), inset 0px 2px 2px var(--bull-market-color)\";\n//     // }\n\n//     const returnedData = obj;\n//     return returnedData;\n//   }\n\n//   const returnedData = await technicalIndicators(\n//     symbol,\n//     symbolObj,\n//     buildSearchTech\n//   );\n//   return returnedData;\n};\n"]},"metadata":{},"sourceType":"module"}