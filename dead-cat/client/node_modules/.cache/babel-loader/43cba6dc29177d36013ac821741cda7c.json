{"ast":null,"code":"var _jsxFileName = \"/Users/austinolijar/Desktop/DeadCatReact/dead-cat/src/components/PortfolioHolder.js\",\n    _s = $RefreshSig$();\n\nimport PortfolioItem from \"./PortfolioItem\";\nimport { useState, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst PortfolioHolder = props => {\n  _s();\n\n  const [storageArr, setStorageArr] = useState([]);\n  const [isEmpty, setIsEmpty] = useState(true);\n  useEffect(() => {\n    // if (props.newStorage === false) return; // WILL STOP FROM RUNNING\n    setStorageArr(JSON.parse(localStorage.getItem(\"deadCatPortfolio\")));\n  }, [props.newStorage]);\n\n  const handleDeleteStorageItem = id => {\n    setStorageArr(storageArr.filter(item => item.id !== id));\n    console.log(storageArr, 'id delete');\n    localStorage.setItem(\"deadCatPortfolio\", JSON.stringify(storageArr));\n  }; // CHECKS TO SEE IF STORAGE IS EMPTY ON LOAD ==============\n\n\n  useEffect(() => {\n    const storage = JSON.parse(localStorage.getItem(\"deadCatPortfolio\"));\n    console.log(storage, 'on load');\n\n    if (storage === null && storage === []) {\n      setIsEmpty(true);\n    } else {\n      setIsEmpty(false);\n      setStorageArr(storage);\n      console.log(storage, 'on load else');\n    }\n  }, []); //   useEffect(() => {\n  //     console.log('before')\n  //     const storage = JSON.parse(localStorage.getItem(\"deadCatPortfolio\"));\n  //     if (storage === null && storage === []) {\n  //       setIsEmpty(true);\n  //       console.log(storage)\n  //       return\n  //     }\n  //     console.log('after')\n  //     localStorage.setItem(\"deadCatPortfolio\", JSON.stringify(storage));\n  //   }, [storageArr])\n\n  if (isEmpty) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"portfolio-holder\",\n      children: [/*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Empty\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: props.handleClearPortfolio,\n        tabIndex: props.activePortfolio ? -1 : 0,\n        className: \"clear-portfolio\",\n        children: \"Clear Entire Portfolio\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 5\n    }, this);\n  } else {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"portfolio-holder\",\n      children: [/*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }, this), storageArr.map(data => /*#__PURE__*/_jsxDEV(PortfolioItem, {\n        handleDeleteStorageItem: handleDeleteStorageItem,\n        data: data\n      }, data.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 11\n      }, this)), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: props.handleClearPortfolio,\n        tabIndex: props.activePortfolio ? -1 : 0,\n        className: \"clear-portfolio\",\n        children: \"Clear Entire Portfolio\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this);\n  }\n};\n\n_s(PortfolioHolder, \"McYGSflIA7iXvdHQCVeHGx5+oog=\");\n\n_c = PortfolioHolder;\nexport default PortfolioHolder;\n\nvar _c;\n\n$RefreshReg$(_c, \"PortfolioHolder\");","map":{"version":3,"sources":["/Users/austinolijar/Desktop/DeadCatReact/dead-cat/src/components/PortfolioHolder.js"],"names":["PortfolioItem","useState","useEffect","PortfolioHolder","props","storageArr","setStorageArr","isEmpty","setIsEmpty","JSON","parse","localStorage","getItem","newStorage","handleDeleteStorageItem","id","filter","item","console","log","setItem","stringify","storage","handleClearPortfolio","activePortfolio","map","data"],"mappings":"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","sourcesContent":["import PortfolioItem from \"./PortfolioItem\";\nimport { useState, useEffect } from \"react\";\n\nconst PortfolioHolder = (props) => {\n  const [storageArr, setStorageArr] = useState([]);\n  const [isEmpty, setIsEmpty] = useState(true);\n\n  useEffect(() => {\n    // if (props.newStorage === false) return; // WILL STOP FROM RUNNING\n    setStorageArr(JSON.parse(localStorage.getItem(\"deadCatPortfolio\")));\n  }, [props.newStorage]);\n\n  const handleDeleteStorageItem = (id) => {\n    setStorageArr(storageArr.filter((item) => item.id !== id));\n    console.log(storageArr, 'id delete')\n    localStorage.setItem(\"deadCatPortfolio\", JSON.stringify(storageArr))\n\n  };\n\n// CHECKS TO SEE IF STORAGE IS EMPTY ON LOAD ==============\nuseEffect(() => {\n  const storage = JSON.parse(localStorage.getItem(\"deadCatPortfolio\"));\n  console.log(storage, 'on load')\n  if (storage === null && storage === []) {\n    setIsEmpty(true);\n  } else {\n    setIsEmpty(false);\n    setStorageArr(storage)\n    console.log(storage, 'on load else')\n  }\n}, [])\n\n\n//   useEffect(() => {\n//     console.log('before')\n\n//     const storage = JSON.parse(localStorage.getItem(\"deadCatPortfolio\"));\n//     if (storage === null && storage === []) {\n//       setIsEmpty(true);\n//       console.log(storage)\n//       return\n//     }\n//     console.log('after')\n//     localStorage.setItem(\"deadCatPortfolio\", JSON.stringify(storage));\n//   }, [storageArr])\n\n\nif (isEmpty) {\n  return (\n    <div className=\"portfolio-holder\">\n      <hr></hr>\n\n      <p>Empty</p>\n\n      <button\n        onClick={props.handleClearPortfolio}\n        tabIndex={props.activePortfolio ? -1 : 0}\n        className=\"clear-portfolio\"\n      >\n        Clear Entire Portfolio\n      </button>\n    </div>\n  );\n  } else {\n    return (\n      <div className=\"portfolio-holder\">\n        <hr></hr>\n\n        {storageArr.map((data) => (\n          <PortfolioItem\n            handleDeleteStorageItem={handleDeleteStorageItem}\n            key={data.id}\n            data={data}\n          />\n        ))}\n\n        <button\n          onClick={props.handleClearPortfolio}\n          tabIndex={props.activePortfolio ? -1 : 0}\n          className=\"clear-portfolio\"\n        >\n          Clear Entire Portfolio\n        </button>\n      </div>\n    );\n  }\n};\n\nexport default PortfolioHolder;\n"]},"metadata":{},"sourceType":"module"}