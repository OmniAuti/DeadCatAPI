{"ast":null,"code":"// SMA FUNCTION ------------------------------------------------------------------------------------------------------------------------------------------\nfunction smaFunction(chartArr, dataPull, newestPull, num) {\n  let culSMA = 0; // ------- SMA INDEX IS - 2 FROM TOTAL BECAUSE OF 0 INDEX = 1 AND ADDING RECENT PRICE DATA --------------------\n\n  let fiveTeenSMA = 13;\n  let twentySMA = 18;\n  let thirtySMA = 28;\n  let fiftySMA = 48;\n  let hunSMA = 98;\n  let twoHunSMA = 198;\n\n  try {\n    const todayPricePull = newestPull[0].price; // ------------- 15 DAY SMA -------------------------------\n\n    if (dataPull.historical.length <= 13) {\n      chartArr[num].smaFiveTeen = \"No Data\";\n    } else {\n      while (fiveTeenSMA >= 0) {\n        culSMA += dataPull.historical[fiveTeenSMA].close;\n        fiveTeenSMA--;\n      }\n\n      let smaFiveResult = (culSMA + todayPricePull) / 15;\n      chartArr[num].smaFiveTeen = smaFiveResult.toFixed(2);\n      culSMA = 0;\n    } // ------------- 20 DAY SMA -------------------------------\n\n\n    if (dataPull.historical.length <= 19) {\n      chartArr[num].smaTwenty = \"No Data\";\n    } else {\n      while (twentySMA >= 0) {\n        culSMA += dataPull.historical[twentySMA].close;\n        twentySMA--;\n      }\n\n      let smaTwentyResult = (culSMA + todayPricePull) / 20;\n      chartArr[num].smaTwenty = smaTwentyResult.toFixed(2);\n      culSMA = 0;\n    } // ------------- 30 DAY SMA -------------------------------\n\n\n    if (dataPull.historical.length <= 29) {\n      chartArr[num].smaThirty = \"No Data\";\n    } else {\n      while (thirtySMA >= 0) {\n        culSMA += dataPull.historical[thirtySMA].close;\n        thirtySMA--;\n      }\n\n      let smaThirtyResult = (culSMA + todayPricePull) / 30;\n      chartArr[num].smaThirty = smaThirtyResult.toFixed(2);\n      culSMA = 0;\n    } // ------------- 50 DAY SMA -------------------------------\n\n\n    if (dataPull.historical.length <= 49) {\n      chartArr[num].smaFifty = \"No Data\";\n    } else {\n      while (fiftySMA >= 0) {\n        culSMA += dataPull.historical[fiftySMA].close;\n        fiftySMA--;\n      }\n\n      let smaFiftyResult = (culSMA + todayPricePull) / 50;\n      chartArr[num].smaFifty = smaFiftyResult.toFixed(2);\n      culSMA = 0;\n    } // ------------- 100 DAY SMA -------------------------------\n\n\n    if (dataPull.historical.length <= 99) {\n      chartArr[num].smaOneHun = \"No Data\";\n    } else {\n      while (hunSMA >= 0) {\n        culSMA += dataPull.historical[hunSMA].close;\n        hunSMA--;\n      }\n\n      let smaOneHunResult = (culSMA + todayPricePull) / 100;\n      chartArr[num].smaOneHun = smaOneHunResult.toFixed(2);\n      culSMA = 0;\n    } // ------------- 200 DAY SMA -------------------------------\n\n\n    if (dataPull.historical.length <= 199) {\n      chartArr[num].smaTwoHun = \"No Data\";\n    } else {\n      while (twoHunSMA >= 0) {\n        culSMA += dataPull.historical[twoHunSMA].close;\n        twoHunSMA--;\n      }\n\n      let smaTwoHunResult = (culSMA + todayPricePull) / 200;\n      chartArr[num].smaTwoHun = smaTwoHunResult.toFixed(2);\n      culSMA = 0;\n    }\n  } catch (e) {}\n} // WMA FUNCTION ------------------------------------------------------------------------------------------------------------------------------------------\n\n\nfunction wmaFunction(chartArr, dataPull, newestPull, num) {\n  // WMA FiveTeen --------------------------------------------------------------------\n  let weight = 14;\n  let wmaInterval = 0;\n  let iWma = 15;\n\n  try {\n    let wmaCul = newestPull[0].price * 15;\n\n    if (dataPull.historical.length < 14) {\n      chartArr[num].wmaFiveTeen = \"No Data\";\n    } else {\n      for (let i = 0; i <= 13; i++) {\n        wmaInterval = dataPull.historical[i].close * weight;\n        wmaCul += wmaInterval;\n        iWma += weight;\n        weight--;\n      }\n\n      const wmaFiveTeen = wmaCul / iWma;\n      chartArr[num].wmaFiveTeen = wmaFiveTeen.toFixed(2);\n    } // WMA Twenty --------------------------------------------------------------------\n\n\n    wmaCul = newestPull[0].price * 20;\n    weight = 19;\n    wmaInterval = 0;\n    iWma = 20;\n\n    if (dataPull.historical.length < 19) {\n      chartArr[num].wmaTwenty = \"No Data\";\n    } else {\n      for (let i = 0; i <= 18; i++) {\n        wmaInterval = dataPull.historical[i].close * weight;\n        wmaCul += wmaInterval;\n        iWma += weight;\n        weight--;\n      }\n\n      const wmaTwenty = wmaCul / iWma;\n      chartArr[num].wmaTwenty = wmaTwenty.toFixed(2);\n    } // WMA THIRTY --------------------------------------------------------------------\n\n\n    wmaCul = newestPull[0].price * 30;\n    weight = 29;\n    wmaInterval = 0;\n    iWma = 30;\n\n    if (dataPull.historical.length < 30) {\n      chartArr[num].wmaThirty = \"No Data\";\n    } else {\n      for (let i = 0; i <= 28; i++) {\n        wmaInterval = dataPull.historical[i].close * weight;\n        wmaCul += wmaInterval;\n        iWma += weight;\n        weight--;\n      }\n\n      const wmaThirty = wmaCul / iWma;\n      chartArr[num].wmaThirty = wmaThirty.toFixed(2);\n    } // WMA FIFTY --------------------------------------------------------------------\n\n\n    wmaCul = newestPull[0].price * 50;\n    weight = 49;\n    wmaInterval = 0;\n    iWma = 50;\n\n    if (dataPull.historical.length < 50) {\n      chartArr[num].wmaFifty = \"No Data\";\n    } else {\n      for (let i = 0; i <= 48; i++) {\n        wmaInterval = dataPull.historical[i].close * weight;\n        wmaCul += wmaInterval;\n        iWma += weight;\n        weight--;\n      }\n\n      const wmaFifty = wmaCul / iWma;\n      chartArr[num].wmaFifty = wmaFifty.toFixed(2);\n    } // WMA ONE HUNDRED --------------------------------------------------------------------\n\n\n    wmaCul = newestPull[0].price * 100;\n    weight = 99;\n    wmaInterval = 0;\n    iWma = 100;\n\n    if (dataPull.historical.length < 100) {\n      chartArr[num].wmaOneHun = \"No Data\";\n    } else {\n      for (let i = 0; i <= 98; i++) {\n        wmaInterval = dataPull.historical[i].close * weight;\n        wmaCul += wmaInterval;\n        iWma += weight;\n        weight--;\n      }\n\n      const wmaOneHun = wmaCul / iWma;\n      chartArr[num].wmaOneHun = wmaOneHun.toFixed(2);\n    } // WMA TWO HUNDRED --------------------------------------------------------------------\n\n\n    wmaCul = newestPull[0].price * 200;\n    weight = 199;\n    wmaInterval = 0;\n    iWma = 200;\n\n    if (dataPull.historical.length < 200) {\n      chartArr[num].wmaTwoHun = \"No Data\";\n    } else {\n      for (let i = 0; i <= 198; i++) {\n        wmaInterval = dataPull.historical[i].close * weight;\n        wmaCul += wmaInterval;\n        iWma += weight;\n        weight--;\n      }\n\n      const wmaTwoHun = wmaCul / iWma;\n      chartArr[num].wmaTwoHun = wmaTwoHun.toFixed(2);\n    }\n  } catch (e) {}\n} // VWMA FUNCTION ------------------------------------------------------------------------------------------------------------------------------------------\n\n\nfunction vwmaFunction(chartArr, dataPull, newestPull, num) {\n  // VWMA FIVETEEN --------------------------------------------------------------------\n  try {\n    let price = 0;\n    let volume = 0;\n    const newPrice = newestPull[0].price;\n    const newVol = newestPull[0].volume;\n    let volCul = newestPull[0].volume;\n    let totalCul = newPrice * newVol;\n\n    if (dataPull.historical.length < 14) {\n      chartArr[num].vwmaFiveTeen = \"No Data\";\n    } else {\n      for (let i = 0; i <= 13; i++) {\n        price = dataPull.historical[i].close;\n\n        if (price == undefined) {\n          price = 0;\n        }\n\n        volume = dataPull.historical[i].volume;\n\n        if (volume == undefined) {\n          volume = 0;\n        }\n\n        totalCul += price * volume;\n\n        if (isNaN(totalCul)) {\n          return;\n        }\n\n        volCul += dataPull.historical[i].volume;\n\n        if (isNaN(volCul)) {\n          return;\n        }\n      }\n\n      const vwmaFiveTeen = totalCul / volCul;\n      chartArr[num].vwmaFiveTeen = vwmaFiveTeen.toFixed(2);\n    } // VWMA TWENTY --------------------------------------------------------------------\n\n\n    volCul = newestPull[0].volume;\n    totalCul = newPrice * newVol;\n    price = 0;\n    volume = 0;\n\n    if (dataPull.historical.length < 19) {\n      chartArr[num].vwmaTwenty = \"No Data\";\n    } else {\n      for (let i = 0; i <= 18; i++) {\n        price = dataPull.historical[i].close;\n\n        if (price == undefined) {\n          price = 0;\n        }\n\n        volume = dataPull.historical[i].volume;\n\n        if (volume == undefined) {\n          volume = 0;\n        }\n\n        totalCul += price * volume;\n\n        if (isNaN(totalCul)) {\n          return;\n        }\n\n        volCul += dataPull.historical[i].volume;\n\n        if (isNaN(volCul)) {\n          return;\n        }\n      }\n\n      const vwmaTwenty = totalCul / volCul;\n      chartArr[num].vwmaTwenty = vwmaTwenty.toFixed(2);\n    } // VWMA THIRTY --------------------------------------------------------------------\n\n\n    volCul = newestPull[0].volume;\n    totalCul = newPrice * newVol;\n    price = 0;\n    volume = 0;\n\n    if (dataPull.historical.length < 29) {\n      chartArr[num].vwmaThirty = \"No Data\";\n    } else {\n      for (let i = 0; i <= 28; i++) {\n        price = dataPull.historical[i].close;\n\n        if (price == undefined) {\n          price = 0;\n        }\n\n        volume = dataPull.historical[i].volume;\n\n        if (volume == undefined) {\n          volume = 0;\n        }\n\n        totalCul += price * volume;\n\n        if (isNaN(totalCul)) {\n          return;\n        }\n\n        volCul += dataPull.historical[i].volume;\n\n        if (isNaN(volCul)) {\n          return;\n        }\n      }\n\n      const vwmaThirty = totalCul / volCul;\n      chartArr[num].vwmaThirty = vwmaThirty.toFixed(2);\n    } // VWMA FIFTY --------------------------------------------------------------------\n\n\n    volCul = newestPull[0].volume;\n    totalCul = newPrice * newVol;\n    price = 0;\n    volume = 0;\n\n    if (dataPull.historical.length < 49) {\n      chartArr[num].vwmaFifty = \"No Data\";\n    } else {\n      for (let i = 0; i <= 48; i++) {\n        price = dataPull.historical[i].close;\n\n        if (price == undefined) {\n          price = 0;\n        }\n\n        volume = dataPull.historical[i].volume;\n\n        if (volume == undefined) {\n          volume = 0;\n        }\n\n        totalCul += price * volume;\n\n        if (isNaN(totalCul)) {\n          return;\n        }\n\n        volCul += dataPull.historical[i].volume;\n\n        if (isNaN(volCul)) {\n          return;\n        }\n      }\n\n      const vwmaFifty = totalCul / volCul;\n      chartArr[num].vwmaFifty = vwmaFifty.toFixed(2);\n    } // VWMA ONEHUN --------------------------------------------------------------------\n\n\n    volCul = newestPull[0].volume;\n    totalCul = newPrice * newVol;\n    price = 0;\n    volume = 0;\n\n    if (dataPull.historical.length < 99) {\n      chartArr[num].vwmaOneHun = \"No Data\";\n    } else {\n      for (let i = 0; i <= 98; i++) {\n        price = dataPull.historical[i].close;\n\n        if (price == undefined) {\n          price = 0;\n        }\n\n        volume = dataPull.historical[i].volume;\n\n        if (volume == undefined) {\n          volume = 0;\n        }\n\n        totalCul += price * volume;\n\n        if (isNaN(totalCul)) {\n          return;\n        }\n\n        volCul += dataPull.historical[i].volume;\n\n        if (isNaN(volCul)) {\n          return;\n        }\n      }\n\n      const vwmaOneHun = totalCul / volCul;\n      chartArr[num].vwmaOneHun = vwmaOneHun.toFixed(2);\n    } // VWMA TWOHUN --------------------------------------------------------------------\n\n\n    volCul = newestPull[0].volume;\n    totalCul = newPrice * newVol;\n    price = 0;\n    volume = 0;\n\n    if (dataPull.historical.length < 199) {\n      chartArr[num].vwmaTwoHun = \"No Data\";\n    } else {\n      for (let i = 0; i <= 198; i++) {\n        price = dataPull.historical[i].close;\n\n        if (price == undefined) {\n          price = 0;\n        }\n\n        volume = dataPull.historical[i].volume;\n\n        if (volume == undefined) {\n          volume = 0;\n        }\n\n        totalCul += price * volume;\n\n        if (isNaN(totalCul)) {\n          return;\n        }\n\n        volCul += dataPull.historical[i].volume;\n\n        if (isNaN(volCul)) {\n          return;\n        }\n      }\n\n      const vwmaTwoHun = totalCul / volCul;\n      chartArr[num].vwmaTwoHun = vwmaTwoHun.toFixed(2);\n    }\n  } catch (e) {}\n} // EMA FUNCTION ------------------------------------------------------------------------------------------------------------------------------------------\n\n\nfunction emaFunction(chartArr, dataPull, newestPull, num, macdCallBack) {\n  let emaEight = 14;\n  let emaTwelve = 22;\n  let emaTwenty = 38;\n  let emaTwentySix = 50;\n  let emaFifty = 98;\n  let emaTwoHun = 398;\n  let prevDayEmaSub = 0;\n  let arrEma = [];\n  let macdTwelve = []; // ARRs USED FOR MACD TWELVE HISTORY\n\n  let macdTwentySix = []; // ARRs USED FOR MACD TWENTY SIX HISTORY\n\n  try {\n    const newPrice = newestPull[0].price; // EMA EIGHT ----------------------------------------------------------------------\n\n    if (dataPull.historical.length <= 16) {\n      chartArr[num].emaEight = \"No Data\";\n    } else {\n      while (emaEight >= 15) {\n        prevDayEmaSub += dataPull.historical[emaEight].close;\n        emaEight--;\n      } //CALCULATE EMA HERE TO GET PREVIOUS DAY EMA FOR ACCURATE CURRENT EMA\n\n\n      const subEMA = prevDayEmaSub / 8; //THIS GETS AN EMA USING SMA AS PREV EMA ----------------------------\n\n      const finalSubEma = 2 / 9 * (dataPull.historical[emaEight].close - subEMA) + subEMA;\n      arrEma.unshift(finalSubEma);\n      emaEight--;\n\n      while (emaEight >= 0) {\n        let derp = 2 / 9 * (dataPull.historical[emaEight].close - arrEma[0]) + arrEma[0];\n        arrEma.unshift(derp);\n        arrEma.pop();\n        emaEight--;\n      }\n\n      const finalEma = 2 / 9 * (newPrice - arrEma[0]) + arrEma[0];\n      arrEma.unshift(finalEma);\n      arrEma.pop();\n      chartArr[num].emaEight = arrEma[0].toFixed(2);\n      arrEma.pop();\n      prevDayEmaSub = 0;\n    } // EMA TWELVE ----------------------------------------------------------------------\n\n\n    if (dataPull.historical.length <= 24) {\n      chartArr[num].emaTwelve = \"No Data\";\n    } else {\n      while (emaTwelve >= 11) {\n        prevDayEmaSub += dataPull.historical[emaTwelve].close;\n        emaTwelve--;\n      } //CALCULATE EMA HERE TO GET PREVIOUS DAY EMA FOR ACCURATE CURRENT EMA\n\n\n      const subEMA = prevDayEmaSub / 12; //THIS GETS AN EMA USING SMA AS PREV EMA ----------------------------\n\n      const finalSubEma = 2 / 13 * (dataPull.historical[emaTwelve].close - subEMA) + subEMA;\n      arrEma.unshift(finalSubEma);\n      emaTwelve--;\n\n      while (emaTwelve >= 0) {\n        let derp = 2 / 13 * (dataPull.historical[emaTwelve].close - arrEma[0]) + arrEma[0];\n        arrEma.unshift(derp);\n        arrEma.pop();\n\n        if (emaTwelve < 8 && emaTwelve >= 0) {\n          //THIS IF STATEMENT IS TO STORE VARIABLES FOR LATER MACD SIGNAL LINE\n          macdTwelve.unshift(derp);\n        }\n\n        emaTwelve--;\n      }\n\n      const finalEma = 2 / 13 * (newPrice - arrEma[0]) + arrEma[0];\n      arrEma.unshift(finalEma);\n      arrEma.pop();\n      macdTwelve.unshift(finalEma);\n      chartArr[num].emaTwelve = arrEma[0].toFixed(2);\n      arrEma.pop();\n      prevDayEmaSub = 0;\n    } // EMA TWENTY ----------------------------------------------------------------------\n\n\n    if (dataPull.historical.length <= 40) {\n      chartArr[num].emaTwenty = \"No Data\";\n    } else {\n      while (emaTwenty >= 19) {\n        prevDayEmaSub += dataPull.historical[emaTwenty].close;\n        emaTwenty--;\n      } //CALCULATE EMA HERE TO GET PREVIOUS DAY EMA FOR ACCURATE CURRENT EMA\n\n\n      const subEMA = prevDayEmaSub / 20; //THIS GETS AN EMA USING SMA AS PREV EMA ----------------------------\n\n      const finalSubEma = 2 / 21 * (dataPull.historical[emaTwenty].close - subEMA) + subEMA;\n      arrEma.unshift(finalSubEma);\n      emaTwenty--;\n\n      while (emaTwenty >= 0) {\n        let derp = 2 / 21 * (dataPull.historical[emaTwenty].close - arrEma[0]) + arrEma[0];\n        arrEma.unshift(derp);\n        arrEma.pop();\n        emaTwenty--;\n      }\n\n      const finalEma = 2 / 21 * (newPrice - arrEma[0]) + arrEma[0];\n      arrEma.unshift(finalEma);\n      arrEma.pop();\n      chartArr[num].emaTwenty = arrEma[0].toFixed(2);\n      arrEma.pop();\n      prevDayEmaSub = 0;\n    } // EMA TWENTY SIX ----------------------------------------------------------------------\n\n\n    if (dataPull.historical.length <= 51) {\n      chartArr[num].emaTwentySix = \"No Data\";\n    } else {\n      while (emaTwentySix >= 25) {\n        prevDayEmaSub += dataPull.historical[emaTwentySix].close;\n        emaTwentySix--;\n      } //CALCULATE EMA HERE TO GET PREVIOUS DAY EMA FOR ACCURATE CURRENT EMA\n\n\n      const subEMA = prevDayEmaSub / 26; //THIS GETS AN EMA USING SMA AS PREV EMA ----------------------------\n\n      const finalSubEma = 2 / 27 * (dataPull.historical[emaTwentySix].close - subEMA) + subEMA;\n      arrEma.unshift(finalSubEma);\n      emaTwentySix--;\n\n      while (emaTwentySix >= 0) {\n        let derp = 2 / 27 * (dataPull.historical[emaTwentySix].close - arrEma[0]) + arrEma[0];\n        arrEma.unshift(derp);\n        arrEma.pop();\n\n        if (emaTwentySix < 8 && emaTwentySix >= 0) {\n          //THIS IF STATEMENT IS TO STORE VARIABLES FOR LATER MACD SIGNAL LINE\n          macdTwentySix.unshift(derp);\n        }\n\n        emaTwentySix--;\n      }\n\n      const finalEma = 2 / 27 * (newPrice - arrEma[0]) + arrEma[0];\n      arrEma.unshift(finalEma);\n      arrEma.pop();\n      macdTwentySix.unshift(finalEma);\n      chartArr[num].emaTwentySix = arrEma[0].toFixed(2);\n      arrEma.pop();\n      prevDayEmaSub = 0;\n    } // EMA FIFTY -----------------------------------------------------------------------------\n\n\n    if (dataPull.historical.length <= 100) {\n      chartArr[num].emaFifty = \"No Data\";\n    } else {\n      while (emaFifty >= 49) {\n        prevDayEmaSub += dataPull.historical[emaFifty].close;\n        emaFifty--;\n      } //CALCULATE EMA HERE TO GET PREVIOUS DAY EMA FOR ACCURATE CURRENT EMA\n\n\n      const subEMA = prevDayEmaSub / 50; //THIS GETS AN EMA USING SMA AS PREV EMA ----------------------------\n\n      const finalSubEma = 2 / 51 * (dataPull.historical[emaFifty].close - subEMA) + subEMA;\n      arrEma.unshift(finalSubEma);\n      emaFifty--;\n\n      while (emaFifty >= 0) {\n        let derp = 2 / 51 * (dataPull.historical[emaFifty].close - arrEma[0]) + arrEma[0];\n        arrEma.unshift(derp);\n        arrEma.pop();\n        emaFifty--;\n      }\n\n      const finalEma = 2 / 51 * (newPrice - arrEma[0]) + arrEma[0];\n      arrEma.unshift(finalEma);\n      arrEma.pop();\n      chartArr[num].emaFifty = arrEma[0].toFixed(2);\n      arrEma.pop();\n      prevDayEmaSub = 0;\n    } // EMA TWO HUNDRED -----------------------------------------------------------------------------\n\n\n    if (dataPull.historical.length <= 400) {\n      chartArr[num].emaTwoHun = \"No Data\";\n    } else {\n      while (emaTwoHun >= 199) {\n        prevDayEmaSub += dataPull.historical[emaTwoHun].close;\n        emaTwoHun--;\n      } //CALCULATE EMA HERE TO GET PREVIOUS DAY EMA FOR ACCURATE CURRENT EMA\n\n\n      const subEMA = prevDayEmaSub / 200; //THIS GETS AN EMA USING SMA AS PREV EMA ----------------------------\n\n      const finalSubEma = 2 / 201 * (dataPull.historical[emaTwoHun].close - subEMA) + subEMA;\n      arrEma.unshift(finalSubEma);\n      emaTwoHun--;\n\n      while (emaTwoHun >= 0) {\n        let derp = 2 / 201 * (dataPull.historical[emaTwoHun].close - arrEma[0]) + arrEma[0];\n        arrEma.unshift(derp);\n        arrEma.pop();\n        emaTwoHun--;\n      }\n\n      const finalEma = 2 / 201 * (newPrice - arrEma[0]) + arrEma[0];\n      arrEma.unshift(finalEma);\n      arrEma.pop();\n      chartArr[num].emaTwoHun = arrEma[0].toFixed(2);\n      arrEma.pop();\n      prevDayEmaSub = 0;\n    }\n  } catch (e) {} // MACD CALLBACK -----------------------------------------------------------------------------------------------------------------------------------------\n\n\n  macdCallBack(chartArr, num, macdTwelve, macdTwentySix);\n} // MACD FUNCTION -----------------------------------------------------------------------------------------------------------------------------------------\n\n\nfunction macdFunction(chartArr, num, arr1, arr2) {\n  const macd = chartArr[num].emaTwelve - chartArr[num].emaTwentySix;\n  chartArr[num].macd = macd.toFixed(2); // CALCULATE SIGNAL LINE ----------------\n\n  let averageMacd = [];\n  let iMacd = 8;\n\n  try {\n    while (iMacd >= 0) {\n      averageMacd.unshift(arr1[iMacd] - arr2[iMacd]);\n      iMacd--;\n    }\n\n    let averageSum = averageMacd.reduce((a, b) => a + b);\n    let finalAverageMacd = averageSum / 9;\n    let macdSignalLine = 2 / 9 * (chartArr[num].macd - finalAverageMacd) + finalAverageMacd;\n    chartArr[num].macdSignalLine = macdSignalLine.toFixed(2); // HISTORGRAM CALC ------------------------------------- IF HISTOGRAM GOES FROM NEGATIVE TO POSITIVE IT IS BULLISH\n\n    let histogram = chartArr[num].macd - chartArr[num].macdSignalLine;\n    chartArr[num].macdHistogram = histogram.toFixed(2); // FOR NO DATA TO PULL FROM\n\n    if (chartArr[num].macdHistogram === \"NaN\") {\n      chartArr[num].macdHistogram = \"No Data\";\n    }\n\n    if (chartArr[num].macd === \"NaN\") {\n      chartArr[num].macd = \"No Data\";\n    }\n\n    if (chartArr[num].macdSignalLine === \"NaN\") {\n      chartArr[num].macdSignalLine = \"No Data\";\n    }\n  } catch (e) {}\n} // RSI FUNCTION ------------------------------------------------------------------------------------------------------------------------------------------\n\n\nfunction rsiFunction(chartArr, dataPull, newestPull, num) {\n  let iRSI = 13;\n  let iRSIAdjusted = 14;\n  let recentUpper = 0;\n  let recentDowner = 0;\n  let upMove = 0;\n  let downMove = 0;\n  let pastDownPeriod = 0;\n  let pastUpPeriod = 0;\n\n  try {\n    const newPrice = newestPull[0].price; // CHECK TO SEE IF DATA PULL CAN PULL ENOUGH DATA TO BE EFFECTIVE\n\n    if (dataPull.historical.length <= 14) {\n      chartArr[num].rsi = \"No Data\";\n    } else {\n      // LOOP FOR AVERAGE\n      while (iRSI >= 0) {\n        if (dataPull.historical[iRSI].close > dataPull.historical[iRSIAdjusted].close) {\n          upMove += dataPull.historical[iRSI].close - dataPull.historical[iRSIAdjusted].close;\n        } else {\n          downMove += dataPull.historical[iRSIAdjusted].close - dataPull.historical[iRSI].close;\n        }\n\n        iRSI--;\n        iRSIAdjusted--;\n      }\n\n      let averageUp = upMove / 14;\n      let averageDown = downMove / 14; // MOST RECENT DIFFERENCE\n\n      if (newPrice > dataPull.historical[0].close) {\n        recentUpper = newPrice - dataPull.historical[0].close;\n      } else {\n        recentDowner = dataPull.historical[0].close - newPrice;\n      }\n\n      pastUpPeriod = (averageUp * 13 + recentUpper) / 14;\n      pastDownPeriod = (averageDown * 13 + recentDowner) / 14;\n      let rsi = 100 - 100 / (1 + pastUpPeriod / pastDownPeriod);\n      chartArr[num].rsi = rsi.toFixed(2);\n    }\n  } catch (e) {}\n} // STOCHASTIC OSCILLATOR ------------------------------------------------------------------------------------------------------------------------------------------------------------------\n\n\nfunction stochOsc1433Function(chartArr, dataPull, newestPull, num) {\n  let iSO = 13;\n  let soLowHolder = [];\n  let soHighHolder = [];\n  let highestHigh = 0;\n  let lowestLow = 0; // FIRST %D\n\n  let topForm = [];\n  let bottomForm = []; // SECOND %D\n\n  let topFormTwo = [];\n  let bottomFormTwo = []; // THIRD %D\n\n  let topFormThree = [];\n  let bottomFormThree = []; // HOLDING SET OF %D FOR 14 3 3\n\n  let signalLineHolder = [];\n\n  try {\n    let newPrice = newestPull[0].price;\n\n    if (dataPull.historical.length < 18) {\n      chartArr[num].stochasticK = \"No Data\";\n    } else {\n      // GETTING HIGHS AND LOWS OF PERIOD------------------------------------------------------\n      while (iSO >= 0) {\n        soLowHolder.push(dataPull.historical[iSO].low);\n        soHighHolder.push(dataPull.historical[iSO].high);\n        iSO--;\n      }\n\n      soHighHolder.push(newPrice);\n      soLowHolder.push(newPrice);\n      highestHigh = Math.max(...soHighHolder);\n      lowestLow = Math.min(...soLowHolder);\n\n      if (lowestLow === newPrice) {\n        newPrice = dataPull.historical[0].close;\n      }\n\n      if (highestHigh === newPrice) {\n        newPrice = dataPull.historical[0].close;\n      }\n\n      topForm.push(newPrice - lowestLow);\n      bottomForm.push(highestHigh - lowestLow); //FOR %K\n\n      chartArr[num].stochasticK = ((newPrice - lowestLow) / (highestHigh - lowestLow) * 100).toFixed(2); // RESET HOLDER AND VARs --------------------------------------------------------\n\n      iSO = 14;\n      soLowHolder = [];\n      soHighHolder = [];\n      highestHigh = 0;\n      lowestLow = 0; // GETTING HIGHS AND LOWS OF PERIOD-----------------------------------------------\n\n      while (iSO >= 1) {\n        soLowHolder.push(dataPull.historical[iSO].low);\n        soHighHolder.push(dataPull.historical[iSO].high);\n        iSO--;\n      }\n\n      highestHigh = Math.max(...soHighHolder);\n      lowestLow = Math.min(...soLowHolder);\n      topForm.push(dataPull.historical[0].close - lowestLow);\n      bottomForm.push(highestHigh - lowestLow);\n      topFormTwo.push(dataPull.historical[0].close - lowestLow);\n      bottomFormTwo.push(highestHigh - lowestLow); // RESET HOLDER AND VARs ------------------------------------------------\n\n      iSO = 15;\n      soLowHolder = [];\n      soHighHolder = [];\n      highestHigh = 0;\n      lowestLow = 0; // GETTING HIGHS AND LOWS OF PERIOD-----------------------------------\n\n      while (iSO >= 2) {\n        soLowHolder.push(dataPull.historical[iSO].low);\n        soHighHolder.push(dataPull.historical[iSO].high);\n        iSO--;\n      }\n\n      highestHigh = Math.max(...soHighHolder);\n      lowestLow = Math.min(...soLowHolder);\n      topForm.push(dataPull.historical[1].close - lowestLow);\n      bottomForm.push(highestHigh - lowestLow);\n      topFormTwo.push(dataPull.historical[1].close - lowestLow);\n      bottomFormTwo.push(highestHigh - lowestLow);\n      topFormThree.push(dataPull.historical[1].close - lowestLow);\n      bottomFormThree.push(highestHigh - lowestLow); // AFTER 3 WE SUM IT UP --------------- TO GET 1 OF THE 3 SMOOTHS FOR 14 3 3------------------------------------------\n\n      let sumTop = topForm.reduce((a, b) => a + b, 0);\n      let sumBottom = bottomForm.reduce((a, b) => a + b, 0);\n      let slowD = sumTop / sumBottom * 100; // FOR %D\n\n      chartArr[num].stochasticD = (slowD / 3).toFixed(2);\n      signalLineHolder.push(slowD); //RESET VARS ---------------------------------------------------------------------\n\n      iSO = 16;\n      soLowHolder = [];\n      soHighHolder = [];\n      highestHigh = 0;\n      lowestLow = 0;\n      sumTop = 0;\n      sumBottom = 0;\n      slowD = 0; // GETTING HIGHS AND LOWS OF PERIOD------------------------------------------------\n\n      while (iSO >= 3) {\n        soLowHolder.push(dataPull.historical[iSO].low);\n        soHighHolder.push(dataPull.historical[iSO].high);\n        iSO--;\n      }\n\n      highestHigh = Math.max(...soHighHolder);\n      lowestLow = Math.min(...soLowHolder);\n      topFormTwo.push(dataPull.historical[2].close - lowestLow);\n      bottomFormTwo.push(highestHigh - lowestLow);\n      topFormThree.push(dataPull.historical[2].close - lowestLow);\n      bottomFormThree.push(highestHigh - lowestLow); // AFTER 3 WE SUM IT UP --------------- TO GET 2 OF THE 3 SMOOTHS FOR 14 3 3------------------------------------------\n\n      sumTop = topFormTwo.reduce((a, b) => a + b, 0);\n      sumBottom = bottomFormTwo.reduce((a, b) => a + b, 0);\n      slowD = sumTop / sumBottom * 100;\n      signalLineHolder.push(slowD); //RESET VARS ---------------------------------------------\n\n      iSO = 17;\n      soLowHolder = [];\n      soHighHolder = [];\n      highestHigh = 0;\n      lowestLow = 0;\n      sumTop = 0;\n      sumBottom = 0;\n      slowD = 0; // GETTING HIGHS AND LOWS OF PERIOD-----------------------------------\n\n      while (iSO >= 4) {\n        soLowHolder.push(dataPull.historical[iSO].low);\n        soHighHolder.push(dataPull.historical[iSO].high);\n        iSO--;\n      }\n\n      highestHigh = Math.max(...soHighHolder);\n      lowestLow = Math.min(...soLowHolder);\n      topFormThree.push(dataPull.historical[3].close - lowestLow);\n      bottomFormThree.push(highestHigh - lowestLow); // AFTER 3 WE SUM IT UP --------------- TO GET 3 OF THE 3 SMOOTHS FOR 14 3 3------------------------------------------\n\n      sumTop = topFormThree.reduce((a, b) => a + b, 0);\n      sumBottom = bottomFormThree.reduce((a, b) => a + b, 0);\n      slowD = sumTop / sumBottom * 100;\n      signalLineHolder.push(slowD); // ----------- TALLY UP LAST SMOOTHING -------------------------------\n\n      const sumStochD = signalLineHolder.reduce((a, b) => a + b, 0);\n      let smaD = sumStochD / 3;\n\n      if (smaD < 0) {\n        smaD *= -1;\n        chartArr[num].stochasticSignal = smaD.toFixed(2);\n      } else {\n        chartArr[num].stochasticSignal = smaD.toFixed(2);\n      }\n    }\n  } catch (e) {}\n} // WILLIAMS %R 14 ------------------------------------------------------------------------------------------------------------------------------------------------------------------\n\n\nfunction williamsRFunction(chartArr, dataPull, newestPull, num) {\n  let highs = [];\n  let lows = [];\n  let lowestLow = 0;\n  let highestHigh = 0;\n\n  try {\n    const newPrice = newestPull[0].price;\n\n    if (dataPull.historical.length < 14) {\n      chartArr[num].williams = \"No Data\";\n    } else {\n      for (let i = 0; i <= 13; i++) {\n        highs.push(dataPull.historical[i].high);\n        lows.push(dataPull.historical[i].low);\n      }\n\n      highs.push(newPrice);\n      lows.push(newPrice);\n      lowestLow = Math.min(...lows);\n      highestHigh = Math.max(...highs);\n      const williams = (highestHigh - dataPull.historical[0].close) / (highestHigh - lowestLow) * -100;\n      chartArr[num].williamsR = williams.toFixed(2);\n    }\n  } catch (e) {}\n} // CCI 20 ------------------------------------------------------------------------------------------------------------------------------------------------------------------\n\n\nfunction cciFunction(chartArr, dataPull, newestPull, num) {\n  let tpvCul = 0;\n  let tpv = [];\n  let tpvMa = 0;\n\n  try {\n    const newPrice = newestPull[0].price;\n    let tpvCurrent = newPrice;\n    const recentTpv = newPrice;\n\n    if (dataPull.historical.length < 19) {\n      chartArr[num].cciTwenty = \"No Data\";\n    } else {\n      for (let i = 0; i <= 19; i++) {\n        const {\n          high,\n          close,\n          low\n        } = dataPull.historical[i];\n        tpv.push(tpvCurrent); // PUSH FIRST NUMBER IN\n\n        tpvCurrent = (close + high + low) / 3;\n      } // ---- TPV SMA ------------------------\n\n\n      tpvCul = tpv.reduce((a, b) => a + b);\n      tpvMa = tpvCul / 20; // TOP HALF OF FORMULA - DIVIDE BY PART TWO\n\n      const partOne = recentTpv - tpvMa;\n      const meanD = tpv.map(x => x - tpvMa);\n      const meanDMap = meanD.map(x => Math.abs(x));\n      const meanDSum = meanDMap.reduce((a, b) => a + b);\n      const meanDiv = meanDSum / 20; // PART TWO OF FORMULA --------------\n\n      const partTwo = meanDiv * 0.015; // CCI ------------------------------\n\n      const cci = partOne / partTwo;\n      chartArr[num].cciTwenty = cci.toFixed(2);\n    }\n  } catch (e) {}\n} // BOLLINGER BANDS ------------------------------------------------------------------------------------------------------------------------------------------------------------------\n\n\nfunction bollingerBandsFunction(chartArr, dataPull, newestPull, num) {\n  let smaCul = 0;\n  let closeHolder = [];\n\n  try {\n    const newPrice = newestPull[0].price;\n\n    if (dataPull.historical.length < 19) {\n      chartArr[num].bbUpper = \"No Data\";\n      chartArr[num].bbLower = \"No Data\";\n      chartArr[num].bbMiddle = \"No Data\";\n    } else {\n      let closeP = newPrice;\n\n      for (let i = 0; i <= 19; i++) {\n        closeHolder.push(closeP);\n        smaCul += closeP;\n        closeP = dataPull.historical[i].close;\n      } // STANDARD DEVIATION CALC --------------------------------\n\n\n      const smaTwenty = smaCul / 20;\n      const priceAdj = closeHolder.map(x => x - smaTwenty);\n      const priceAdjAbs = priceAdj.map(x => Math.abs(x));\n      const priceAdjSqrt = priceAdjAbs.map(x => x * x);\n      const partOneDev = priceAdjSqrt.reduce((a, b) => a + b);\n      const partTwoDev = partOneDev / 20;\n      const standardDev = Math.sqrt(partTwoDev); // BB BAND CALC --------------------------------------------\n\n      const bbUpper = smaTwenty + standardDev * 2;\n      const bbLower = smaTwenty - standardDev * 2;\n      const bbPercent = (newPrice - bbLower) / (bbUpper - bbLower);\n      chartArr[num].bbUpper = bbUpper.toFixed(2);\n      chartArr[num].bbLower = bbLower.toFixed(2);\n      chartArr[num].bbMiddle = smaTwenty.toFixed(2);\n      chartArr[num].bbPercent = bbPercent.toFixed(2);\n    }\n  } catch (e) {}\n} // VWAP FUNCTION ------------------------------------------------------------------------------------------------------------------------------------------\n\n\nfunction vwapFunction(chartArr, dataPull, num, dateObj) {\n  // ----------- VWAP CALUC -------------------------------------------\n  let dayLengthPeriod = 0;\n  let tpvCul = 0;\n  let volumeCul = 0;\n  let tempVWAP = []; // HOLD VWAP PERIOD - TAKES FROM 0 INDEX FOR MOST CURRENT\n\n  try {\n    // -------------THIS IS FOR GETTING THE DAY LENGTH FOR VWAP\n    while (dataPull[dayLengthPeriod].date.slice(0, 10) == dateObj.newDateString) {\n      dayLengthPeriod++;\n    } // --------------------THIS IS FOR CALCULATING THE VWAP AND PUSHING TO\n\n\n    for (let i = 0; i < dayLengthPeriod; i++) {\n      const {\n        volume,\n        high,\n        close,\n        low,\n        date\n      } = dataPull[i];\n      let tpv = (high + low + close) / 3;\n\n      if (date.slice(0, 10) == dateObj.newDateString) {\n        tpvCul += tpv * volume;\n        volumeCul += volume;\n      }\n\n      var vwapFinal = tpvCul / volumeCul; // --------- THIS IS VWAP!!!!!!!!\n\n      tempVWAP.unshift(vwapFinal); //ADD VWAP FRONT OF ARR\n    }\n\n    let vwap = tempVWAP[0].toFixed(2);\n    chartArr[num].vwap = vwap;\n  } catch (e) {}\n} // SET VOLUME FOR LATER\n\n\nfunction setVolume(chartArr, dataPull, newestPull, num, dateObj) {\n  // SET RECENT YESTERDAY VOLUME\n  try {\n    if (dataPull.historical.length <= 0) {\n      chartArr[num].yesterdayVolume = 0;\n    } else {\n      chartArr[num].yesterdayVolume = dataPull.historical[0].volume;\n\n      if (dateObj.marketDay == 0 || dateObj.marketDay == 6) {\n        chartArr[num].yesterdayVolume = dataPull.historical[1].volume;\n      }\n\n      if (dateObj.marketDay >= 1 && dateObj.marketDay <= 5 && dateObj.timeNum < 930) {\n        chartArr[num].yesterdayVolume = dataPull.historical[1].volume;\n      }\n\n      if (dateObj.timeNum > 1830) {\n        chartArr[num].yesterdayVolume = dataPull.historical[1].volume;\n      }\n    }\n\n    if (newestPull.length < 0) {\n      chartArr[num].volume = 0;\n    } else {\n      // SET RECENT VOLUME\n      chartArr[num].volume = newestPull[0].volume;\n    }\n  } catch (e) {}\n} // TA INTO OBJECTS FUNCTIONS ---------------------------------------------------------------------\n\n\nexport async function technicalIndicators(finalArr, callback, dateObj) {\n  let j = 0;\n\n  while (j < finalArr.length) {\n    // LOOP FOR TECHNICAL SYMBOL\n    // THIS IS THE ALL MIGHTY SYMBOL USED FOR PULLS\n    const {\n      symbol\n    } = finalArr[j]; //THIS PULL IS FOR CLOSE PRICES TO CALC TAs PAST CLOSE DATA //\n\n    const resSMA = await fetch(`https://financialmodelingprep.com/api/v3/historical-price-full/${symbol}?apikey=4d4593bc9e6bc106ee9d1cbd6400b218`);\n    const dataSMA = await resSMA.json(); // SMA PULL USED FOR OTHER CALCS\n    // ERROR CHECK FOR EMPTY PULL\n\n    try {\n      if (!Object.keys(dataSMA).length) {\n        console.log(\"no SMA Pull data found\");\n      }\n    } catch (e) {} //THIS PULL IS FOR OSCILLATORS ALL CURRENT CLOSE DATA\n\n\n    const resOscPulled = await fetch(`https://financialmodelingprep.com/api/v3/quote-short/${symbol}?apikey=4d4593bc9e6bc106ee9d1cbd6400b218`);\n    const dataRecentPulled = await resOscPulled.json(); // ERROR CHECK FOR EMPTY PULL\n\n    try {\n      if (!Object.keys(dataRecentPulled).length) {\n        console.log(\"no Recent Pull data found\");\n      }\n    } catch (e) {} // VWAP ------------------------------------------------------------------------------------------------------------------------------------------------\n\n\n    const resVWAP = await fetch(`https://financialmodelingprep.com/api/v3/historical-chart/5min/${symbol}?apikey=4d4593bc9e6bc106ee9d1cbd6400b218`);\n    const dataVWAP = await resVWAP.json(); // ERROR CHECK FOR EMPTY PULL\n\n    try {\n      if (!Object.keys(dataVWAP).length) {\n        console.log(\"no VWAP Pull data found\");\n      }\n    } catch (e) {} // VWAP ------------------------------------------------------------------------------------------------------------------------------------------------\n\n\n    vwapFunction(finalArr, dataVWAP, j); // SMA -----------------------------------------------------------------------------------------------------------------------------------------------------------------------\n\n    smaFunction(finalArr, dataSMA, dataRecentPulled, j); // WMA ------------------------------------------------------------------------------------------------------------------------------------------------------------------\n\n    wmaFunction(finalArr, dataSMA, dataRecentPulled, j); // VWMA ------------------------------------------------------------------------------------------------------------------------------------------------------------------\n\n    vwmaFunction(finalArr, dataSMA, dataRecentPulled, j); // EMA WITH MACD CALLBACK ------------------------------------------------------------------------------------------------------------------------------------------\n\n    emaFunction(finalArr, dataSMA, dataRecentPulled, j, macdFunction); // RSI ------------------------------------------------------------------------------------------------------------------------------------------------------------------\n\n    rsiFunction(finalArr, dataSMA, dataRecentPulled, j); // STOCHASTIC OSCILLATOR ------------------------------------------------------------------------------------------------------------------------------------------------------------------\n\n    stochOsc1433Function(finalArr, dataSMA, dataRecentPulled, j); //DATA VWAP USED FOR RECETN CLOSE DATA\n    // WILLIAMS %R 14 ------------------------------------------------------------------------------------------------------------------------------------------------------------------\n\n    williamsRFunction(finalArr, dataSMA, dataRecentPulled, j); // CCI 20 ------------------------------------------------------------------------------------------------------------------------------------------------------------------\n\n    cciFunction(finalArr, dataSMA, dataRecentPulled, j); // BOLLINGER BANDS ------------------------------------------------------------------------------------------------------------------------------------------------------------------\n\n    bollingerBandsFunction(finalArr, dataSMA, dataRecentPulled, j); // SET VOLUME PROPERTIES\n\n    setVolume(finalArr, dataSMA, dataRecentPulled, j);\n    j++; // UPDATE WHILE LOOP\n  } // THIS IS THE END OF LOOP\n\n\n  const returnedData = await callback(finalArr, buildIt);\n  return returnedData;\n}","map":{"version":3,"sources":["/Users/austinolijar/Desktop/MERN-DeadCat/dead-cat/src/JS/technical-Indicators.js/technicalIndicatorsMain.js"],"names":["smaFunction","chartArr","dataPull","newestPull","num","culSMA","fiveTeenSMA","twentySMA","thirtySMA","fiftySMA","hunSMA","twoHunSMA","todayPricePull","price","historical","length","smaFiveTeen","close","smaFiveResult","toFixed","smaTwenty","smaTwentyResult","smaThirty","smaThirtyResult","smaFifty","smaFiftyResult","smaOneHun","smaOneHunResult","smaTwoHun","smaTwoHunResult","e","wmaFunction","weight","wmaInterval","iWma","wmaCul","wmaFiveTeen","i","wmaTwenty","wmaThirty","wmaFifty","wmaOneHun","wmaTwoHun","vwmaFunction","volume","newPrice","newVol","volCul","totalCul","vwmaFiveTeen","undefined","isNaN","vwmaTwenty","vwmaThirty","vwmaFifty","vwmaOneHun","vwmaTwoHun","emaFunction","macdCallBack","emaEight","emaTwelve","emaTwenty","emaTwentySix","emaFifty","emaTwoHun","prevDayEmaSub","arrEma","macdTwelve","macdTwentySix","subEMA","finalSubEma","unshift","derp","pop","finalEma","macdFunction","arr1","arr2","macd","averageMacd","iMacd","averageSum","reduce","a","b","finalAverageMacd","macdSignalLine","histogram","macdHistogram","rsiFunction","iRSI","iRSIAdjusted","recentUpper","recentDowner","upMove","downMove","pastDownPeriod","pastUpPeriod","rsi","averageUp","averageDown","stochOsc1433Function","iSO","soLowHolder","soHighHolder","highestHigh","lowestLow","topForm","bottomForm","topFormTwo","bottomFormTwo","topFormThree","bottomFormThree","signalLineHolder","stochasticK","push","low","high","Math","max","min","sumTop","sumBottom","slowD","stochasticD","sumStochD","smaD","stochasticSignal","williamsRFunction","highs","lows","williams","williamsR","cciFunction","tpvCul","tpv","tpvMa","tpvCurrent","recentTpv","cciTwenty","partOne","meanD","map","x","meanDMap","abs","meanDSum","meanDiv","partTwo","cci","bollingerBandsFunction","smaCul","closeHolder","bbUpper","bbLower","bbMiddle","closeP","priceAdj","priceAdjAbs","priceAdjSqrt","partOneDev","partTwoDev","standardDev","sqrt","bbPercent","vwapFunction","dateObj","dayLengthPeriod","volumeCul","tempVWAP","date","slice","newDateString","vwapFinal","vwap","setVolume","yesterdayVolume","marketDay","timeNum","technicalIndicators","finalArr","callback","j","symbol","resSMA","fetch","dataSMA","json","Object","keys","console","log","resOscPulled","dataRecentPulled","resVWAP","dataVWAP","returnedData","buildIt"],"mappings":"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","sourcesContent":["// SMA FUNCTION ------------------------------------------------------------------------------------------------------------------------------------------\nfunction smaFunction(chartArr, dataPull, newestPull, num) {\n    let culSMA = 0;\n  \n    // ------- SMA INDEX IS - 2 FROM TOTAL BECAUSE OF 0 INDEX = 1 AND ADDING RECENT PRICE DATA --------------------\n    let fiveTeenSMA = 13;\n    let twentySMA = 18;\n    let thirtySMA = 28;\n    let fiftySMA = 48;\n    let hunSMA = 98;\n    let twoHunSMA = 198;\n  \n    try {\n      const todayPricePull = newestPull[0].price;\n      // ------------- 15 DAY SMA -------------------------------\n      if (dataPull.historical.length <= 13) {\n        chartArr[num].smaFiveTeen = \"No Data\";\n      } else {\n        while (fiveTeenSMA >= 0) {\n          culSMA += dataPull.historical[fiveTeenSMA].close;\n          fiveTeenSMA--;\n        }\n        let smaFiveResult = (culSMA + todayPricePull) / 15;\n        chartArr[num].smaFiveTeen = smaFiveResult.toFixed(2);\n        culSMA = 0;\n      }\n      // ------------- 20 DAY SMA -------------------------------\n      if (dataPull.historical.length <= 19) {\n        chartArr[num].smaTwenty = \"No Data\";\n      } else {\n        while (twentySMA >= 0) {\n          culSMA += dataPull.historical[twentySMA].close;\n          twentySMA--;\n        }\n        let smaTwentyResult = (culSMA + todayPricePull) / 20;\n        chartArr[num].smaTwenty = smaTwentyResult.toFixed(2);\n        culSMA = 0;\n      }\n      // ------------- 30 DAY SMA -------------------------------\n      if (dataPull.historical.length <= 29) {\n        chartArr[num].smaThirty = \"No Data\";\n      } else {\n        while (thirtySMA >= 0) {\n          culSMA += dataPull.historical[thirtySMA].close;\n          thirtySMA--;\n        }\n        let smaThirtyResult = (culSMA + todayPricePull) / 30;\n        chartArr[num].smaThirty = smaThirtyResult.toFixed(2);\n        culSMA = 0;\n      }\n      // ------------- 50 DAY SMA -------------------------------\n      if (dataPull.historical.length <= 49) {\n        chartArr[num].smaFifty = \"No Data\";\n      } else {\n        while (fiftySMA >= 0) {\n          culSMA += dataPull.historical[fiftySMA].close;\n          fiftySMA--;\n        }\n        let smaFiftyResult = (culSMA + todayPricePull) / 50;\n        chartArr[num].smaFifty = smaFiftyResult.toFixed(2);\n        culSMA = 0;\n      }\n      // ------------- 100 DAY SMA -------------------------------\n      if (dataPull.historical.length <= 99) {\n        chartArr[num].smaOneHun = \"No Data\";\n      } else {\n        while (hunSMA >= 0) {\n          culSMA += dataPull.historical[hunSMA].close;\n          hunSMA--;\n        }\n        let smaOneHunResult = (culSMA + todayPricePull) / 100;\n        chartArr[num].smaOneHun = smaOneHunResult.toFixed(2);\n        culSMA = 0;\n      }\n      // ------------- 200 DAY SMA -------------------------------\n      if (dataPull.historical.length <= 199) {\n        chartArr[num].smaTwoHun = \"No Data\";\n      } else {\n        while (twoHunSMA >= 0) {\n          culSMA += dataPull.historical[twoHunSMA].close;\n          twoHunSMA--;\n        }\n        let smaTwoHunResult = (culSMA + todayPricePull) / 200;\n        chartArr[num].smaTwoHun = smaTwoHunResult.toFixed(2);\n        culSMA = 0;\n      }\n    } catch (e) {}\n  }\n  // WMA FUNCTION ------------------------------------------------------------------------------------------------------------------------------------------\n  function wmaFunction(chartArr, dataPull, newestPull, num) {\n    // WMA FiveTeen --------------------------------------------------------------------\n    let weight = 14;\n    let wmaInterval = 0;\n    let iWma = 15;\n    try {\n      let wmaCul = newestPull[0].price * 15;\n  \n      if (dataPull.historical.length < 14) {\n        chartArr[num].wmaFiveTeen = \"No Data\";\n      } else {\n        for (let i = 0; i <= 13; i++) {\n          wmaInterval = dataPull.historical[i].close * weight;\n          wmaCul += wmaInterval;\n          iWma += weight;\n          weight--;\n        }\n        const wmaFiveTeen = wmaCul / iWma;\n        chartArr[num].wmaFiveTeen = wmaFiveTeen.toFixed(2);\n      }\n  \n      // WMA Twenty --------------------------------------------------------------------\n      wmaCul = newestPull[0].price * 20;\n      weight = 19;\n      wmaInterval = 0;\n      iWma = 20;\n  \n      if (dataPull.historical.length < 19) {\n        chartArr[num].wmaTwenty = \"No Data\";\n      } else {\n        for (let i = 0; i <= 18; i++) {\n          wmaInterval = dataPull.historical[i].close * weight;\n          wmaCul += wmaInterval;\n          iWma += weight;\n          weight--;\n        }\n        const wmaTwenty = wmaCul / iWma;\n        chartArr[num].wmaTwenty = wmaTwenty.toFixed(2);\n      }\n  \n      // WMA THIRTY --------------------------------------------------------------------\n  \n      wmaCul = newestPull[0].price * 30;\n      weight = 29;\n      wmaInterval = 0;\n      iWma = 30;\n  \n      if (dataPull.historical.length < 30) {\n        chartArr[num].wmaThirty = \"No Data\";\n      } else {\n        for (let i = 0; i <= 28; i++) {\n          wmaInterval = dataPull.historical[i].close * weight;\n          wmaCul += wmaInterval;\n          iWma += weight;\n          weight--;\n        }\n        const wmaThirty = wmaCul / iWma;\n        chartArr[num].wmaThirty = wmaThirty.toFixed(2);\n      }\n  \n      // WMA FIFTY --------------------------------------------------------------------\n  \n      wmaCul = newestPull[0].price * 50;\n      weight = 49;\n      wmaInterval = 0;\n      iWma = 50;\n  \n      if (dataPull.historical.length < 50) {\n        chartArr[num].wmaFifty = \"No Data\";\n      } else {\n        for (let i = 0; i <= 48; i++) {\n          wmaInterval = dataPull.historical[i].close * weight;\n          wmaCul += wmaInterval;\n          iWma += weight;\n          weight--;\n        }\n        const wmaFifty = wmaCul / iWma;\n        chartArr[num].wmaFifty = wmaFifty.toFixed(2);\n      }\n  \n      // WMA ONE HUNDRED --------------------------------------------------------------------\n  \n      wmaCul = newestPull[0].price * 100;\n      weight = 99;\n      wmaInterval = 0;\n      iWma = 100;\n  \n      if (dataPull.historical.length < 100) {\n        chartArr[num].wmaOneHun = \"No Data\";\n      } else {\n        for (let i = 0; i <= 98; i++) {\n          wmaInterval = dataPull.historical[i].close * weight;\n          wmaCul += wmaInterval;\n          iWma += weight;\n          weight--;\n        }\n        const wmaOneHun = wmaCul / iWma;\n        chartArr[num].wmaOneHun = wmaOneHun.toFixed(2);\n      }\n  \n      // WMA TWO HUNDRED --------------------------------------------------------------------\n  \n      wmaCul = newestPull[0].price * 200;\n      weight = 199;\n      wmaInterval = 0;\n      iWma = 200;\n  \n      if (dataPull.historical.length < 200) {\n        chartArr[num].wmaTwoHun = \"No Data\";\n      } else {\n        for (let i = 0; i <= 198; i++) {\n          wmaInterval = dataPull.historical[i].close * weight;\n          wmaCul += wmaInterval;\n          iWma += weight;\n          weight--;\n        }\n        const wmaTwoHun = wmaCul / iWma;\n        chartArr[num].wmaTwoHun = wmaTwoHun.toFixed(2);\n      }\n    } catch (e) {}\n  }\n  // VWMA FUNCTION ------------------------------------------------------------------------------------------------------------------------------------------\n  function vwmaFunction(chartArr, dataPull, newestPull, num) {\n    // VWMA FIVETEEN --------------------------------------------------------------------\n  \n    try {\n      let price = 0;\n      let volume = 0;\n      const newPrice = newestPull[0].price;\n      const newVol = newestPull[0].volume;\n  \n      let volCul = newestPull[0].volume;\n      let totalCul = newPrice * newVol;\n  \n      if (dataPull.historical.length < 14) {\n        chartArr[num].vwmaFiveTeen = \"No Data\";\n      } else {\n        for (let i = 0; i <= 13; i++) {\n  \n          price = dataPull.historical[i].close;\n          if (price == undefined) {\n            price = 0\n          }\n          volume = dataPull.historical[i].volume;\n          if (volume == undefined) {\n            volume = 0\n          }\n          totalCul += price * volume;\n          if (isNaN(totalCul)) {\n            return\n          }\n          volCul += dataPull.historical[i].volume;\n          if (isNaN(volCul)) {\n            return\n          }\n  \n        }\n  \n        const vwmaFiveTeen = totalCul / volCul;\n        \n        chartArr[num].vwmaFiveTeen = vwmaFiveTeen.toFixed(2);\n      }\n  \n    \n  \n      // VWMA TWENTY --------------------------------------------------------------------\n  \n      volCul = newestPull[0].volume;\n      totalCul = newPrice * newVol;\n      price = 0;\n      volume = 0;\n  \n      if (dataPull.historical.length < 19) {\n        chartArr[num].vwmaTwenty = \"No Data\";\n      } else {\n        for (let i = 0; i <= 18; i++) {\n          price = dataPull.historical[i].close;\n          if (price == undefined) {\n            price = 0\n          }\n          volume = dataPull.historical[i].volume;\n          if (volume == undefined) {\n            volume = 0\n          }\n          totalCul += price * volume;\n          if (isNaN(totalCul)) {\n            return\n          }\n          volCul += dataPull.historical[i].volume;\n          if (isNaN(volCul)) {\n            return\n          }\n        }\n        const vwmaTwenty = totalCul / volCul;\n       \n        chartArr[num].vwmaTwenty = vwmaTwenty.toFixed(2);\n      }\n  \n      // VWMA THIRTY --------------------------------------------------------------------\n  \n      volCul = newestPull[0].volume;\n      totalCul = newPrice * newVol;\n      price = 0;\n      volume = 0;\n  \n      if (dataPull.historical.length < 29) {\n        chartArr[num].vwmaThirty = \"No Data\";\n      } else {\n        for (let i = 0; i <= 28; i++) {\n          price = dataPull.historical[i].close;\n          if (price == undefined) {\n            price = 0\n          }\n          volume = dataPull.historical[i].volume;\n          if (volume == undefined) {\n            volume = 0\n          }\n          totalCul += price * volume;\n          if (isNaN(totalCul)) {\n            return\n          }\n          volCul += dataPull.historical[i].volume;\n          if (isNaN(volCul)) {\n            return\n          }\n        }\n        const vwmaThirty = totalCul / volCul;\n        chartArr[num].vwmaThirty = vwmaThirty.toFixed(2);\n      }\n  \n      // VWMA FIFTY --------------------------------------------------------------------\n  \n      volCul = newestPull[0].volume;\n      totalCul = newPrice * newVol;\n      price = 0;\n      volume = 0;\n  \n      if (dataPull.historical.length < 49) {\n        chartArr[num].vwmaFifty = \"No Data\";\n      } else {\n        for (let i = 0; i <= 48; i++) {\n          price = dataPull.historical[i].close;\n          if (price == undefined) {\n            price = 0\n          }\n          volume = dataPull.historical[i].volume;\n          if (volume == undefined) {\n            volume = 0\n          }\n          totalCul += price * volume;\n          if (isNaN(totalCul)) {\n            return\n          }\n          volCul += dataPull.historical[i].volume;\n          if (isNaN(volCul)) {\n            return\n          }\n        }\n        const vwmaFifty = totalCul / volCul;\n        chartArr[num].vwmaFifty = vwmaFifty.toFixed(2);\n      }\n  \n      // VWMA ONEHUN --------------------------------------------------------------------\n  \n      volCul = newestPull[0].volume;\n      totalCul = newPrice * newVol;\n      price = 0;\n      volume = 0;\n  \n      if (dataPull.historical.length < 99) {\n        chartArr[num].vwmaOneHun = \"No Data\";\n      } else {\n        for (let i = 0; i <= 98; i++) {\n          price = dataPull.historical[i].close;\n          if (price == undefined) {\n            price = 0\n          }\n          volume = dataPull.historical[i].volume;\n          if (volume == undefined) {\n            volume = 0\n          }\n          totalCul += price * volume;\n          if (isNaN(totalCul)) {\n            return\n          }\n          volCul += dataPull.historical[i].volume;\n          if (isNaN(volCul)) {\n            return\n          }\n        }\n        const vwmaOneHun = totalCul / volCul;\n        chartArr[num].vwmaOneHun = vwmaOneHun.toFixed(2);\n      }\n  \n      // VWMA TWOHUN --------------------------------------------------------------------\n  \n      volCul = newestPull[0].volume;\n      totalCul = newPrice * newVol;\n      price = 0;\n      volume = 0;\n  \n      if (dataPull.historical.length < 199) {\n        chartArr[num].vwmaTwoHun = \"No Data\";\n      } else {\n        for (let i = 0; i <= 198; i++) {\n          price = dataPull.historical[i].close;\n          if (price == undefined) {\n            price = 0\n          }\n          volume = dataPull.historical[i].volume;\n          if (volume == undefined) {\n            volume = 0\n          }\n          totalCul += price * volume;\n          if (isNaN(totalCul)) {\n            return\n          }\n          volCul += dataPull.historical[i].volume;\n          if (isNaN(volCul)) {\n            return\n          }\n        }\n        const vwmaTwoHun = totalCul / volCul;\n        chartArr[num].vwmaTwoHun = vwmaTwoHun.toFixed(2);\n      }\n    } catch (e) {}\n  }\n  // EMA FUNCTION ------------------------------------------------------------------------------------------------------------------------------------------\n  function emaFunction(chartArr, dataPull, newestPull, num, macdCallBack) {\n    let emaEight = 14;\n    let emaTwelve = 22;\n    let emaTwenty = 38;\n    let emaTwentySix = 50;\n    let emaFifty = 98;\n    let emaTwoHun = 398;\n    let prevDayEmaSub = 0;\n    let arrEma = [];\n  \n    let macdTwelve = []; // ARRs USED FOR MACD TWELVE HISTORY\n    let macdTwentySix = []; // ARRs USED FOR MACD TWENTY SIX HISTORY\n  \n    try {\n      const newPrice = newestPull[0].price;\n  \n      // EMA EIGHT ----------------------------------------------------------------------\n      if (dataPull.historical.length <= 16) {\n        chartArr[num].emaEight = \"No Data\";\n      } else {\n        while (emaEight >= 15) {\n          prevDayEmaSub += dataPull.historical[emaEight].close;\n          emaEight--;\n        } //CALCULATE EMA HERE TO GET PREVIOUS DAY EMA FOR ACCURATE CURRENT EMA\n        const subEMA = prevDayEmaSub / 8;\n        //THIS GETS AN EMA USING SMA AS PREV EMA ----------------------------\n        const finalSubEma =\n          (2 / 9) * (dataPull.historical[emaEight].close - subEMA) + subEMA;\n        arrEma.unshift(finalSubEma);\n        emaEight--;\n        while (emaEight >= 0) {\n          let derp =\n            (2 / 9) * (dataPull.historical[emaEight].close - arrEma[0]) +\n            arrEma[0];\n          arrEma.unshift(derp);\n          arrEma.pop();\n          emaEight--;\n        }\n  \n        const finalEma = (2 / 9) * (newPrice - arrEma[0]) + arrEma[0];\n        arrEma.unshift(finalEma);\n        arrEma.pop();\n  \n        chartArr[num].emaEight = arrEma[0].toFixed(2);\n        arrEma.pop();\n        prevDayEmaSub = 0;\n      }\n      // EMA TWELVE ----------------------------------------------------------------------\n      if (dataPull.historical.length <= 24) {\n        chartArr[num].emaTwelve = \"No Data\";\n      } else {\n        while (emaTwelve >= 11) {\n          prevDayEmaSub += dataPull.historical[emaTwelve].close;\n          emaTwelve--;\n        } //CALCULATE EMA HERE TO GET PREVIOUS DAY EMA FOR ACCURATE CURRENT EMA\n  \n        const subEMA = prevDayEmaSub / 12;\n        //THIS GETS AN EMA USING SMA AS PREV EMA ----------------------------\n        const finalSubEma =\n          (2 / 13) * (dataPull.historical[emaTwelve].close - subEMA) + subEMA;\n        arrEma.unshift(finalSubEma);\n        emaTwelve--;\n  \n        while (emaTwelve >= 0) {\n          let derp =\n            (2 / 13) * (dataPull.historical[emaTwelve].close - arrEma[0]) +\n            arrEma[0];\n          arrEma.unshift(derp);\n          arrEma.pop();\n          if (emaTwelve < 8 && emaTwelve >= 0) {\n            //THIS IF STATEMENT IS TO STORE VARIABLES FOR LATER MACD SIGNAL LINE\n            macdTwelve.unshift(derp);\n          }\n          emaTwelve--;\n        }\n  \n        const finalEma = (2 / 13) * (newPrice - arrEma[0]) + arrEma[0];\n        arrEma.unshift(finalEma);\n        arrEma.pop();\n        macdTwelve.unshift(finalEma);\n  \n        chartArr[num].emaTwelve = arrEma[0].toFixed(2);\n        arrEma.pop();\n        prevDayEmaSub = 0;\n      }\n  \n      // EMA TWENTY ----------------------------------------------------------------------\n      if (dataPull.historical.length <= 40) {\n        chartArr[num].emaTwenty = \"No Data\";\n      } else {\n        while (emaTwenty >= 19) {\n          prevDayEmaSub += dataPull.historical[emaTwenty].close;\n          emaTwenty--;\n        } //CALCULATE EMA HERE TO GET PREVIOUS DAY EMA FOR ACCURATE CURRENT EMA\n        const subEMA = prevDayEmaSub / 20;\n        //THIS GETS AN EMA USING SMA AS PREV EMA ----------------------------\n        const finalSubEma =\n          (2 / 21) * (dataPull.historical[emaTwenty].close - subEMA) + subEMA;\n        arrEma.unshift(finalSubEma);\n        emaTwenty--;\n        while (emaTwenty >= 0) {\n          let derp =\n            (2 / 21) * (dataPull.historical[emaTwenty].close - arrEma[0]) +\n            arrEma[0];\n          arrEma.unshift(derp);\n          arrEma.pop();\n          emaTwenty--;\n        }\n  \n        const finalEma = (2 / 21) * (newPrice - arrEma[0]) + arrEma[0];\n        arrEma.unshift(finalEma);\n        arrEma.pop();\n  \n        chartArr[num].emaTwenty = arrEma[0].toFixed(2);\n        arrEma.pop();\n        prevDayEmaSub = 0;\n      }\n  \n      // EMA TWENTY SIX ----------------------------------------------------------------------\n  \n      if (dataPull.historical.length <= 51) {\n        chartArr[num].emaTwentySix = \"No Data\";\n      } else {\n        while (emaTwentySix >= 25) {\n          prevDayEmaSub += dataPull.historical[emaTwentySix].close;\n          emaTwentySix--;\n        } //CALCULATE EMA HERE TO GET PREVIOUS DAY EMA FOR ACCURATE CURRENT EMA\n        const subEMA = prevDayEmaSub / 26;\n        //THIS GETS AN EMA USING SMA AS PREV EMA ----------------------------\n        const finalSubEma =\n          (2 / 27) * (dataPull.historical[emaTwentySix].close - subEMA) + subEMA;\n        arrEma.unshift(finalSubEma);\n        emaTwentySix--;\n        while (emaTwentySix >= 0) {\n          let derp =\n            (2 / 27) * (dataPull.historical[emaTwentySix].close - arrEma[0]) +\n            arrEma[0];\n          arrEma.unshift(derp);\n          arrEma.pop();\n          if (emaTwentySix < 8 && emaTwentySix >= 0) {\n            //THIS IF STATEMENT IS TO STORE VARIABLES FOR LATER MACD SIGNAL LINE\n            macdTwentySix.unshift(derp);\n          }\n          emaTwentySix--;\n        }\n  \n        const finalEma = (2 / 27) * (newPrice - arrEma[0]) + arrEma[0];\n        arrEma.unshift(finalEma);\n        arrEma.pop();\n        macdTwentySix.unshift(finalEma);\n  \n        chartArr[num].emaTwentySix = arrEma[0].toFixed(2);\n        arrEma.pop();\n        prevDayEmaSub = 0;\n      }\n  \n      // EMA FIFTY -----------------------------------------------------------------------------\n  \n      if (dataPull.historical.length <= 100) {\n        chartArr[num].emaFifty = \"No Data\";\n      } else {\n        while (emaFifty >= 49) {\n          prevDayEmaSub += dataPull.historical[emaFifty].close;\n          emaFifty--;\n        } //CALCULATE EMA HERE TO GET PREVIOUS DAY EMA FOR ACCURATE CURRENT EMA\n        const subEMA = prevDayEmaSub / 50;\n        //THIS GETS AN EMA USING SMA AS PREV EMA ----------------------------\n        const finalSubEma =\n          (2 / 51) * (dataPull.historical[emaFifty].close - subEMA) + subEMA;\n        arrEma.unshift(finalSubEma);\n        emaFifty--;\n        while (emaFifty >= 0) {\n          let derp =\n            (2 / 51) * (dataPull.historical[emaFifty].close - arrEma[0]) +\n            arrEma[0];\n          arrEma.unshift(derp);\n          arrEma.pop();\n          emaFifty--;\n        }\n  \n        const finalEma = (2 / 51) * (newPrice - arrEma[0]) + arrEma[0];\n        arrEma.unshift(finalEma);\n        arrEma.pop();\n  \n        chartArr[num].emaFifty = arrEma[0].toFixed(2);\n        arrEma.pop();\n        prevDayEmaSub = 0;\n      }\n  \n      // EMA TWO HUNDRED -----------------------------------------------------------------------------\n  \n      if (dataPull.historical.length <= 400) {\n        chartArr[num].emaTwoHun = \"No Data\";\n      } else {\n        while (emaTwoHun >= 199) {\n          prevDayEmaSub += dataPull.historical[emaTwoHun].close;\n          emaTwoHun--;\n        } //CALCULATE EMA HERE TO GET PREVIOUS DAY EMA FOR ACCURATE CURRENT EMA\n        const subEMA = prevDayEmaSub / 200;\n        //THIS GETS AN EMA USING SMA AS PREV EMA ----------------------------\n        const finalSubEma =\n          (2 / 201) * (dataPull.historical[emaTwoHun].close - subEMA) + subEMA;\n        arrEma.unshift(finalSubEma);\n        emaTwoHun--;\n        while (emaTwoHun >= 0) {\n          let derp =\n            (2 / 201) * (dataPull.historical[emaTwoHun].close - arrEma[0]) +\n            arrEma[0];\n          arrEma.unshift(derp);\n          arrEma.pop();\n          emaTwoHun--;\n        }\n  \n        const finalEma = (2 / 201) * (newPrice - arrEma[0]) + arrEma[0];\n        arrEma.unshift(finalEma);\n        arrEma.pop();\n  \n        chartArr[num].emaTwoHun = arrEma[0].toFixed(2);\n        arrEma.pop();\n        prevDayEmaSub = 0;\n      }\n    } catch (e) {}\n  \n    // MACD CALLBACK -----------------------------------------------------------------------------------------------------------------------------------------\n    macdCallBack(chartArr, num, macdTwelve, macdTwentySix);\n  }\n  // MACD FUNCTION -----------------------------------------------------------------------------------------------------------------------------------------\n  function macdFunction(chartArr, num, arr1, arr2) {\n    const macd = chartArr[num].emaTwelve - chartArr[num].emaTwentySix;\n    chartArr[num].macd = macd.toFixed(2);\n    // CALCULATE SIGNAL LINE ----------------\n    let averageMacd = [];\n    let iMacd = 8;\n  \n    try {\n      while (iMacd >= 0) {\n        averageMacd.unshift(arr1[iMacd] - arr2[iMacd]);\n        iMacd--;\n      }\n      let averageSum = averageMacd.reduce((a, b) => a + b);\n      let finalAverageMacd = averageSum / 9;\n      let macdSignalLine =\n        (2 / 9) * (chartArr[num].macd - finalAverageMacd) + finalAverageMacd;\n      chartArr[num].macdSignalLine = macdSignalLine.toFixed(2);\n      // HISTORGRAM CALC ------------------------------------- IF HISTOGRAM GOES FROM NEGATIVE TO POSITIVE IT IS BULLISH\n      let histogram = chartArr[num].macd - chartArr[num].macdSignalLine;\n      chartArr[num].macdHistogram = histogram.toFixed(2);\n      // FOR NO DATA TO PULL FROM\n      if (chartArr[num].macdHistogram === \"NaN\") {\n        chartArr[num].macdHistogram = \"No Data\";\n      }\n      if (chartArr[num].macd === \"NaN\") {\n        chartArr[num].macd = \"No Data\";\n      }\n      if (chartArr[num].macdSignalLine === \"NaN\") {\n        chartArr[num].macdSignalLine = \"No Data\";\n      }\n    } catch (e) {}\n  }\n  // RSI FUNCTION ------------------------------------------------------------------------------------------------------------------------------------------\n  function rsiFunction(chartArr, dataPull, newestPull, num) {\n    let iRSI = 13;\n    let iRSIAdjusted = 14;\n    let recentUpper = 0;\n    let recentDowner = 0;\n    let upMove = 0;\n    let downMove = 0;\n    let pastDownPeriod = 0;\n    let pastUpPeriod = 0;\n  \n    try {\n      const newPrice = newestPull[0].price;\n      // CHECK TO SEE IF DATA PULL CAN PULL ENOUGH DATA TO BE EFFECTIVE\n      if (dataPull.historical.length <= 14) {\n        chartArr[num].rsi = \"No Data\";\n      } else {\n        // LOOP FOR AVERAGE\n        while (iRSI >= 0) {\n          if (\n            dataPull.historical[iRSI].close >\n            dataPull.historical[iRSIAdjusted].close\n          ) {\n            upMove +=\n              dataPull.historical[iRSI].close -\n              dataPull.historical[iRSIAdjusted].close;\n          } else {\n            downMove +=\n              dataPull.historical[iRSIAdjusted].close -\n              dataPull.historical[iRSI].close;\n          }\n          iRSI--;\n          iRSIAdjusted--;\n        }\n  \n        let averageUp = upMove / 14;\n        let averageDown = downMove / 14;\n  \n        // MOST RECENT DIFFERENCE\n        if (newPrice > dataPull.historical[0].close) {\n          recentUpper = newPrice - dataPull.historical[0].close;\n        } else {\n          recentDowner = dataPull.historical[0].close - newPrice;\n        }\n  \n        pastUpPeriod = (averageUp * 13 + recentUpper) / 14;\n        pastDownPeriod = (averageDown * 13 + recentDowner) / 14;\n  \n        let rsi = 100 - 100 / (1 + pastUpPeriod / pastDownPeriod);\n        chartArr[num].rsi = rsi.toFixed(2);\n      }\n    } catch (e) {}\n  }\n  // STOCHASTIC OSCILLATOR ------------------------------------------------------------------------------------------------------------------------------------------------------------------\n  function stochOsc1433Function(chartArr, dataPull, newestPull, num) {\n    let iSO = 13;\n  \n    let soLowHolder = [];\n    let soHighHolder = [];\n    let highestHigh = 0;\n    let lowestLow = 0;\n    // FIRST %D\n    let topForm = [];\n    let bottomForm = [];\n    // SECOND %D\n    let topFormTwo = [];\n    let bottomFormTwo = [];\n    // THIRD %D\n    let topFormThree = [];\n    let bottomFormThree = [];\n    // HOLDING SET OF %D FOR 14 3 3\n    let signalLineHolder = [];\n    try {\n      let newPrice = newestPull[0].price;\n  \n      if (dataPull.historical.length < 18) {\n        chartArr[num].stochasticK = \"No Data\";\n      } else {\n        // GETTING HIGHS AND LOWS OF PERIOD------------------------------------------------------\n  \n        while (iSO >= 0) {\n          soLowHolder.push(dataPull.historical[iSO].low);\n          soHighHolder.push(dataPull.historical[iSO].high);\n          iSO--;\n        }\n  \n        soHighHolder.push(newPrice);\n        soLowHolder.push(newPrice);\n  \n        highestHigh = Math.max(...soHighHolder);\n        lowestLow = Math.min(...soLowHolder);\n  \n        if (lowestLow === newPrice) {\n          newPrice = dataPull.historical[0].close;\n        }\n  \n        if (highestHigh === newPrice) {\n          newPrice = dataPull.historical[0].close;\n        }\n  \n        topForm.push(newPrice - lowestLow);\n        bottomForm.push(highestHigh - lowestLow);\n  \n        //FOR %K\n        chartArr[num].stochasticK = (\n          ((newPrice - lowestLow) / (highestHigh - lowestLow)) *\n          100\n        ).toFixed(2);\n  \n        // RESET HOLDER AND VARs --------------------------------------------------------\n  \n        iSO = 14;\n        soLowHolder = [];\n        soHighHolder = [];\n        highestHigh = 0;\n        lowestLow = 0;\n  \n        // GETTING HIGHS AND LOWS OF PERIOD-----------------------------------------------\n  \n        while (iSO >= 1) {\n          soLowHolder.push(dataPull.historical[iSO].low);\n          soHighHolder.push(dataPull.historical[iSO].high);\n          iSO--;\n        }\n  \n        highestHigh = Math.max(...soHighHolder);\n        lowestLow = Math.min(...soLowHolder);\n  \n        topForm.push(dataPull.historical[0].close - lowestLow);\n        bottomForm.push(highestHigh - lowestLow);\n  \n        topFormTwo.push(dataPull.historical[0].close - lowestLow);\n        bottomFormTwo.push(highestHigh - lowestLow);\n  \n        // RESET HOLDER AND VARs ------------------------------------------------\n  \n        iSO = 15;\n        soLowHolder = [];\n        soHighHolder = [];\n        highestHigh = 0;\n        lowestLow = 0;\n  \n        // GETTING HIGHS AND LOWS OF PERIOD-----------------------------------\n  \n        while (iSO >= 2) {\n          soLowHolder.push(dataPull.historical[iSO].low);\n          soHighHolder.push(dataPull.historical[iSO].high);\n          iSO--;\n        }\n        highestHigh = Math.max(...soHighHolder);\n        lowestLow = Math.min(...soLowHolder);\n  \n        topForm.push(dataPull.historical[1].close - lowestLow);\n        bottomForm.push(highestHigh - lowestLow);\n  \n        topFormTwo.push(dataPull.historical[1].close - lowestLow);\n        bottomFormTwo.push(highestHigh - lowestLow);\n  \n        topFormThree.push(dataPull.historical[1].close - lowestLow);\n        bottomFormThree.push(highestHigh - lowestLow);\n  \n        // AFTER 3 WE SUM IT UP --------------- TO GET 1 OF THE 3 SMOOTHS FOR 14 3 3------------------------------------------\n  \n        let sumTop = topForm.reduce((a, b) => a + b, 0);\n        let sumBottom = bottomForm.reduce((a, b) => a + b, 0);\n  \n        let slowD = (sumTop / sumBottom) * 100;\n  \n        // FOR %D\n        chartArr[num].stochasticD = (slowD / 3).toFixed(2);\n  \n        signalLineHolder.push(slowD);\n  \n        //RESET VARS ---------------------------------------------------------------------\n  \n        iSO = 16;\n        soLowHolder = [];\n        soHighHolder = [];\n        highestHigh = 0;\n        lowestLow = 0;\n        sumTop = 0;\n        sumBottom = 0;\n        slowD = 0;\n  \n        // GETTING HIGHS AND LOWS OF PERIOD------------------------------------------------\n  \n        while (iSO >= 3) {\n          soLowHolder.push(dataPull.historical[iSO].low);\n          soHighHolder.push(dataPull.historical[iSO].high);\n          iSO--;\n        }\n        highestHigh = Math.max(...soHighHolder);\n        lowestLow = Math.min(...soLowHolder);\n  \n        topFormTwo.push(dataPull.historical[2].close - lowestLow);\n        bottomFormTwo.push(highestHigh - lowestLow);\n  \n        topFormThree.push(dataPull.historical[2].close - lowestLow);\n        bottomFormThree.push(highestHigh - lowestLow);\n  \n        // AFTER 3 WE SUM IT UP --------------- TO GET 2 OF THE 3 SMOOTHS FOR 14 3 3------------------------------------------\n  \n        sumTop = topFormTwo.reduce((a, b) => a + b, 0);\n        sumBottom = bottomFormTwo.reduce((a, b) => a + b, 0);\n  \n        slowD = (sumTop / sumBottom) * 100;\n  \n        signalLineHolder.push(slowD);\n  \n        //RESET VARS ---------------------------------------------\n  \n        iSO = 17;\n        soLowHolder = [];\n        soHighHolder = [];\n        highestHigh = 0;\n        lowestLow = 0;\n        sumTop = 0;\n        sumBottom = 0;\n        slowD = 0;\n  \n        // GETTING HIGHS AND LOWS OF PERIOD-----------------------------------\n  \n        while (iSO >= 4) {\n          soLowHolder.push(dataPull.historical[iSO].low);\n          soHighHolder.push(dataPull.historical[iSO].high);\n          iSO--;\n        }\n        highestHigh = Math.max(...soHighHolder);\n        lowestLow = Math.min(...soLowHolder);\n  \n        topFormThree.push(dataPull.historical[3].close - lowestLow);\n        bottomFormThree.push(highestHigh - lowestLow);\n  \n        // AFTER 3 WE SUM IT UP --------------- TO GET 3 OF THE 3 SMOOTHS FOR 14 3 3------------------------------------------\n  \n        sumTop = topFormThree.reduce((a, b) => a + b, 0);\n        sumBottom = bottomFormThree.reduce((a, b) => a + b, 0);\n  \n        slowD = (sumTop / sumBottom) * 100;\n  \n        signalLineHolder.push(slowD);\n  \n        // ----------- TALLY UP LAST SMOOTHING -------------------------------\n        const sumStochD = signalLineHolder.reduce((a, b) => a + b, 0);\n        let smaD = sumStochD / 3;\n  \n        if (smaD < 0) {\n          smaD *= -1;\n          chartArr[num].stochasticSignal = smaD.toFixed(2);\n        } else {\n          chartArr[num].stochasticSignal = smaD.toFixed(2);\n        }\n      }\n    } catch (e) {}\n  }\n  // WILLIAMS %R 14 ------------------------------------------------------------------------------------------------------------------------------------------------------------------\n  function williamsRFunction(chartArr, dataPull, newestPull, num) {\n    let highs = [];\n    let lows = [];\n    let lowestLow = 0;\n    let highestHigh = 0;\n    try {\n      const newPrice = newestPull[0].price;\n  \n      if (dataPull.historical.length < 14) {\n        chartArr[num].williams = \"No Data\";\n      } else {\n        for (let i = 0; i <= 13; i++) {\n          highs.push(dataPull.historical[i].high);\n          lows.push(dataPull.historical[i].low);\n        }\n  \n        highs.push(newPrice);\n        lows.push(newPrice);\n  \n        lowestLow = Math.min(...lows);\n        highestHigh = Math.max(...highs);\n  \n        const williams =\n          ((highestHigh - dataPull.historical[0].close) /\n            (highestHigh - lowestLow)) *\n          -100;\n  \n        chartArr[num].williamsR = williams.toFixed(2);\n      }\n    } catch (e) {}\n  }\n  // CCI 20 ------------------------------------------------------------------------------------------------------------------------------------------------------------------\n  function cciFunction(chartArr, dataPull, newestPull, num) {\n    let tpvCul = 0;\n    let tpv = [];\n    let tpvMa = 0;\n  \n    try {\n      const newPrice = newestPull[0].price;\n      let tpvCurrent = newPrice;\n      const recentTpv = newPrice;\n  \n      if (dataPull.historical.length < 19) {\n        chartArr[num].cciTwenty = \"No Data\";\n      } else {\n        for (let i = 0; i <= 19; i++) {\n          const { high, close, low } = dataPull.historical[i];\n          tpv.push(tpvCurrent); // PUSH FIRST NUMBER IN\n          tpvCurrent = (close + high + low) / 3;\n        }\n        // ---- TPV SMA ------------------------\n        tpvCul = tpv.reduce((a, b) => a + b);\n        tpvMa = tpvCul / 20;\n        // TOP HALF OF FORMULA - DIVIDE BY PART TWO\n        const partOne = recentTpv - tpvMa;\n  \n        const meanD = tpv.map((x) => x - tpvMa);\n        const meanDMap = meanD.map((x) => Math.abs(x));\n        const meanDSum = meanDMap.reduce((a, b) => a + b);\n        const meanDiv = meanDSum / 20;\n        // PART TWO OF FORMULA --------------\n        const partTwo = meanDiv * 0.015;\n        // CCI ------------------------------\n        const cci = partOne / partTwo;\n  \n        chartArr[num].cciTwenty = cci.toFixed(2);\n      }\n    } catch (e) {}\n  }\n  // BOLLINGER BANDS ------------------------------------------------------------------------------------------------------------------------------------------------------------------\n  function bollingerBandsFunction(chartArr, dataPull, newestPull, num) {\n    let smaCul = 0;\n    let closeHolder = [];\n    try {\n      const newPrice = newestPull[0].price;\n  \n      if (dataPull.historical.length < 19) {\n        chartArr[num].bbUpper = \"No Data\";\n        chartArr[num].bbLower = \"No Data\";\n        chartArr[num].bbMiddle = \"No Data\";\n      } else {\n        let closeP = newPrice;\n        for (let i = 0; i <= 19; i++) {\n          closeHolder.push(closeP);\n          smaCul += closeP;\n          closeP = dataPull.historical[i].close;\n        }\n        // STANDARD DEVIATION CALC --------------------------------\n        const smaTwenty = smaCul / 20;\n  \n        const priceAdj = closeHolder.map((x) => x - smaTwenty);\n  \n        const priceAdjAbs = priceAdj.map((x) => Math.abs(x));\n  \n        const priceAdjSqrt = priceAdjAbs.map((x) => x * x);\n  \n        const partOneDev = priceAdjSqrt.reduce((a, b) => a + b);\n  \n        const partTwoDev = partOneDev / 20;\n        const standardDev = Math.sqrt(partTwoDev);\n        // BB BAND CALC --------------------------------------------\n        const bbUpper = smaTwenty + standardDev * 2;\n        const bbLower = smaTwenty - standardDev * 2;\n  \n        const bbPercent = (newPrice - bbLower) / (bbUpper - bbLower);\n  \n        chartArr[num].bbUpper = bbUpper.toFixed(2);\n        chartArr[num].bbLower = bbLower.toFixed(2);\n        chartArr[num].bbMiddle = smaTwenty.toFixed(2);\n        chartArr[num].bbPercent = bbPercent.toFixed(2);\n      }\n    } catch (e) {}\n  }\n  // VWAP FUNCTION ------------------------------------------------------------------------------------------------------------------------------------------\n  function vwapFunction(chartArr, dataPull, num, dateObj) {\n    // ----------- VWAP CALUC -------------------------------------------\n    let dayLengthPeriod = 0;\n    let tpvCul = 0;\n    let volumeCul = 0;\n    let tempVWAP = []; // HOLD VWAP PERIOD - TAKES FROM 0 INDEX FOR MOST CURRENT\n  \n    try {\n      // -------------THIS IS FOR GETTING THE DAY LENGTH FOR VWAP\n      while (dataPull[dayLengthPeriod].date.slice(0, 10) == dateObj.newDateString) {\n        dayLengthPeriod++;\n      }\n    \n      // --------------------THIS IS FOR CALCULATING THE VWAP AND PUSHING TO\n  \n      for (let i = 0; i < dayLengthPeriod; i++) {\n        const { volume, high, close, low, date } = dataPull[i];\n        let tpv = (high + low + close) / 3;\n        if (date.slice(0, 10) == dateObj.newDateString) {\n          tpvCul += tpv * volume;\n          volumeCul += volume;\n        }\n        var vwapFinal = tpvCul / volumeCul; // --------- THIS IS VWAP!!!!!!!!\n        tempVWAP.unshift(vwapFinal); //ADD VWAP FRONT OF ARR\n      }\n      let vwap = tempVWAP[0].toFixed(2);\n      chartArr[num].vwap = vwap;\n    } catch (e) {\n    }\n  }\n  // SET VOLUME FOR LATER\n  function setVolume(chartArr, dataPull, newestPull, num, dateObj) {\n    // SET RECENT YESTERDAY VOLUME\n    try {\n      if (dataPull.historical.length <= 0) {\n        chartArr[num].yesterdayVolume = 0;\n      } else {\n        chartArr[num].yesterdayVolume = dataPull.historical[0].volume;\n        if (dateObj.marketDay == 0 || dateObj.marketDay == 6) {\n          chartArr[num].yesterdayVolume = dataPull.historical[1].volume;\n        }\n  \n        if (dateObj.marketDay >= 1 && dateObj.marketDay <= 5 && dateObj.timeNum < 930) {\n          chartArr[num].yesterdayVolume = dataPull.historical[1].volume;\n        }\n  \n        if (dateObj.timeNum > 1830) {\n          chartArr[num].yesterdayVolume = dataPull.historical[1].volume;\n        }\n      }\n      if (newestPull.length < 0) {\n        chartArr[num].volume = 0;\n      } else {\n        // SET RECENT VOLUME\n        chartArr[num].volume = newestPull[0].volume;\n      }\n    } catch (e) {}\n  }\n  \n\n\n  // TA INTO OBJECTS FUNCTIONS ---------------------------------------------------------------------\n  export async function technicalIndicators(finalArr, callback, dateObj) {\n    let j = 0;\n  \n    while (j < finalArr.length) {\n      // LOOP FOR TECHNICAL SYMBOL\n  \n      // THIS IS THE ALL MIGHTY SYMBOL USED FOR PULLS\n      const { symbol } = finalArr[j];\n  \n      //THIS PULL IS FOR CLOSE PRICES TO CALC TAs PAST CLOSE DATA //\n      const resSMA = await fetch(\n        `https://financialmodelingprep.com/api/v3/historical-price-full/${symbol}?apikey=4d4593bc9e6bc106ee9d1cbd6400b218`\n      );\n      const dataSMA = await resSMA.json(); // SMA PULL USED FOR OTHER CALCS\n      // ERROR CHECK FOR EMPTY PULL\n      try {\n        if (!Object.keys(dataSMA).length) {\n          console.log(\"no SMA Pull data found\");\n        }\n      } catch (e) {}\n  \n      //THIS PULL IS FOR OSCILLATORS ALL CURRENT CLOSE DATA\n      const resOscPulled = await fetch(\n        `https://financialmodelingprep.com/api/v3/quote-short/${symbol}?apikey=4d4593bc9e6bc106ee9d1cbd6400b218`\n      );\n      const dataRecentPulled = await resOscPulled.json();\n      // ERROR CHECK FOR EMPTY PULL\n      try {\n        if (!Object.keys(dataRecentPulled).length) {\n          console.log(\"no Recent Pull data found\");\n        }\n      } catch (e) {}\n  \n      // VWAP ------------------------------------------------------------------------------------------------------------------------------------------------\n      const resVWAP = await fetch(\n        `https://financialmodelingprep.com/api/v3/historical-chart/5min/${symbol}?apikey=4d4593bc9e6bc106ee9d1cbd6400b218`\n      );\n      const dataVWAP = await resVWAP.json();\n      // ERROR CHECK FOR EMPTY PULL\n      try {\n        if (!Object.keys(dataVWAP).length) {\n          console.log(\"no VWAP Pull data found\");\n        }\n      } catch (e) {}\n  \n      // VWAP ------------------------------------------------------------------------------------------------------------------------------------------------\n      vwapFunction(finalArr, dataVWAP, j);\n  \n      // SMA -----------------------------------------------------------------------------------------------------------------------------------------------------------------------\n      smaFunction(finalArr, dataSMA, dataRecentPulled, j);\n  \n      // WMA ------------------------------------------------------------------------------------------------------------------------------------------------------------------\n      wmaFunction(finalArr, dataSMA, dataRecentPulled, j);\n  \n      // VWMA ------------------------------------------------------------------------------------------------------------------------------------------------------------------\n      vwmaFunction(finalArr, dataSMA, dataRecentPulled, j);\n  \n      // EMA WITH MACD CALLBACK ------------------------------------------------------------------------------------------------------------------------------------------\n      emaFunction(finalArr, dataSMA, dataRecentPulled, j, macdFunction);\n  \n      // RSI ------------------------------------------------------------------------------------------------------------------------------------------------------------------\n      rsiFunction(finalArr, dataSMA, dataRecentPulled, j);\n  \n      // STOCHASTIC OSCILLATOR ------------------------------------------------------------------------------------------------------------------------------------------------------------------\n      stochOsc1433Function(finalArr, dataSMA, dataRecentPulled, j); //DATA VWAP USED FOR RECETN CLOSE DATA\n  \n      // WILLIAMS %R 14 ------------------------------------------------------------------------------------------------------------------------------------------------------------------\n      williamsRFunction(finalArr, dataSMA, dataRecentPulled, j);\n  \n      // CCI 20 ------------------------------------------------------------------------------------------------------------------------------------------------------------------\n      cciFunction(finalArr, dataSMA, dataRecentPulled, j);\n  \n      // BOLLINGER BANDS ------------------------------------------------------------------------------------------------------------------------------------------------------------------\n      bollingerBandsFunction(finalArr, dataSMA, dataRecentPulled, j);\n  \n      // SET VOLUME PROPERTIES\n      setVolume(finalArr, dataSMA, dataRecentPulled, j);\n  \n      j++; // UPDATE WHILE LOOP\n    } // THIS IS THE END OF LOOP\n    const returnedData = await callback(finalArr, buildIt);\n    return returnedData;\n    \n  }\n  \n\n"]},"metadata":{},"sourceType":"module"}