{"ast":null,"code":"// BOLLINGER BANDS ------------------------------------------------------------------------------------------------------------------------------------------------------------------\nexport function bollingerBandsFunction(chartArr, dataPull, newestPull, num) {\n  let smaCul = 0;\n  let closeHolder = [];\n\n  try {\n    const newPrice = newestPull[0].price;\n\n    if (dataPull.historical.length < 19) {\n      chartArr[num].bbUpper = \"No Data\";\n      chartArr[num].bbLower = \"No Data\";\n      chartArr[num].bbMiddle = \"No Data\";\n    } else {\n      let closeP = newPrice;\n\n      for (let i = 0; i <= 19; i++) {\n        closeHolder.push(closeP);\n        smaCul += closeP;\n        closeP = dataPull.historical[i].close;\n      } // STANDARD DEVIATION CALC --------------------------------\n\n\n      const smaTwenty = smaCul / 20;\n      const priceAdj = closeHolder.map(x => x - smaTwenty);\n      const priceAdjAbs = priceAdj.map(x => Math.abs(x));\n      const priceAdjSqrt = priceAdjAbs.map(x => x * x);\n      const partOneDev = priceAdjSqrt.reduce((a, b) => a + b);\n      const partTwoDev = partOneDev / 20;\n      const standardDev = Math.sqrt(partTwoDev); // BB BAND CALC --------------------------------------------\n\n      const bbUpper = smaTwenty + standardDev * 2;\n      const bbLower = smaTwenty - standardDev * 2;\n      const bbPercent = (newPrice - bbLower) / (bbUpper - bbLower);\n      chartArr[num].bbUpper = bbUpper.toFixed(2);\n      chartArr[num].bbLower = bbLower.toFixed(2);\n      chartArr[num].bbMiddle = smaTwenty.toFixed(2);\n      chartArr[num].bbPercent = bbPercent.toFixed(2);\n    }\n  } catch (e) {}\n}","map":{"version":3,"sources":["/Users/austinolijar/Desktop/MERN-DeadCat/dead-cat/client/src/JS/technical-Indicators.js/bbands.js"],"names":["bollingerBandsFunction","chartArr","dataPull","newestPull","num","smaCul","closeHolder","newPrice","price","historical","length","bbUpper","bbLower","bbMiddle","closeP","i","push","close","smaTwenty","priceAdj","map","x","priceAdjAbs","Math","abs","priceAdjSqrt","partOneDev","reduce","a","b","partTwoDev","standardDev","sqrt","bbPercent","toFixed","e"],"mappings":"AAAC;AACA,OAAO,SAASA,sBAAT,CAAgCC,QAAhC,EAA0CC,QAA1C,EAAoDC,UAApD,EAAgEC,GAAhE,EAAqE;AACzE,MAAIC,MAAM,GAAG,CAAb;AACA,MAAIC,WAAW,GAAG,EAAlB;;AACA,MAAI;AACF,UAAMC,QAAQ,GAAGJ,UAAU,CAAC,CAAD,CAAV,CAAcK,KAA/B;;AAEA,QAAIN,QAAQ,CAACO,UAAT,CAAoBC,MAApB,GAA6B,EAAjC,EAAqC;AACnCT,MAAAA,QAAQ,CAACG,GAAD,CAAR,CAAcO,OAAd,GAAwB,SAAxB;AACAV,MAAAA,QAAQ,CAACG,GAAD,CAAR,CAAcQ,OAAd,GAAwB,SAAxB;AACAX,MAAAA,QAAQ,CAACG,GAAD,CAAR,CAAcS,QAAd,GAAyB,SAAzB;AACD,KAJD,MAIO;AACL,UAAIC,MAAM,GAAGP,QAAb;;AACA,WAAK,IAAIQ,CAAC,GAAG,CAAb,EAAgBA,CAAC,IAAI,EAArB,EAAyBA,CAAC,EAA1B,EAA8B;AAC5BT,QAAAA,WAAW,CAACU,IAAZ,CAAiBF,MAAjB;AACAT,QAAAA,MAAM,IAAIS,MAAV;AACAA,QAAAA,MAAM,GAAGZ,QAAQ,CAACO,UAAT,CAAoBM,CAApB,EAAuBE,KAAhC;AACD,OANI,CAOL;;;AACA,YAAMC,SAAS,GAAGb,MAAM,GAAG,EAA3B;AAEA,YAAMc,QAAQ,GAAGb,WAAW,CAACc,GAAZ,CAAiBC,CAAD,IAAOA,CAAC,GAAGH,SAA3B,CAAjB;AAEA,YAAMI,WAAW,GAAGH,QAAQ,CAACC,GAAT,CAAcC,CAAD,IAAOE,IAAI,CAACC,GAAL,CAASH,CAAT,CAApB,CAApB;AAEA,YAAMI,YAAY,GAAGH,WAAW,CAACF,GAAZ,CAAiBC,CAAD,IAAOA,CAAC,GAAGA,CAA3B,CAArB;AAEA,YAAMK,UAAU,GAAGD,YAAY,CAACE,MAAb,CAAoB,CAACC,CAAD,EAAIC,CAAJ,KAAUD,CAAC,GAAGC,CAAlC,CAAnB;AAEA,YAAMC,UAAU,GAAGJ,UAAU,GAAG,EAAhC;AACA,YAAMK,WAAW,GAAGR,IAAI,CAACS,IAAL,CAAUF,UAAV,CAApB,CAnBK,CAoBL;;AACA,YAAMnB,OAAO,GAAGO,SAAS,GAAGa,WAAW,GAAG,CAA1C;AACA,YAAMnB,OAAO,GAAGM,SAAS,GAAGa,WAAW,GAAG,CAA1C;AAEA,YAAME,SAAS,GAAG,CAAC1B,QAAQ,GAAGK,OAAZ,KAAwBD,OAAO,GAAGC,OAAlC,CAAlB;AAEAX,MAAAA,QAAQ,CAACG,GAAD,CAAR,CAAcO,OAAd,GAAwBA,OAAO,CAACuB,OAAR,CAAgB,CAAhB,CAAxB;AACAjC,MAAAA,QAAQ,CAACG,GAAD,CAAR,CAAcQ,OAAd,GAAwBA,OAAO,CAACsB,OAAR,CAAgB,CAAhB,CAAxB;AACAjC,MAAAA,QAAQ,CAACG,GAAD,CAAR,CAAcS,QAAd,GAAyBK,SAAS,CAACgB,OAAV,CAAkB,CAAlB,CAAzB;AACAjC,MAAAA,QAAQ,CAACG,GAAD,CAAR,CAAc6B,SAAd,GAA0BA,SAAS,CAACC,OAAV,CAAkB,CAAlB,CAA1B;AACD;AACF,GAtCD,CAsCE,OAAOC,CAAP,EAAU,CAAE;AACf","sourcesContent":[" // BOLLINGER BANDS ------------------------------------------------------------------------------------------------------------------------------------------------------------------\n export function bollingerBandsFunction(chartArr, dataPull, newestPull, num) {\n    let smaCul = 0;\n    let closeHolder = [];\n    try {\n      const newPrice = newestPull[0].price;\n  \n      if (dataPull.historical.length < 19) {\n        chartArr[num].bbUpper = \"No Data\";\n        chartArr[num].bbLower = \"No Data\";\n        chartArr[num].bbMiddle = \"No Data\";\n      } else {\n        let closeP = newPrice;\n        for (let i = 0; i <= 19; i++) {\n          closeHolder.push(closeP);\n          smaCul += closeP;\n          closeP = dataPull.historical[i].close;\n        }\n        // STANDARD DEVIATION CALC --------------------------------\n        const smaTwenty = smaCul / 20;\n  \n        const priceAdj = closeHolder.map((x) => x - smaTwenty);\n  \n        const priceAdjAbs = priceAdj.map((x) => Math.abs(x));\n  \n        const priceAdjSqrt = priceAdjAbs.map((x) => x * x);\n  \n        const partOneDev = priceAdjSqrt.reduce((a, b) => a + b);\n  \n        const partTwoDev = partOneDev / 20;\n        const standardDev = Math.sqrt(partTwoDev);\n        // BB BAND CALC --------------------------------------------\n        const bbUpper = smaTwenty + standardDev * 2;\n        const bbLower = smaTwenty - standardDev * 2;\n  \n        const bbPercent = (newPrice - bbLower) / (bbUpper - bbLower);\n  \n        chartArr[num].bbUpper = bbUpper.toFixed(2);\n        chartArr[num].bbLower = bbLower.toFixed(2);\n        chartArr[num].bbMiddle = smaTwenty.toFixed(2);\n        chartArr[num].bbPercent = bbPercent.toFixed(2);\n      }\n    } catch (e) {}\n  }"]},"metadata":{},"sourceType":"module"}